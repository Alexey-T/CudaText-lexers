object SyntAnal26: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id command'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id register'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^[\x20\x09]* \*.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 4
      Expression = '-? (\d+ \.)? \d+ e [\+\-]? \d+\b |'#13#10'-? \d+ \. \d+ \b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 4
      Expression = '\$[0-9a-f]+\b | @[0-7]+\b | %[01]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 4
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id register'
      StyleName = 'Id register'
      Expression = '\b([ad][0-7]|SP|PC|vbr|fp[0-7])\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      Expression = '[a-z_][\w\.]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 3
      Expression = '('#39'|").*?\1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 2
      Expression = '[\.,:\-\+\*\\/<>\(\)\[\]\{\}\?=!\#]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'do'
            'end'
            'endi'
            'endw'
            'equ'
            'if(.\w+)?'
            'org'
            'repeat'
            'simhalt'
            'start'
            'until(\.\w+)?'
            'while')
          CondType = tcStrictMask
          TokenTypes = 1
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Commands'
      StyleName = 'Id command'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '\b(bchg|bclr|bset|btst)(\.[bl])?\b'
            
              '\b(bhs|blo|bhi|bls|bcc|bcs|bne|beq|bvc|bvs|bpl|bmi|bge|blt|bgt|b' +
              'le|bra|bsr|jbhs|jblo|jbhi|jbls|jbcc|jbcs|jbne|jbeq|jbvc|jbvs|jbp' +
              'l|jbmi|jbge|jblt|jbgt|jble|jbra|jbsr)(\.[bwls])?\b'
            
              '\b(fabs|fsabs|fdabs|facos|fadd|fsadd|fdadd|fasin|fatan|fatanh|fc' +
              'mp|fcos|fcosh|fdiv|fsdiv|fddiv|fetox|fetoxm1|fgetexp|fgetman|fin' +
              't|fintrz|flog10|flog2|flogn|flognp1|fmod|fmove|fsmove|fdmove|fmu' +
              'l|fsmul|fdmul|fneg|fsneg|fdneg|frem|fscale|fsgldiv|fsglmul|fsin|' +
              'fsinh|fsqrt|fssqrt|fdsqrt|fsub|fssub|fdsub|ftan|ftanh|ftentox|ft' +
              'wotox)(\.[bwlsdxp])?\b'
            '\b(fmovecr)(\.[x])?\b'
            '\b(fmovem)(\.[ldx])?\b'
            '\b(fsincos|ftst)(\.[bwlsdxp])?\b'
            
              '\b(lpstop|pdbbs|pdbbc|pdbls|pdblc|pdbss|pdbsc|pdbas|pdbac|pdbws|' +
              'pdbwc|pdbis|pdbic|pdbgs|pdbgc|pdbcs|pdbcc|dbt|dbf|dbra|dbhi|dbls' +
              '|dbcc|dbhs|dbcs|dblo|dbne|dbvs|dbeq|dbpl|dbvc|dbmi|dbge|dblt|dbg' +
              't|dble|strldsr|swap|fdbf|fdbeq|fdbogt|fdboge|fdbolt|fdbole|fdbog' +
              'l|fdbor|fdbun|fdbueq|fdbugt|fdbuge|fdbult|fdbule|fdbne|fdbt|fdbs' +
              'f|fdbseq|fdbgt|fdbge|fdblt|fdble|fdbgl|fdbgle|fdbngle|fdbngl|fdb' +
              'nle|fdbnlt|fdbnge|fdbngt|fdbsne|fdbst)(\.[w])?\b'
            
              '\b(lsr|move|tst|moves|wddata|neg|negx|not|or|ori|addq|addi|addx|' +
              'and|andi|asl|asr|cas|chk2|clr|cmp|cmpi|cmpm|cmp2|eor|eori|rol|ro' +
              'r|roxl|roxr|sub|subi|subq|subx|tbls|tblsn|tblu|tblun|add|lsl)(\.' +
              '[bwl])?\b'
            
              '\b(maaac|mac|traplo|masac|trapne|trapeq|movea|movem|traple|movep' +
              '|movm|msaac|msac|mssac|muls|mulu|pbbs|pbbc|adda|pblc|pbss|pbls|p' +
              'bsc|pbas|pbac|pbws|pbwc|pbis|pbic|pbgs|pbgc|pbcs|pbcc|cas2|chk|c' +
              'mpa|ptrapbs|ptrapbc|ptrapls|ptraplc|ptrapss|ptrapsc|ptrapas|ptra' +
              'pac|ptrapws|ptrapwc|ptrapis|divs|ptrapic|ptrapgs|divu|ptrapgc|pt' +
              'rapcs|ptrapcc|ext|fbf|fbeq|fbogt|fboge|fbolt|fbole|fbogl|fbor|fb' +
              'un|fbueq|fbugt|fbuge|fbult|fbule|fbne|fbt|fbsf|fbseq|fbgt|fbge|f' +
              'blt|fble|fbgl|fbgle|suba|fbngle|fbngl|fbnle|fbnlt|fbnge|fbngt|fb' +
              'sne|fbst|tpf|trapt|trapf|traphi|trapls|trapcc|traphs|trapcs|trap' +
              'ge|trapmi|trappl|trapvs|trapvc|traplt|link|trapgt|ftrapf|ftrapeq' +
              '|ftrapogt|ftrapoge|ftrapolt|ftrapole|ftrapogl|ftrapor|ftrapun|ft' +
              'rapueq|ftrapugt|ftrapuge|ftrapult|ftrapule|ftrapne|ftrapt|ftraps' +
              'f|ftrapseq|ftrapgt|ftrapge|ftraplt|ftraple|ftrapgl|ftrapgle|ftra' +
              'pngle|ftrapngl|ftrapnle|ftrapnlt|ftrapnge|ftrapngt|ftrapsne|ftra' +
              'pst)(\.[wl])?\b'
            
              '\b(mov3q|movclr|movec|moveq|wdebug|pea|bitrev|byterev|divsl|divu' +
              'l|exg|pvalid|rems|extb|remu|sats|ff1|lea)(\.[l])?\b'
            
              '\b(move16|unlk|unpk|nop|reset|pack|stop|bfchg|pflush|bfclr|pflus' +
              'ha|bfexts|pflushan|bfextu|pflushn|bfffo|pflushr|bfins|pflushs|bf' +
              'set|ploadr|bftst|ploadw|bgnd|plpar|plpaw|bkpt|callm|prestore|psa' +
              've|cinvl|cinvp|cinva|cpushl|cpushp|cpusha|ptestr|ptestw|pulse|rt' +
              'd|rte|rtm|rtr|rts|trap|trapv|fnop|frestore|fsave|halt|illegal|in' +
              'touch|jmp|jsr|linea|line_a|linef|line_f)\b'
            '\b(mvs|mvz)(\.[bw])?\b'
            
              '\b(nbcd|abcd|psbs|psbc|psls|pslc|psss|pssc|psas|psac|psws|pswc|p' +
              'sis|psic|psgs|psgc|pscs|pscc|sbcd|st|sf|shi|sls|scc|shs|scs|slo|' +
              'sne|seq|svc|svs|spl|smi|sge|slt|sgt|sle|tas|fsf|fseq|fsogt|fsoge' +
              '|fsolt|fsole|fsogl|fsor|fsun|fsueq|fsugt|fsuge|fsult|fsule|fsne|' +
              'fst|fssf|fsseq|fsgt|fsge|fslt|fsle|fsgl|fsgle|fsngle|fsngl|fsnle' +
              '|fsnlt|fsnge|fsngt|fssne|fsst)(\.[b])?\b'
            '\b(pmove)(\.[bwld])?\b'
            '\b(pmovefd)(\.[ld])?\b')
          CondType = tcStrictMask
          TokenTypes = 1
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'repeat'
      ConditionList = <
        item
          TagList.Strings = (
            'repeat')
          TokenTypes = 1
          IgnoreCase = True
        end>
      BlockEnd = 'repeat end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'REPEAT...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'repeat end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'until(\.\w+)?')
          CondType = tcStrictMask
          TokenTypes = 1
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while'
      ConditionList = <
        item
          TagList.Strings = (
            'while')
          TokenTypes = 1
          IgnoreCase = True
        end>
      BlockEnd = 'while end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'WHILE...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endw')
          TokenTypes = 1
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if(\.\w+)?')
          CondType = tcStrictMask
          TokenTypes = 1
          IgnoreCase = True
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'IF...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endi')
          TokenTypes = 1
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '   * Comment'
    '; Comment'
    ''
    'START'
    '    lea     AMI6,a1     Load AMI6 into memory'
    '    move.w  #TOPL,d1      LX = 40'
    '    '
    '    WHILE <T> DO'
    '        '
    '        move.w  #$FF00,d1'
    
      '        trap    #15         Clear the screen and place cursor at' +
      ' 0,0'
    '        '
    '        REPEAT'
    '        '
    '            REPEAT'
    '        '
    '            move.l  a6,d1     set pen colour'
    '            trap    #15         draw rectangle'
    '            '
    '            UNTIL   d6 <EQ> #20 DO'
    '            '
    
      '            move.b  #23,d0       Wait a moment before drawing th' +
      'e next part'
    '            trap    #15'
    '            '
    '        UNTIL   d7 <EQ> #15 DO'
    '        '
    '    ENDW'
    '    '
    '    SIMHALT    '
    '    '
    'AMI6    dc.b    '#39'AWOM_1.wav'#39',0'
    'REDH    EQU     $000000FF'
    ''
    '            IF.w    d1   <GT>    #$01E0   THEN'
    
      '                move.w  #$0004,$000010FC    Initialize x-draw of' +
      ' the blip again'
    '            ENDI')
  TokenTypeNames.Strings = (
    'Id'
    'Comment'
    'Symbol'
    'String'
    'Number'
    'Label')
  Extentions = 'asm i s'
  LexerName = 'Assembly Motorola 68k'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = ';'
  Charset = DEFAULT_CHARSET
end
