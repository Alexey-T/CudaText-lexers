object SyntAnal9: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id class'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Annotation'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12498327
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Variable'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '///.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String """'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) ("""|'#39#39#39') .*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|") (\\\\|\\\1|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 6
      Expression = '\b(if|return)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id class'
      StyleName = 'Id class'
      TokenType = 2
      Expression = '#case sensitive'#13#10'(?-i)\b[A-Z]\w*[a-z]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Annotation'
      StyleName = 'Annotation'
      Expression = '@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 7
      Expression = '^\#!.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Variable'
      Expression = '\$\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^~!%]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'as'
            'assert'
            'async'
            'await'
            'break'
            'case'
            'catch'
            'class'
            'const'
            'continue'
            'default'
            'deferred'
            'do'
            'dynamic'
            'else'
            'enum'
            'export'
            'extends'
            'external'
            'factory'
            'false'
            'final'
            'finally'
            'for'
            'get'
            'hide'
            'if'
            'implements'
            'import'
            'in'
            'interface'
            'is'
            'library'
            'native'
            'new'
            'null'
            'of'
            'on'
            'operator'
            'part'
            'rethrow'
            'return'
            'set'
            'show'
            'static'
            'super'
            'switch'
            'this'
            'throw'
            'true'
            'try'
            'typedef'
            'var'
            'void'
            'while'
            'with'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'double'
            'dynamic'
            'int'
            'List'
            'Map'
            'num'
            'String'
            'var'
            'void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func full'
      ConditionList = <
        item
          CondType = tcMask
          TokenTypes = 4
        end>
      BlockEnd = 'func end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      GrammaRuleName = 'func'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func simple'
      Enabled = False
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '.')
          CondType = tcNotEqual
          TokenTypes = 8
        end>
      BlockEnd = 'func end'
      EndOfTextClose = True
      NameFmt = '%s-1~s[)]'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%s0~s[)]'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockName = 'func simple'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'import'
      Enabled = False
      ConditionList = <
        item
          TagList.Strings = (
            'import')
          TokenTypes = 4
        end>
      NameFmt = '%sz-1'
      GroupFmt = 'Imports'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 7
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      SelfClose = True
      TreeItemImage = 1
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'import '#39'dart:html'#39';'
    'main() {}'
    ''
    '#!Preproc'
    '@Test'
    'TestName func($var) {}'
    ''
    '  //not tree item'
    '  if (query.contains('#39'?'#39')) {'
    '    module.type(ServerController);'
    '  }'
    ''
    '  void restoreEntry(String id, '
    '    void callback(FileEntry fileEntry)) {'
    '    void __proxy_callback(fileEntry) {'
    '      if (callback != null) {'
    '        callback(fileEntry);'
    '      }'
    '    }'
    '  }'
    ''
    '  void set accepts(List<FilesystemAcceptOption> accepts) {'
    '  }'
    ''
    '  void addRules(String eventName, List<Rule> rules,'
    '                [void callback(List<Rule> rules)]) {'
    '                }'
    ''
    '  void getRules(String eventName, [List<String> ruleIdentifiers,'
    
      '                                   void callback(List<Rule> rule' +
      's)]) {'
    '                                   }')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Id keyword'
    'Preprocessor')
  Gramma.Gramma = 
    'IdComplex = <Identifier> | IdComplex '#39'.'#39' <Identifier>;'#13#10'Id = <Id' +
    'entifier> | ('#39'<'#39' <Identifier> '#39'>'#39') | (<Identifier> '#39'.'#39' <Identifi' +
    'er>); '#13#10'Param = Id+ ('#39'('#39' Id+ '#39')'#39')?;'#13#10'ParamList = (Param '#39','#39')* Pa' +
    'ram;'#13#10'Params = ParamList ('#39','#39' '#39'['#39' ParamList '#39']'#39')?;'#13#10'Func = Id '#39'(' +
    #39' '#39'{'#39'? Params? '#39'}'#39'? '#39')'#39' ('#39'{'#39' | '#39'='#39' '#39'>'#39' | '#39':'#39');'#13#10
  Extentions = 'dart'
  LexerName = 'Dart'
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
