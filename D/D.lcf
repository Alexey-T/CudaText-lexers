object SyntAnal7: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id class'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 16711808
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Attrib'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\.|.)*?("|$) [cwd]?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String raw'
      StyleName = 'String'
      TokenType = 4
      Expression = '[rx]".*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String tick'
      StyleName = 'String'
      TokenType = 4
      Expression = '`.*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id not-function'
      StyleName = 'Id'
      TokenType = 10
      Expression = 
        '#needed to not catch by tree'#13#10'\b (if | for | while | catch | for' +
        'each | struct | template | function) \b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id class'
      StyleName = 'Id class'
      TokenType = 2
      Expression = '(?-i)[A-Z]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '(?-i) ( '#13#10'\. [\d_]+ [eE] [\+\-]? [\d_]+ |'#13#10'[\d_]+ (\. [\d_]+)? [' +
        'eE] [\+\-]? [\d_]+ |'#13#10'0x [\da-fA-F_]+ (\. [\da-fA-F_]+)? [pP] [\' +
        '+\-]? [\da-fA-F_]+ |'#13#10'[\d_]* \. [\d_]+ '#13#10') '#13#10'[fFL]? i?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\h_]*\.[\h_]+p[\-\+]?[\d_]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f_]+\b |'#13#10'0b[01_]+f?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(?-i) \d[\d_]* (Lu|LU|uL|UL|L|u|U|f)? \b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\+.*?(\+/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment shebang'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\A \#! .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Attrib'
      StyleName = 'Attrib'
      TokenType = 9
      Expression = '@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^~\.%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[,;@\?!\$]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol :'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = ':'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol []'
      StyleName = 'Symbol'
      TokenType = 11
      Expression = '[\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'alias'
            'align'
            'asm'
            'assert'
            'auto'
            'body'
            'break'
            'case'
            'cast'
            'catch'
            'class'
            'const'
            'continue'
            'debug'
            'default'
            'delegate'
            'delete'
            'deprecated'
            'do'
            'else'
            'enum'
            'export'
            'extern'
            'false'
            'final'
            'finally'
            'for'
            'foreach'
            'foreach_reverse'
            'function'
            'goto'
            'if'
            'immutable'
            'import'
            'in'
            'inout'
            'interface'
            'invariant'
            'is'
            'lazy'
            'macro'
            'mixin'
            'module'
            'new'
            'nothrow'
            'null'
            'out'
            'override'
            'package'
            'pragma'
            'private'
            'protected'
            'public'
            'pure'
            'ref'
            'return'
            'scope'
            'shared'
            'sizeof'
            'static'
            'struct'
            'super'
            'switch'
            'synchronized'
            'template'
            'this'
            'throw'
            'true'
            'try'
            'typedef'
            'typeid'
            'typeof'
            'union'
            'unittest'
            'version'
            'void'
            'volatile'
            'while'
            'with')
          TokenTypes = 1028
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'byte'
            'cdouble'
            'cent'
            'cfloat'
            'char'
            'creal'
            'dchar'
            'double'
            'dstring'
            'float'
            'idouble'
            'ifloat'
            'int'
            'ireal'
            'long'
            'nan'
            'ptrdiff_t'
            'real'
            'short'
            'size_t'
            'string'
            'ubyte'
            'ucent'
            'uint'
            'ulong'
            'ushort'
            'wchar'
            'wstring')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__DATE__'
            '__EOF__'
            '__FILE__'
            '__FUNCTION__'
            '__gshared'
            '__LINE__'
            '__MODULE__'
            '__parameters'
            '__PRETTY_FUNCTION__'
            '__TIME__'
            '__TIMESTAMP__'
            '__traits'
            '__vector'
            '__VENDOR__'
            '__VERSION__'
            'length'
            'printf')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 70
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'class %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0'
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func_class'
      BlockName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 518
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2110
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 256
        end
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2050
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1~s[(]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func_simple'
      BlockName = 'class'
      NotParent = True
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 518
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2110
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 256
        end
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2050
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1~s[(]1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CancelNextRules = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 128
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'enum'
      ConditionList = <
        item
          TagList.Strings = (
            'enum'
            'struct')
          TokenTypes = 1028
        end>
      NameFmt = '%sz0'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 4
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#!if the line number is 1'
    '//Comment'
    ''
    'Class + notClass + __FILE__;'
    '10LU + 0xFF_A0_A0 + "\\a\\" + r"\a\" + 0.10 + `\a\`;'
    '1.12e-20F + 6.3i + 6.3fi + 6.3Li + .123f + .123F'
    '0x1.FFFFp1023 + 0x1p-52 '
    ''
    'void thread1(int a)'
    '{'
    '    int mio(int a) {'
    '        return 0;'
    '    }'
    '    writeln("T1: ", str);'
    '}'
    ''
    'string[] func(immutable string[] argv)'
    '{'
    '    if (!parse(argv)) {'
    '    }'
    '}'
    ''
    'class MyClass {'
    '    private bool isValid = false;'
    '    public static ulong fib(in ulong n) @safe {'
    '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
    '    }'
    '    public static ulong fib2(in ulong n) @safe {'
    '    }'
    '}'
    '      '
    '@safe nothrow pure ulong fib_ok(ulong n)'
    '{'
    '    return n < 2 ? n : fib_ok(n - 1) + fib_ok(n - 2);'
    '}'
    ''
    '@safe nothrow ulong fib_bad(ulong n) pure'
    '{'
    '    return n < 2 ? n : fib_bad(n - 1) + fib_bad(n - 2);'
    '}'
    ' '
    'int main()'
    '{  '
    '  int i, count;'
    '  printf("10 iterations\n");'
    '  for (iter = 1; iter <= 10; iter++)'
    '  {'#9
    '    count = 0;'
    '    flags[] = 1;'
    '    for (i = 0; i < flags.length; i++)'
    '    {   '
    '      if (flags[i])'
    '      {'
    '        prime = i + i + 3;'
    '        k = i + prime;'
    '      }'
    '    }'
    '  }'
    '  printf("\n%d primes", count);'
    '  return 0;'
    '}'
    ''
    'enum Name {'
    '}'
    ''
    'class Test2 : Test1 {'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol :'
    'Symbol {}'
    'Symbol ()'
    'Attrib'
    'Id not-func'
    'Symbol []')
  Extentions = 'd di'
  LexerName = 'D'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Doc about tokens: http://dlang.org/lex.html#IntegerLiteral')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
  Left = 140
  Top = 160
end
