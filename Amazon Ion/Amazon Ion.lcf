object SyntAnal1: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol bad'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BorderTypeBottom = blSolid
      BorderColorBottom = clRed
    end
    item
      DisplayName = 'String blob'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String clob'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Timestamp'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Annotation'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment block'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String '#39#39#39
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)'#39#39#39'.*?'#39#39#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(["'#39'])(\\.|.)*?\1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Timestamp'
      StyleName = 'Timestamp'
      TokenType = 8
      Expression = 
        '(\d{4}\-\d{2}\-\d{2}              # full date'#13#10'T(\d{2}:\d{2})(:\' +
        'd{2}(\.\d+)?)? # time with optional seconds and fractional secon' +
        'ds'#13#10'(Z|[\+\-]\d{2}:\d{2})?         # timezone'#13#10')'#13#10'|'#13#10'(\d{4}(T|\-' +
        '\d{2}(T|\-\d{2}T?)))'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id annotation'
      StyleName = 'Annotation'
      TokenType = 10
      Expression = '[a-z_]\w*\x20*::'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '\b[a-z_][\w\$]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id$'
      StyleName = 'Id std'
      TokenType = 2
      Expression = '\$[\w\$]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b0x\h[_\h]*\b | \b0b[01][01_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]*(\.\d[\d_]*)([ed][\+\-]?\d[\d_]*)?\b |'#13#10'\d[\d_]*(\.\d[\d' +
        '_]*)?([ed][\+\-]?\d[\d_]*)\b |'#13#10'\d[\d_]*\.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b0\b | \b[1-9]([\d_]*\h)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '::|[\[\]\(\)\+\-:,\.]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Data clob'
      StyleName = 'String clob'
      TokenType = 9
      Expression = '\{\{\x20*".*?"\x20*\}\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Data blob'
      StyleName = 'String blob'
      TokenType = 7
      Expression = '\{\{.+?\}\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol bad'
      StyleName = 'Symbol bad'
      Expression = '.'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id std'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'blob'
            'bool'
            'clob'
            'decimal'
            'false'
            'float'
            'inf'
            'int'
            'list'
            'null'
            'sexp'
            'string'
            'struct'
            'symbol'
            'timestamp'
            'true')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'dict key {'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 52
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      NameFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%s0: { ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'dict key ['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 52
        end>
      BlockEnd = ']'
      EndOfTextClose = True
      NameFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%s0: [ ... ]'
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = ']'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '[ ... ]'
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/* comment */ '
    '{'
    '  key: "value",   // comment'
    '  nums: 1_000_000, '
    '  '#39'A float value'#39': -1.2e-3,  '
    '  "An int value": null.int,'
    '  annotated: age::2000-00-00T'
    '  lists : '#39'hw grades'#39'::[80, 90, 90], '
    '  many_annot: I::have::many::annotations::true,'
    '  sexp: (this (is a [valid] "Ion") last::value 20)  '
    '  blob_value: {{DDDDDDDDDDDDD=}},'
    '  clob_value: {{"ab"}}'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'String blob'
    'Timestamp'
    'String clob'
    'Annotation')
  Extentions = 'ion'
  LexerName = 'Amazon Ion'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Docs: https://amzn.github.io/ion-docs/docs/spec.html')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
