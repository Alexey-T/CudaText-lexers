object SyntAnal28: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id keyword func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = '^Tree item'
      StyleName = 'Id keyword func'
      TokenType = 11
      Expression = '(?<=^[\x20\x09]*)((static\x20)?func)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^Keyword'
      StyleName = 'Id keyword'
      TokenType = 10
      Expression = '(?<=^[\x20\x09]*)(if|else|elif|for|while|switch|case|match)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^Number'
      StyleName = 'Number'
      TokenType = 9
      Expression = '(?<=^[\x20\x09]*) \d(_?\d)* (\.(_?\d)*)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)(?<=^[\x20\x09]*) ("""|'#39#39#39') .*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^Id'
      StyleName = 'Id'
      TokenType = 9
      Expression = '(?<=^[\x20\x09]*)\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^Attrib'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '(?<=^[\x20\x09]*)@'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '^Comment'
      Enabled = False
      StyleName = 'Comment'
      TokenType = 13
      Expression = '(?<=^[\x20\x09]*) \#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String """'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) ("""|'#39#39#39') .*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\.|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\b 0x(_?[0-9a-f])+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int octal'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\b 0o(_?[0-7])+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int bin'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\b 0b(_?[01])+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b \d(_?\d)* (\.(_?\d)*)? (e[\-\+]?\d+)? |'#13#10'\.(_?\d)+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol :'
      StyleName = 'Symbol'
      TokenType = 12
      Expression = ':'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;=<>\+\-\^@!%\\\|~&]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords def'
      StyleName = 'Id keyword func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'func')
          TokenTypes = 1540
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'assert'
            'break'
            'breakpoint'
            'case'
            'class'
            'const'
            'continue'
            'do'
            'elif'
            'else'
            'enum'
            'export'
            'extends'
            'for'
            'func'
            'if'
            'INF'
            'is'
            'master'
            'match'
            'NAN'
            'onready'
            'pass'
            'PI'
            'preload'
            'remote'
            'return'
            'self'
            'setget'
            'signal'
            'slave'
            'static'
            'switch'
            'sync'
            'TAU'
            'tool'
            'var'
            'while'
            'yield')
          TokenTypes = 516
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'float'
            'int'
            'null')
          TokenTypes = 516
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 8192
        end>
      BlockEnd = 'Block comment end'
      EndOfTextClose = True
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 8192
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block for tree'
      ConditionList = <
        item
          TagList.Strings = (
            ':')
          TokenTypes = 4096
        end
        item
          CondType = tcSkip
          TokenTypes = 510
        end
        item
          TokenTypes = 2048
        end>
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      GroupIndex = 20
      CollapseFmt = '%s0 %s-1...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block begin'
      ConditionList = <
        item
          TagList.Strings = (
            ':')
          TokenTypes = 4096
        end
        item
          CondType = tcSkip
          TokenTypes = 510
        end
        item
          TokenTypes = 1024
        end>
      EndOfTextClose = True
      DisplayInTree = False
      NameFmt = '"%s0"'
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      GroupIndex = 20
      CollapseFmt = '%sz0 ...'
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'var _terrain = null'
    'var _cursor = null'
    'onready var _head = get_parent().get_node("Camera")'
    ''
    'static func sum2(a, b):'
    '    return a + b'
    '    '
    'func _ready():'
    #9'if terrain_path == null:'
    #9#9'_terrain = get_parent().get_node(get_parent().terrain)'
    #9#9'terrain_path = _terrain.get_path() # For correctness'
    #9'else:'
    #9#9'_terrain = get_node(terrain_path)'
    #9'_cursor = _make_cursor()'
    #9'_terrain.add_child(_cursor)'
    ''
    'func get_pointed_voxel():'
    #9'var origin = _head.get_global_transform().origin'
    #9'var forward = -_head.get_transform().basis.z.normalized()'
    #9'var hit = _terrain.raycast(origin, forward, 10)'
    #9'return hit')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    '^ word'
    '^keyword'
    '^word tree'
    'Symbol :'
    '^comment')
  Extentions = 'gd'
  LexerName = 'GDScript'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
