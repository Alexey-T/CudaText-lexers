object SyntAnal31: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id asm'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 6452810
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment doc 1'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)/\*\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc 2'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '///.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39').*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]*\.?[\d_]* e[\+\-]? [\d_]+ \b |'#13#10'\d[\d_]*\.[\d_]* \b |'#13#10'\' +
        '.[\d_]+ e[\+\-]? [\d_]+ \b |'#13#10'\.[\d_]+ \b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\],;]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\$\.!%:~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'addmod'
            'alias'
            'apply'
            'as'
            'assembly'
            'assert'
            'auto'
            'break'
            'case'
            'constructor'
            'continue'
            'contract'
            'copyof'
            'default'
            'define'
            'delegatecall'
            'delete'
            'do'
            'ecrecover'
            'else'
            'emit'
            'enum'
            'event'
            'experimental'
            'false'
            'for'
            'from'
            'function'
            'if'
            'immutable'
            'implements'
            'import'
            'interface'
            'is'
            'keccak256'
            'length'
            'let'
            'library'
            'macro'
            'mapping'
            'modifier'
            'mulmod'
            'mutable'
            'new'
            'now'
            'null'
            'override'
            'partial'
            'pragma'
            'promise'
            'reference'
            'require'
            'return'
            'returns'
            'revert'
            'ripemd160'
            'sealed'
            'selector'
            'self'
            'selfdestruct'
            'sha256'
            'sizeof'
            'solidity'
            'struct'
            'super'
            'supports'
            'switch'
            'this'
            'timestamp'
            'true'
            'typedef'
            'unchecked'
            'using'
            'var'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            
              '\b(address\s*payable|address|string|bytes?\d*|int\d*|uint\d*|boo' +
              'l|u?fixed\d+x\d+)\b')
          CondType = tcStrictMask
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id std'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            
              '\b(block\.coinbase|block\.difficulty|block\.gaslimit|block\.numb' +
              'er|block\.timestamp|msg\.data|msg\.sender|msg\.sig|msg\.value|ms' +
              'g\.gas|tx\.gasprice|tx\.origin)\b'
            
              '\b(blockhash|gasleft|abi\.decode|abi\.encode|abi\.encodePacked|a' +
              'bi\.encodeWithSelector|abi\.encodeWithSignature)\b')
          CondType = tcStrictMask
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id modifiers'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'calldata'
            'constant'
            'external'
            'indexed'
            'internal'
            'memory'
            'payable'
            'private'
            'public'
            'pure'
            'storage'
            'view')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id units'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'days'
            'ether'
            'finney'
            'hours'
            'minutes'
            'seconds'
            'szabo'
            'weeks'
            'wei'
            'years')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id asm'
      StyleName = 'Id asm'
      BlockName = 'Assembly'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'add'
            'addmod'
            'address'
            'and'
            'balance'
            'blockhash'
            'byte'
            'call'
            'callcode'
            'calldatacopy'
            'calldataload'
            'calldatasize'
            'caller'
            'callvalue'
            'codecopy'
            'codesize'
            'coinbase'
            'create'
            'delegatecall'
            'difficulty'
            'div'
            'dup1'
            'dup16'
            'dup2'
            'eq'
            'exp'
            'extcodecopy'
            'extcodesize'
            'gas'
            'gaslimit'
            'gasprice'
            'gt'
            'iszero'
            'jump'
            'jumpdest'
            'jumpi'
            'log0'
            'log1'
            'log4'
            'lt'
            'mload'
            'mod'
            'msize'
            'mstore'
            'mstore8'
            'mul'
            'mulmod'
            'not'
            'number'
            'or'
            'origin'
            'pc'
            'pop'
            'push1'
            'push2'
            'push32'
            'returndatacopy'
            'returndatasize'
            'revert'
            'sdiv'
            'sgt'
            'sha3'
            'signextend'
            'sload'
            'slt'
            'smod'
            'sstore'
            'staticcall'
            'stop'
            'sub'
            'suicide'
            'swap1'
            'swap16'
            'swap2'
            'timestamp'
            'xor')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Assembly'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          TagList.Strings = (
            'assembly')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      DisplayInTree = False
      NameFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%s0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Tree items'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            'constructor'
            'contract'
            'enum'
            'function'
            'library'
            'modifier'
            'struct')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s0 %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%s0 %s-1 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      BlockEnd = '{'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      Enabled = False
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      EndOfTextClose = True
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      Enabled = False
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '// Comment'
    '/// Comment doc'
    'contract test {'
    '    struct str {'
    '        mapping(uint=>uint) map;'
    '    }'
    '    function fun() public {'
    '        str storage a = 20 + 1.2e-4 + 0xFE ether;'
    '        data = '#39'test'#39' + "test";'
    '    }'
    '    function f() public pure {'
    
      '        (bool a,) = address(this).call(abi.encode(address(this).' +
      'delegatecall, super));'
    '        assembly {'
    '           b0 := byte(0, mload(start))'
    '        }'
    '    }'
    '}'
    '// ----')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}')
  Extentions = 'sol'
  LexerName = 'Solidity'
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
