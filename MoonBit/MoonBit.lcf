object SyntAnal14: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String binary'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol { }'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '==|!=|=|\|>|=>|\->|\.\.[\.<=]?|:+|'#13#10'[\[\],\.;\\\?]|'#13#10'[\-\+<>\|\&' +
        ']{2}=?|'#13#10'[\+\-\*/&\|\\!<>%]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = 'b?(["'#39'])(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w!]*~?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String binary'
      StyleName = 'String binary'
      TokenType = 8
      Expression = '[\#\$]\|.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '0x[\h_]* (\.[\h_]*)? p[\+\-]? \h[\h_]* [ul]*|'#13#10'0x\h[\h_]*\.\h[\h' +
        '_]* [ul]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\h_]+[uln]*|'#13#10'0o[0-7_]+[ul]*|'#13#10'0b[01_]+[ul]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]* (\.[\d_]*)? e[\+\-]? [\d_]+|'#13#10'\d[\d_]* \. (\d[\d_]*)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]* [uln]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 9
      Expression = '@[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'all'
            'as'
            'asr'
            'async'
            'break'
            'catch'
            'catch!'
            'continue'
            'derive'
            'else'
            'enum'
            'extern'
            'fn'
            'for'
            'guard'
            'if'
            'impl'
            'in'
            'init'
            'let'
            'loop'
            'lsl'
            'lsr'
            'match'
            'not'
            'op_add'
            'op_div'
            'op_mod'
            'op_mul'
            'op_sub'
            'open'
            'raise'
            'readonly'
            'return'
            'self'
            'struct'
            'test'
            'trait'
            'try'
            'type'
            'type!'
            'typealias'
            'while'
            'with')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Array'
            'Bool'
            'Byte'
            'Compare'
            'Cons'
            'Default'
            'Double'
            'Eq'
            'false'
            'FixedArray'
            'Float'
            'FromJson'
            'Hash'
            'Int'
            'Int64'
            'Nil'
            'None'
            'Option'
            'Result'
            'Self'
            'Show'
            'Some'
            'String'
            'ToJson'
            'true'
            'UInt'
            'UInt64'
            'Unit')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id modifier'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'const'
            'mut'
            'priv'
            'pub')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func id::id'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '::')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'fn')
          TokenTypes = 4
        end>
      NameFmt = '%s-3'
      GroupFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func id'
      ConditionList = <
        item
          TagList.Strings = (
            '::')
          CondType = tcNotEqual
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'fn')
          TokenTypes = 4
        end>
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Type'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'type'
            'type!')
          TokenTypes = 4
        end>
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 6
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Enum/Struct'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'enum'
            'struct')
          TokenTypes = 4
        end>
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      TreeItemImage = 3
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Test'
    'type! ParseError String'
    ''
    'fn next(self : Tokens, loc~ : SourceLoc = _) -> Unit {'
    '  self.current = self.current + 1.2e-3'
    '  if self.current > self.tokens.length() {'
    '    abort("Tokens::next(): \{loc}")'
    '  }'
    '}'
    ''
    'priv type JsArray'
    ''
    'fn JsArray::new() -> JsArray = "array" "new"')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()'
    'String binary'
    'Var')
  Extentions = 'mbt'
  LexerName = 'MoonBit'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
