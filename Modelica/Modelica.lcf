object SyntAnal9: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) " (\\"|.)*? ("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String Id'
      StyleName = 'String Id'
      TokenType = 7
      Expression = #39' (\\'#39'|.)*? ('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      Enabled = False
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+ |'#13#10'0b[01]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+L?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'algorithm'
            'and'
            'annotation'
            'assert'
            'block'
            'break'
            'class'
            'connect'
            'connector'
            'constant'
            'constrainedby'
            'der'
            'discrete'
            'each'
            'else'
            'elseif'
            'elsewhen'
            'encapsulated'
            'end'
            'enumeration'
            'equation'
            'expandable'
            'extends'
            'external'
            'false'
            'final'
            'flow'
            'for'
            'function'
            'if'
            'import'
            'in'
            'initial'
            'inner'
            'input'
            'loop'
            'model'
            'not'
            'operator'
            'or'
            'outer'
            'output'
            'package'
            'parameter'
            'partial'
            'protected'
            'public'
            'record'
            'redeclare'
            'replaceable'
            'return'
            'stream'
            'then'
            'true'
            'type'
            'when'
            'while'
            'within')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Types'
      StyleName = 'Type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Boolean'
            'Complex'
            'Integer'
            'Real'
            'String')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      ConditionList = <
        item
          TokenTypes = 132
        end
        item
          TagList.Strings = (
            'block'
            'class'
            'connector'
            'function'
            'model'
            'package'
            'record'
            'type')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = 1
      BlockEnd = 'end'
      NameFmt = '%s1 %s0'
      HighlightPos = cpAny
      IgnoreAsParent = False
      AutoCloseMode = acmCloseOpened
      AutoCloseText = 'end %s0;'
    end
    item
      DisplayName = 'end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 132
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      SameIdent = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end for'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for'
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
        end>
      BlockEnd = 'end for'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end if'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'end if'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end when'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'when')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'when'
      ConditionList = <
        item
          TagList.Strings = (
            'when')
          TokenTypes = 4
        end>
      BlockEnd = 'end when'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end while'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'while')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while'
      ConditionList = <
        item
          TagList.Strings = (
            'while')
          TokenTypes = 4
        end>
      BlockEnd = 'end while'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '// comment '
    '/* comment */ '
    ''
    #39'12H'#39', '#39'13\'#39'H'#39
    '10.5, 1.2E-10, 13., 13E0, 1.3e1, 0.13E2 '
    '"\tThis is\" between\" us\n" '
    ''
    'package Test;'
    'package One;'
    '  constant Real e=Modelica.Math.exp(1.0);'
    '  constant Real pi=2*Modelica.Math.asin(1.0);'
    'end One;'
    ''
    'block TT;'
    '  for i in 1:nIn loop'
    '  end for;'
    'end TT;'
    'end Test;')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'String id')
  Extentions = 'mo mos'
  LexerName = 'Modelica'
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Ref:'
    'https://modelica.org - "Modelica Language Specification"')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
