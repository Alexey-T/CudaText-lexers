object SyntAnal14: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id argument'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id prop'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id has args'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id argument'
      StyleName = 'Id argument'
      TokenType = 2
      Expression = '(?<=\()\w+(?=\:)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id prop'
      StyleName = 'Id prop'
      TokenType = 2
      Expression = '\b\w+(?=\:)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id has args'
      StyleName = 'Id has args'
      TokenType = 2
      Expression = '\b\w+(?=\()'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^\.,;!%~\^\?\{\}\[\]\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'else'
            'enum'
            'fragment'
            'function'
            'if'
            'implements'
            'input'
            'interface'
            'on'
            'return'
            'scalar'
            'schema'
            'type'
            'union'
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id std types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Boolean'
            'Float'
            'ID'
            'Int'
            'String')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '{...}'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      BlockEnd = '{'
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'tree item'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'enum'
            'fragment'
            'function'
            'interface'
            'scalar'
            'schema'
            'type'
            'union')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Comment'
    'type User {'
    '  num: 10.2'
    '  id: ID'
    '  name: String'
    '}'
    ''
    'function Query_me(request) {'
    '  return request.auth.user;'
    '}'
    ''
    'function User_name(user) {'
    '  return user.getName();'
    '}'
    ''
    '{'
    '  "me": {'
    '    "name": "Luke Skywalker"'
    '  }'
    '}'
    ''
    '{'
    '  human(id: "1000") {'
    '    name'
    '    height(unit: FOOT)'
    '  }'
    '}'
    ''
    '{'
    '  empireHero: hero(episode: EMPIRE) {'
    '    name'
    '  }'
    '  jediHero: hero(episode: JEDI) {'
    '    name'
    '  }'
    '}'
    ''
    '{'
    '  leftComparison: hero(episode: EMPIRE) {'
    '    ...comparisonFields'
    '  }'
    '  rightComparison: hero(episode: JEDI) {'
    '    ...comparisonFields'
    '  }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'graphql gql'
  LexerName = 'GraphQL'
  Notes.Strings = (
    'Alexey (SynWrite)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
