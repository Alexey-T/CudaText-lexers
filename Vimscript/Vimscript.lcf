object SyntAnal27: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^[\x20\x09]* " .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!%;:\.\[\]\(\)\{\}@\#~`\\]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'aug'
            'augroup'
            'call'
            'catch'
            'class'
            'def'
            'do'
            'echo'
            'else'
            'elseif'
            'end'
            'endclass'
            'enddef'
            'endf'
            'endfor'
            'endfunction'
            'endif'
            'endtry'
            'endwhile'
            'exec'
            'final'
            'for'
            'fu'
            'function'
            'if'
            'in'
            'let'
            'public'
            'return'
            'static'
            'try'
            'var'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'if-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'if...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'func-end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endfunction')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'try'
      ConditionList = <
        item
          TagList.Strings = (
            'try')
          TokenTypes = 4
        end>
      BlockEnd = 'try-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'try...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'try-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endtry')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'def'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'def')
          TokenTypes = 4
        end>
      BlockEnd = 'def-end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'def-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'enddef')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = 'class-end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endclass')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      TreeItemImage = 1
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '" FUNCTION: NERDTreeCopyNode() {{{1'
    'function! NERDTreeCopyNode()'
    '    let currentNode = g:NERDTreeFileNode.GetSelected()'
    '    let newNodePath = input("Copy the current node\n" .'
    
      '                          \ "===================================' +
      '=======================\n" .'
    
      '                          \ "Enter the new path to copy the node' +
      ' to:                   \n" .'
    '                          \ "", currentNode.path.str(), "file")'
    ''
    '    if newNodePath != ""'
    '        "strip trailing slash'
    '        let newNodePath = substitute(newNodePath, '#39'\/$'#39', '#39#39', '#39#39')'
    ''
    '        let confirmed = 1'
    '        if currentNode.path.copyingWillOverwrite(newNodePath)'
    
      '            call nerdtree#echo("Warning: copying may overwrite f' +
      'iles! Continue? (yN)")'
    '            let choice = nr2char(getchar())'
    '            let confirmed = choice ==# '#39'y'#39
    '        endif'
    ''
    '        if confirmed'
    '            try'
    '                let newNode = currentNode.copy(newNodePath)'
    '                if empty(newNode)'
    '                    call b:NERDTree.root.refresh()'
    '                    call b:NERDTree.render()'
    '                else'
    '                    call NERDTreeRender()'
    '                    call newNode.putCursorHere(0, 0)'
    '                endif'
    '            catch /^NERDTree/'
    '                call nerdtree#echoWarning("Could not copy node")'
    '            endtry'
    '        endif'
    '    else'
    '        call nerdtree#echo("Copy aborted.")'
    '    endif'
    '    redraw'
    'endfunction'
    ''
    '" FUNCTION: NERDTreeRevealInFinder() {{{1'
    'function! NERDTreeRevealInFinder()'
    '    let treenode = g:NERDTreeFileNode.GetSelected()'
    '    if treenode != {}'
    '        call system("open -R '#39'" . treenode.path.str() . "'#39'")'
    '    endif'
    'endfunction'
    ''
    'class OtherThing'
    
      #9'static var _sum: number'
    #9'public static var result: number'
    #9'def Bar(): number'
    #9'  return this._Foo()'
    #9'enddef'
    'endclass')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'vim'
  LexerName = 'Vimscript'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  Charset = DEFAULT_CHARSET
end
