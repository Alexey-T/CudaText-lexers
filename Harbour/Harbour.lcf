object SyntAnal63: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id Keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id Logical'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id brackets'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'C'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clCream
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39')(\\\1|\\\\|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Func begin'
      StyleName = 'Id Keyword'
      TokenType = 7
      Expression = 
        '\b(static\s+)? \b(function|func|procedure|proc|method \s+ proced' +
        'ure|method|meth)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id const'
      StyleName = 'Id Logical'
      TokenType = 2
      Expression = '\.[TF]\.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id brackets'
      StyleName = 'Id brackets'
      TokenType = 2
      Expression = '\<[\w"]+\>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
        'hout exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(0d)?\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Shebang'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^\#!.+$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment /**/'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment //'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment &&'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '&&.*$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment *'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^\*.*$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:\$@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\\\?%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id Keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'announce'
            'array'
            'as'
            'begin'
            'break'
            'case'
            'class'
            'continue'
            'create'
            'declare'
            'define'
            'do'
            'dynamic'
            'else'
            'elseif'
            'end'
            'endcase'
            'endclass'
            'enddo'
            'endif'
            'endsequenc'
            'endswitch'
            'endtext'
            'exit'
            'exported'
            'external'
            'field'
            'for'
            'func'
            'function'
            'hidden'
            'if'
            'in'
            'init'
            'inline'
            'len'
            'list'
            'local'
            'logical'
            'memvar'
            'meth'
            'method'
            'next'
            'nil'
            'note'
            'numeric'
            'on'
            'or'
            'otherwise'
            'parameters'
            'private'
            'proc'
            'procedure'
            'protected'
            'public'
            'recover'
            'release'
            'request'
            'return'
            'save'
            'self'
            'sequence'
            'set'
            'static'
            'step'
            'string'
            'switch'
            'text'
            'then'
            'to'
            'using'
            'var'
            'virtual'
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TokenTypes = 128
          IgnoreCase = True
        end>
      BlockEnd = 'func end'
      EndOfTextClose = True
      NameFmt = 'func %sz-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = 'func %sz-1'
      SelfClose = True
      GrammaRuleName = 'Func'
      IgnoreAsParent = True
      AutoCloseText = '}'#13#10
    end
    item
      DisplayName = 'func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'create')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = ']'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do'
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'do end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'enddo')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for'
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'for end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'next')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'switch'
      ConditionList = <
        item
          TagList.Strings = (
            'switch')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'switch end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'switch end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endswitch')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'create')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'class end'
      NameFmt = 'class %s-1'
      HighlightPos = cpAny
      CollapseFmt = 'class %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endclass')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'text'
      ConditionList = <
        item
          TagList.Strings = (
            'to')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'text')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'text end'
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'text end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endtext')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'case'
      ConditionList = <
        item
          TagList.Strings = (
            'case')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'case end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'case end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endcase')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'seq'
      ConditionList = <
        item
          TagList.Strings = (
            'sequence')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'begin')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'seq end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'seq end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'sequence')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'C'
      StyleName = 'C'
      StartExpression = '\#pragma \s+ begindump'
      EndExpression = '\#pragma \s+ enddump'
      SyntAnalyzer = SyntAnal55
      IncludeBounds = True
    end>
  SampleText.Strings = (
    '/* Comment */'
    '#if 0'
    '  Nil: NIL; String: "hello", '#39'hello'#39
    '  Date: 0d20100405; Logical: .T., .F.'
    '#endif  '
    ''
    'FUNCTION Ending( cFile )'
    '   LOCAL cLine'
    '   FOR EACH cLine IN hb_ATokens( )'
    '      IF Right( cLine, 100.00 ) == "www"'
    '         RETURN .T.'
    '      ENDIF'
    '   NEXT'
    '   RETURN .F.'
    ''
    'CREATE CLASS RemObject'
    ''
    'STATIC FUNCTION RemEnding( cFile, nErr )'
    '   SWITCH nErr'
    '   CASE BLAT_SUCCESS'
    '      RETURN BLAT_TEXT_SUCCESS'
    '   OTHERWISE'
    '      RETURN BLAT_TEXT_ERR_UNKNOWN'
    '   ENDSWITCH'
    '       '
    'ENDCLASS   ')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    'FuncId')
  Extentions = 'hb hbx prg'
  LexerName = 'Harbour'
  Notes.Strings = (
    'Author: Alexey (SynWrite)'
    ''
    'Note: check "Sub lexers" tab in "Lexer properties" dialog,'
    'make sure lexer links to "C" lexer. (Link to C is missing '
    'after importing this lexer first time).')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
