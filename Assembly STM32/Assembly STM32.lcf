object SyntAnal1: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id operators'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id special'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id registers'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      Expression = '^[a-z_]\w*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Binary'
      StyleName = 'Number'
      TokenType = 5
      Expression = '2_[01]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39').*?\1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '\'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '\\'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[<>]{1,2}| [\.,:\-\+\*/%@\(\)\[\]\{\}\?=\#&\|]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id special'
      StyleName = 'Id special'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align'
            'area'
            'data'
            'else'
            'end'
            'endif'
            'endp'
            'equ'
            'export'
            'heap'
            'if'
            'import'
            'noinit'
            'preserve8'
            'proc'
            'readonly'
            'readwrite'
            'reset'
            'space'
            'stack'
            'thumb')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id opcodes'
      StyleName = 'Id operators'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'b'
            'beq'
            'bic'
            'bl'
            'blx'
            'bne'
            'bx'
            'cmp'
            'dcb'
            'dcd'
            'eor'
            'get'
            'ldr'
            'lsrs'
            'msr'
            'orr'
            'pop'
            'push'
            'str'
            'subs'
            'tst')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id registers'
      StyleName = 'Id registers'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'lr'
            'pc'
            'r0'
            'r1'
            'r2'
            'r3'
            'r4'
            'r5'
            'r6'
            'r7'
            'r8')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc'
      ConditionList = <
        item
          TagList.Strings = (
            'proc')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          CondType = tcSkip
          TokenTypes = 128
        end
        item
          TokenTypes = 1
        end>
      BlockEnd = 'proc end'
      NameFmt = 'proc %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'proc %s0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endp')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'endif'
      DisplayInTree = False
      NameFmt = '%sz0'
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endif'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    
      ';***************************************************************' +
      '************************************'
    ';* F303RE Nucleo "blinky" example'
    #9#9#9'AREA    MAIN, CODE, READONLY'
    '__use_two_region_memory'
    #9#9#9'EXPORT __use_two_region_memory'
    ''
    ';;;--- Include library files -----------------------'
    #9#9#9'GET'#9#9'Cfg_GPIO.asm'
    #9#9#9'GET'#9#9'../Delay.asm'
    ';; System config.'
    'SystemInit'#9'PROC'
    
      #9#9#9'EXPORT'#9'SystemInit                      ; Export to startup sc' +
      'ript'
    #9#9#9#9'PUSH'#9'{LR}'
    #9#9#9#9'POP'#9#9'{PC}'
    #9#9#9'ENDP'
    ';;;-------------------------------------------------'
    ';; Main function'
    #9#9#9'ALIGN'
    '__main'#9#9'PROC'
    
      #9#9#9'EXPORT'#9'__main                          ; Export to startup sc' +
      'ript'
    'MAIN_LOOP                                           ; Main loop'
    #9#9#9#9'LDR'#9#9'R0, =100'
    #9#9#9#9'BL'#9#9'Delay'
    #9#9#9#9'; Toggle LED at PA5'
    #9#9#9#9'LDR'#9#9'R2, =GPIOA_ODR'
    #9#9#9#9'LDR'#9#9'R1, [R2]'
    #9#9#9#9'EOR'#9#9'R1, #GPIO_ODR_ODR5'
    #9#9#9#9'STR'#9#9'R1, [R2]'
    
      #9#9#9#9'B'#9#9'MAIN_LOOP                   ; Jump to start of the main l' +
      'oop'
    #9#9#9'ENDP'
    ';;;-------------------------------------------------'
    ';; end of file, aligned to 4 bytes'
    #9#9#9'ALIGN'
    #9#9#9'END')
  TokenTypeNames.Strings = (
    'Label'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Register'
    'Symbol \')
  Extentions = 'asm s'
  LexerName = 'Assembly STM32'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = ';'
  Charset = DEFAULT_CHARSET
end
