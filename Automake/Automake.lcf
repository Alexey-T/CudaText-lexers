object SyntAnal11: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Keywords'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Text'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Param'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Int'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Param'
      StyleName = 'Param'
      TokenType = 5
      Expression = '^\w+ (?=\s*=)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      Expression = '\$\( \S+? \)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?<![\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\$])\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 4
      Expression = '[\+\*\(\)\[\]\{\}\<>\,~!&\|;:=%\^\#\$\?\\@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      Expression = '("|'#39'|'#180'|`) (\\\1|.)*? \1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Text'
      StyleName = 'Text'
      TokenType = 2
      Expression = '\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      Enabled = False
      StyleName = 'Keywords'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ddd')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'treeitem'
      ConditionList = <
        item
          TokenTypes = 32
        end>
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'include $(top_srcdir)/Makefile.common'
    ''
    'NULL ='
    ''
    'AM_CPPFLAGS = \'
    #9'$(COVERAGE_CFLAGS) \'
    #9'-I$(top_srcdir)/gee \'
    #9'-I$(top_srcdir)/ccode \'
    #9'-I$(top_srcdir)/vala/$(var) \'
    #9'$(GLIB_CFLAGS) \'
    #9'$(NULL)'
    ''
    'BUILT_SOURCES = codegen.vala.stamp'
    ''
    'lib_LTLIBRARIES = \'
    #9'libvala@PACKAGE_SUFFIX@.la \'
    #9'$(NULL)'
    ''
    'libvala_la_VALASOURCES = \'
    #9'valatyperegisterfunction.vala \'
    #9'$(NULL)'
    ''
    'libvala@PACKAGE_SUFFIX@_la_SOURCES = \'
    #9'codegen.vala.stamp \'
    #9'$(libvala_la_VALASOURCES:.vala=.c) \'
    #9'$(NULL)'
    ''
    'codegenincludedir = $(includedir)/vala@PACKAGE_SUFFIX@'
    ''
    'codegeninclude_HEADERS = \'
    #9'valacodegen.h \'
    #9'$(NULL)'
    ''
    'codegen.vapi codegen.vala.stamp: $(libvala_la_VALASOURCES)'
    #9'$(VALA_V)$(VALAC) \'
    #9#9'$(COVERAGE_VALAFLAGS) \'
    #9#9'$(VALAFLAGS) \'
    #9#9'-C \'
    #9#9'--vapidir $(top_srcdir)/vapi --pkg gobject-2.0 \'
    #9#9'--vapidir $(top_srcdir)/gee --pkg gee \'
    #9#9'--vapidir $(top_srcdir)/ccode --pkg ccode \'
    #9#9'--vapidir $(top_srcdir)/vala --pkg vala \'
    #9#9'-H valacodegen.h \'
    #9#9'--library codegen \'
    #9#9'$^'
    #9'@touch $@'
    ''
    'libvala@PACKAGE_SUFFIX@_la_LDFLAGS = -no-undefined'
    ''
    'libvala@PACKAGE_SUFFIX@_la_LIBADD = \'
    #9'$(COVERAGE_LIBS) \'
    #9'$(GLIB_LIBS) \'
    #9'$(top_builddir)/vala/libvalacore.la \'
    #9'$(top_builddir)/ccode/libvalaccode.la \'
    #9'$(NULL)'
    ''
    
      'EXTRA_DIST = $(libvala_la_VALASOURCES) codegen.vapi codegen.vala' +
      '.stamp'
    ''
    'MAINTAINERCLEANFILES = \'
    #9'codegen.vapi \'
    #9'valacodegen.h \'
    #9'$(libvala_la_VALASOURCES:.vala=.c) \'
    #9'$(NULL)')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Text'
    'Label'
    'Symbol'
    'Param')
  Extentions = 'am'
  LexerName = 'Automake'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (Synwrite)')
  RestartFromLineStart = True
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
