object SyntAnal105: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Default'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      ChangeCase = ccUpper
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Marked block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clHighlightText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clHighlight
      FormatType = ftColor
      BorderColorLeft = clRed
      BorderColorTop = clNavy
      BorderColorRight = clMaroon
      BorderColorBottom = clRed
      MultiLineBorder = True
    end
    item
      DisplayName = 'Reserved MySQL word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'SQL Functions'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Datatypes'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Predefined Exceptions'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Default Oracle Packages'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatFlags = [ffBold, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
    end
    item
      DisplayName = 'Public Package Procedure'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Function separator'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clRed
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Current block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = clBtnFace
      FormatType = ftColor
      BorderTypeLeft = blDot
      BorderColorLeft = clMaroon
      BorderTypeTop = blDot
      BorderColorTop = clMaroon
      BorderTypeRight = blDot
      BorderColorRight = clMaroon
      BorderTypeBottom = blDot
      BorderColorBottom = clMaroon
    end
    item
      DisplayName = 'Current function'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 16777205
      FormatType = ftBackGround
      MultiLineBorder = True
    end
    item
      DisplayName = 'Current Line'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 13369080
      FormatType = ftBackGround
    end
    item
      DisplayName = '()'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold, fsUnderline]
      BgColor = clBtnFace
      BorderTypeLeft = blDot
      BorderTypeTop = blDot
      BorderTypeRight = blDot
      BorderTypeBottom = blDot
    end
    item
      DisplayName = 'Big Bold (tree)'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Times New Roman'
      Font.Style = [fsBold]
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Group (tree)'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold, fsItalic]
    end
    item
      DisplayName = 'Function (tree)'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Data Dictionary'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Tree (Bold)'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tree (Section)'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Public Package Procedure'
      StyleName = 'Public Package Procedure'
      TokenType = 2
      Expression = 'DBMS_\w+?\.\w+'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Any name'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)'#39'.*?('#39'|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/,\.;:\(\)=<>\+\-]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Reserved words'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ALTER'
            'AND'
            'ANY'
            'AS'
            'ASC'
            'BEGIN'
            'BETWEEN'
            'BY'
            'CASE'
            'CHECK'
            'COLUMN'
            'COMMENT'
            'COUNT'
            'CREATE'
            'CURRENT'
            'CURRVAL '
            'DATE'
            'DECLARE'
            'DEFAULT'
            'DELETE'
            'DESC'
            'DISTINCT'
            'DO'
            'DROP'
            'ELSE'
            'ELSEIF'
            'END'
            'EXISTS'
            'FILE'
            'FLOAT'
            'FOR'
            'FROM'
            'FUNCTION'
            'GRANT'
            'GROUP'
            'HAVING'
            'IDENTIFIED'
            'IF'
            'IN'
            'INCREMENT'
            'INDEX'
            'INITIAL'
            'INSERT'
            'INTO'
            'IS'
            'LEVEL'
            'LIKE'
            'LOCK'
            'LONG'
            'LOWER'
            'MAX'
            'MIN'
            'MINUS'
            'MODE'
            'MODIFY'
            'NEXTVAL'
            'NOT'
            'NULL'
            'ON'
            'OR'
            'ORDER'
            'PRIVILEGES'
            'PROCEDURE'
            'PUBLIC'
            'RENAME'
            'REPEAT'
            'RESOURCE'
            'REVOKE'
            'ROW'
            'ROWS'
            'SELECT'
            'SESSION'
            'SET'
            'SIZE'
            'SUM'
            'SYSDATE'
            'TABLE'
            'THEN'
            'TO'
            'TRIGGER'
            'TRUNCATE'
            'UNION'
            'UNIQUE'
            'UPDATE'
            'UPPER'
            'VALUES'
            'VIEW'
            'WHERE'
            'WITH')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'MySQL Reserved words'
      StyleName = 'Reserved MySQL word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'CHARACTER'
            'COLLATION'
            'COLUMNS'
            'COMMIT'
            'DESCRIBE'
            'ENGINE'
            'ENGINES'
            'ERRORS'
            'GRANTS'
            'HELP'
            'INNODB '
            'LIMIT'
            'LOGS'
            'MUTEX'
            'OPEN'
            'PRIVILEGES'
            'PROCESSLIST'
            'PROFILE'
            'PROFILES'
            'RELEASE'
            'ROLLBACK'
            'SAVEPOINT'
            'SHOW'
            'START '
            'STATUS'
            'TRANSACTION '
            'USE'
            'VARIABLES')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'SQL Functions'
      StyleName = 'SQL Functions'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ASIN'
            'ATAN'
            'ATAN2'
            'BENCHMARK'
            'BIN'
            'BINARY'
            'BIT_AND'
            'BIT_COUNT'
            'BIT_LENGTH'
            'BIT_OR'
            'BIT_XOR'
            'CAST'
            'CEIL'
            'CEILING'
            'CHAR_LENGTH'
            'CHARACTER_LENGTH'
            'CHARSET'
            'COALESCE'
            'COERCIBILITY'
            'COLLATION'
            'COMPRESS'
            'CONCAT'
            'CONCAT_WS'
            'CONNECTION_ID'
            'CONV'
            'CONVERT_TZ'
            'COS'
            'COT'
            'CRC32'
            'CURDATE'
            'CURRENT_DATE'
            'CURRENT_TIME'
            'CURRENT_TIMESTAMP'
            'CURRENT_USER'
            'CURTIME'
            'DATABASE'
            'DATE'
            'DATE_ADD'
            'DATE_FORMAT'
            'DATE_SUB'
            'DATEDIFF'
            'DAY'
            'DAYNAME'
            'DAYOFMONTH'
            'DAYOFWEEK'
            'DAYOFYEAR'
            'DECODE'
            'DEFAULT'
            'DEGREES'
            'DES_DECRYPT'
            'DES_ENCRYPT'
            'DIV'
            'ELT'
            'ENCODE'
            'ENCRYPT'
            'EXP'
            'EXPORT_SET'
            'EXTRACT'
            'FIELD'
            'FIND_IN_SET'
            'FLOOR'
            'FORMAT'
            'FOUND_ROWS'
            'FROM_DAYS'
            'FROM_UNIXTIME'
            'GET_FORMAT'
            'GET_LOCK'
            'GREATEST'
            'GROUP_CONCAT'
            'HEX'
            'HOUR'
            'IFNULL'
            'INET_ATON'
            'INET_NTOA'
            'INSTR'
            'INTERVAL'
            'IS NULL'
            'IS_FREE_LOCK'
            'IS_USED_LOCK'
            'ISNULL'
            'LAST_DAY'
            'LAST_INSERT_ID'
            'LCASE'
            'LEAST'
            'LEFT'
            'LENGTH'
            'LOAD_FILE'
            'LOCALTIME'
            'LOCALTIMESTAMP'
            'LOCATE'
            'LOG'
            'LOG10'
            'LOG2'
            'LPAD'
            'LTRIM'
            'MAKE_SET'
            'MAKEDATE'
            'MAKETIME'
            'MASTER_POS_WAIT'
            'MD5'
            'MICROSECOND'
            'MID'
            'MINUTE'
            'MOD'
            'MONTH'
            'MONTHNAME'
            'NAME_CONST'
            'OCT'
            'OCTET_LENGTH'
            'OLD_PASSWORD'
            'PASSWORD'
            'PERIOD_ADD'
            'PERIOD_DIF'
            'PI'
            'POSITION'
            'POW'
            'POWER'
            'QUARTER'
            'QUOTE'
            'RADIANS'
            'RAND'
            'REGEXP'
            'RELEASE_LOCK'
            'REPLACE'
            'REVERSE'
            'RIGHT'
            'RLIKE'
            'ROUND'
            'ROW_COUNT'
            'RPAD'
            'RTRIM'
            'SCHEMA'
            'SEC_TO_TIME'
            'SECOND'
            'SESSION_USER'
            'SHA1'
            'SIGN'
            'SIN'
            'SLEEP'
            'SOUNDEX'
            'SOUNDS'
            'SPACE'
            'SQRT'
            'STD'
            'STDDEV'
            'STDDEV_POP'
            'STDDEV_SAMP'
            'STR_TO_DATE'
            'STRCMP'
            'SUBDATE'
            'SUBSTR'
            'SUBSTRING'
            'SUBSTRING_INDEX'
            'SUBTIME'
            'SYSTEM_USER'
            'TAN'
            'TIME'
            'TIME_FORMAT'
            'TIME_TO_SEC'
            'TIMEDIFF'
            'TIMESTAMP'
            'TIMESTAMPADD'
            'TIMESTAMPDIFF'
            'TO_DAYS'
            'TRIM'
            'UCASE'
            'UNCOMPRESS'
            'UNCOMPRESSED_LENGTH'
            'UNHEX'
            'UNIX_TIMESTAMP'
            'USER'
            'UTC_DATE'
            'UTC_TIME'
            'UTC_TIMESTAMP'
            'UUID'
            'VAR_POP'
            'VAR_SAMP'
            'VARIANCE'
            'WEEK'
            'WEEKDAY'
            'WEEKOFYEAR'
            'XOR'
            'YEAR'
            'YEARWEEK')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'service_words'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'in'
            'out')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      TokenType = 7
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Datatypes'
      StyleName = 'Datatypes'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'BIGINT'
            'BINARY'
            'BLOB'
            'CHAR'
            'DATE'
            'DATETIME'
            'ENUM'
            'INT'
            'INYTEXT'
            'LONGBLOB'
            'LONGTEXT'
            'MEDIUMBLOB'
            'MEDIUMINT'
            'MEDIUMTEXT'
            'SET'
            'SMALLINT'
            'TEXT'
            'TIME'
            'TIMESTAMP'
            'TINYBLOB'
            'TINYINT'
            'VARBINARY'
            'VARCHAR'
            'YEAR')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Procedure start'
      ConditionList = <
        item
          TagList.Strings = (
            'CREATE')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Procedure end'
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      DrawStaple = True
      TreeItemStyle = 'Tree (Bold)'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Procedure end'
      NotParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'END')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'DML start'
      ConditionList = <
        item
          TagList.Strings = (
            'cursor'
            'delete'
            'insert'
            'select'
            'update')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'DML end'
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      DrawStaple = True
      SelfClose = True
      TreeItemStyle = 'Tree (Section)'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'DML end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 4
        end>
      BlockEnd = 'DML start'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      StyleName = '()'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CollapseFmt = '( ... )'
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      BlockEnd = '('
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'operator start'
      StyleName = 'Current block'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'begin')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'operator end'
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'operator end'
      BlockName = 'operator start'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Type start'
      StrictParent = True
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'type')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = 1
      BlockEnd = 'Type end'
      GroupFmt = 'Types'
      HighlightPos = cpAny
      TreeGroupStyle = 'Group (tree)'
      TreeItemImage = 3
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Type end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Data Dictionary'
      StyleName = 'Data Dictionary'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'CHARACTER_SETS'
            'COLLATION_CHARACTER_SET_APPLICABILITY'
            'COLLATIONS'
            'COLUMN_PRIVILEGES'
            'COLUMNS'
            'columns_priv'
            'db'
            'func'
            'help_category'
            'help_keyword'
            'help_relation'
            'help_topic'
            'host'
            'KEY_COLUMN_USAGE'
            'proc'
            'procs_priv'
            'ROUTINES'
            'SCHEMA_PRIVILEGES'
            'SCHEMATA'
            'STATISTICS'
            'TABLE_CONSTRAINTS'
            'TABLE_PRIVILEGES'
            'TABLES'
            'tables_priv'
            'time_zone'
            'time_zone_leap_second'
            'time_zone_name'
            'time_zone_transition'
            'time_zone_transition_type'
            'TRIGGERS'
            'user'
            'USER_PRIVILEGES'
            'VIEWS')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'parameters'
      ConditionList = <>
      NotCollapsed = True
      GroupFmt = 'parameters'
      HighlightPos = cpAny
      SelfClose = True
      GrammaRuleName = 'parameter'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'declares'
      ConditionList = <>
      NotCollapsed = True
      GroupFmt = 'declare'
      HighlightPos = cpAny
      SelfClose = True
      GrammaRuleName = 'type_declaration'
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'PROCEDURE cr_debug.CONTINUE(IN step_kind INTEGER)'
    'BEGIN'
    
      '  DECLARE stack_depth INTEGER DEFAULT (SELECT MAX(StackDepth) FR' +
      'OM callstack WHERE DebugID = @debug_id);'
    ''
    
      '  UPDATE debuggings SET StepKind = step_kind WHERE id = @debug_i' +
      'd; '
    ''
    '  # set estimated stack depth for step '
    '  IF (step_kind = 3) THEN'
    
      '    UPDATE debuggings SET EstimatedDepth = stack_depth - 1 WHERE' +
      ' ID = @debug_id;'
    '  ELSEIF (step_kind = 2) then'
    
      '    UPDATE debuggings SET EstimatedDepth = stack_depth WHERE ID ' +
      '= @debug_id;'
    '  ELSE'
    
      '    UPDATE debuggings SET EstimatedDepth = -1 WHERE ID = @debug_' +
      'id;'
    '  END IF;'
    ''
    '  # release lock'
    '  DO GET_LOCK(CONCAT(@debug_id, '#39'secondary'#39'), 1000);'
    '  DO RELEASE_LOCK(CONCAT(@debug_id, '#39'secondary'#39'));'
    '  IF (IS_FREE_LOCK(@debug_id) = 1) THEN'
    '    DO SLEEP(0.05);'
    '  END IF;'
    '  # take control back'
    '  DO GET_LOCK(@debug_id, 2);'
    'END')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Service Words')
  Gramma.Gramma = 
    'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#13#10'P' +
    'ackage_declaration = '#39'package'#39' ('#39'body'#39')? Complex_name ('#39'is'#39' | '#39'a' +
    's'#39');'#13#10'type_declaration = '#39'type'#39' ('#39'body'#39')? Complex_name ('#39'is'#39' | '#39 +
    'as'#39');'#13#10#13#10'func_start = '#39'function'#39' <Identifier> '#13#10'           | '#39'pr' +
    'ocedure'#39' <Identifier>;'#13#10'           '#13#10'first_params = func_start '#39 +
    '('#39' ( <Identifier> | <Service Words> | '#39'.'#39' | '#39','#39' | '#39'%'#39')*;'#13#10'parame' +
    'ter = first_params '#39','#39' (<Service Words>)? <Identifier> '#13#10'       ' +
    '   | func_start '#39'('#39' (<Service Words>)? <Identifier>;'#13#10#13#10'func_end' +
    ' = '#39')'#39' '#39';'#39#13#10'         | '#39')'#39' '#39'return'#39' Complex_name '#39';'#39'; '#13#10#13#10#13#10
  MarkedBlockStyle = 'Marked block'
  CurrentLineStyle = 'Current Line'
  Extentions = 'sql pck'
  LexerName = 'MySQL Stored Procedures'
  FullRefreshSize = 5000
  LineComment = '--'
  AlwaysSyncBlockAnal = True
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
