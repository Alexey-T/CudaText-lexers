object SyntAnal13: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id funcs'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 7
      Expression = '\b(catch|else|for|if|switch|while)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+f?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+u?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#\x20*\w+(\x20defined)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\\\?%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'branch'
            'break'
            'continue'
            'discard'
            'do'
            'else'
            'flatten'
            'for'
            'if'
            'loop'
            'namespace'
            'packoffset'
            'register'
            'return'
            'struct'
            'switch'
            'typedef'
            'unroll'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'AddressU'
            'AddressV'
            'AddressW'
            'AppendStructuredBuffer'
            'bool'
            'bool[1-4](x[1-4])?'
            'BorderColor'
            'Buffer'
            'ByteAddressBuffer'
            'cbuffer'
            'ComparisonFilter'
            'ComparisonFunc'
            'ConsumeStructuredBuffer'
            'double'
            'double[1-4](x[1-4])?'
            'dword'
            'Filter'
            'float'
            'float[1-4](x[1-4])?'
            'half'
            'half[1-4](x[1-4])?'
            'int'
            'int[1-4](x[1-4])?'
            'matrix'
            'MaxAnisotropy'
            'MaxLOD'
            'min10float'
            'min12int'
            'min16float'
            'min16int'
            'min16uint'
            'MinLOD'
            'MipLODBias'
            'RWBuffer'
            'RWByteAddressBuffer'
            'RWStructuredBuffer'
            'sampler'
            'sampler_state'
            'sampler1D'
            'sampler2D'
            'sampler3D'
            'SamplerComparisonState'
            'samplerCUBE'
            'SamplerState'
            'StructuredBuffer'
            'tbuffer'
            'texture'
            'Texture'
            'Texture(1D|2D|3D|Cube)(Array)?'
            'uint'
            'uint[1-4](x[1-4])?'
            'void')
          CondType = tcStrictMask
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id modifiers'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'centroid'
            'column_major'
            'const'
            'extern'
            'groupshared'
            'in'
            'inline'
            'inout'
            'nointerpolation'
            'noperspective'
            'out'
            'precise'
            'row_major'
            'shared'
            'snorm'
            'static'
            'uniform'
            'unorm'
            'volatile')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id consts'
      StyleName = 'Id const'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'false'
            'FALSE'
            'NULL'
            'true'
            'TRUE')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id funcs'
      StyleName = 'Id funcs'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'abs'
            'acos'
            'all'
            'AllMemoryBarrier'
            'AllMemoryBarrierWithGroupSync'
            'any'
            'asdouble'
            'asfloat'
            'asin'
            'asint'
            'asuint'
            'atan'
            'atan2'
            'ceil'
            'clamp'
            'clip'
            'cos'
            'cosh'
            'countbits'
            'cross'
            'D3DCOLORtoUBYTE4'
            'ddx'
            'ddx_coarse'
            'ddx_fine'
            'ddy'
            'ddy_coarse'
            'ddy_fine'
            'degrees'
            'determinant'
            'DeviceMemoryBarrier'
            'DeviceMemoryBarrierWithGroupSync'
            'distance'
            'dot'
            'dst'
            'errorf'
            'EvaluateAttributeAtCentroid'
            'EvaluateAttributeAtSample'
            'EvaluateAttributeSnapped'
            'exp'
            'exp2'
            'f16tof32'
            'f32tof16'
            'faceforward'
            'firstbithigh'
            'firstbitlow'
            'floor'
            'fma'
            'fmod'
            'frac'
            'frexp'
            'fwidth'
            'GetRenderTargetSampleCount'
            'GetRenderTargetSamplePosition'
            'GroupMemoryBarrier'
            'GroupMemoryBarrierWithGroupSync'
            'InterlockedAdd'
            'InterlockedAnd'
            'InterlockedCompareExchange'
            'InterlockedCompareStore'
            'InterlockedExchange'
            'InterlockedMax'
            'InterlockedMin'
            'InterlockedOr'
            'InterlockedXor'
            'isfinite'
            'isinf'
            'isnan'
            'ldexp'
            'length'
            'lerp'
            'lit'
            'log'
            'log10'
            'log2'
            'mad'
            'max'
            'min'
            'modf'
            'msad4'
            'mul'
            'noise'
            'normalize'
            'pow'
            'printf'
            'Process2DQuadTessFactorsAvg'
            'Process2DQuadTessFactorsMax'
            'Process2DQuadTessFactorsMin'
            'ProcessIsolineTessFactors'
            'ProcessQuadTessFactorsAvg'
            'ProcessQuadTessFactorsMax'
            'ProcessQuadTessFactorsMin'
            'ProcessTriTessFactorsAvg'
            'ProcessTriTessFactorsMax'
            'ProcessTriTessFactorsMin'
            'radians'
            'rcp'
            'reflect'
            'refract'
            'reversebits'
            'round'
            'rsqrt'
            'saturate'
            'sign'
            'sin'
            'sincos'
            'sinh'
            'smoothstep'
            'sqrt'
            'step'
            'tan'
            'tanh'
            'tex1D'
            'tex1Dbias'
            'tex1Dgrad'
            'tex1Dlod'
            'tex1Dproj'
            'tex2D'
            'tex2Dbias'
            'tex2Dgrad'
            'tex2Dlod'
            'tex2Dproj'
            'tex3D'
            'tex3Dbias'
            'tex3Dgrad'
            'tex3Dlod'
            'tex3Dproj'
            'texCUBE'
            'texCUBEbias'
            'texCUBEgrad'
            'texCUBElod'
            'texCUBEproj'
            'transpose'
            'trunc')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NotCollapsed = True
      NameFmt = '%sz-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
      AutoCloseText = '}'#13#10
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'struct')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 4
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'float3x2 varname;'
    'float2 varname = abs(cos(0.5));'
    ''
    '#define TOKEN float3(0.0f, 1.0f, 1.0f)'
    ''
    '#if defined(TOKEN)'
    '    #define TOKEN float3(0.0f, 1.0f, 1.0f)'
    '#endif'
    ''
    'cbuffer BufferName : register(b0)'
    '{'
    '  matrix MatrixVar;'
    '  float4 Float4Var;'
    '}'
    ''
    'struct PS_INPUT'
    '{'
    '  noperspective float2 Var2 : TEXCOORD0;'
    '  centroid float4 ScreenTex : TEXCOORD1;'
    '};'
    ''
    
      '#define MACRO_FUNCTION(paramName, paramValue) float paramName = ' +
      'paramValue;'
    ''
    'struct varname'
    '{'
    '    float varname = sin(trunc(0.2f))'
    '    int varname;'
    '};'
    ''
    'typedef struct'
    '{'
    '    float4 varname;'
    '    int4 varname2 : TEXCOORD0;'
    '} s_struct_name;'
    ''
    'Texture1D varname;'
    'Texture1DArray varname;'
    ''
    
      'float2x2 FunctionName(float param1, int2 param2, structName para' +
      'm3)'
    '{'
    '    return result;'
    '}'
    ''
    
      'varname FunctionName(float param1, int2 param2, inout structName' +
      ' param3, uniform bool IsTrue = false)'
    '{'
    '    return result;'
    '}'
    ''
    'namespace TestSpace'
    '{'
    '    struct TestStruct'
    '    {'
    
      '        varname FunctionName(float param1, int2 param2, inout st' +
      'ructName param3, uniform bool IsTrue = false)'
    '        {'
    '            return result;'
    '        }'
    '    };'
    ''
    '    typedef struct'
    '    {'
    
      '        varname FunctionName(float param1, int2 param2, inout st' +
      'ructName param3, uniform bool IsTrue = false)'
    '        {'
    '            return result;'
    '        }'
    '    } s_struct_name;'
    ''
    
      '    float FunctionName(float param1, int2 param2, structName par' +
      'am3)'
    '    {'
    '        return 5.0f;'
    '    }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    'Id keyword')
  Extentions = 'fx fxh hlsl hlsli usf'
  LexerName = 'HLSL'
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
