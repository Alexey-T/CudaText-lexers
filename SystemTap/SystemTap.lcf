object SyntAnal19: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(//|\#).*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment block'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\.|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 7
      Expression = '(?-i)\b(catch|else|for|if|switch|while)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '0x\h[\h'#39']* (\. \h[\h'#39']*)? p[\+\-]? \h[\h'#39']* |'#13#10'0x\h[\h'#39']* \. \h[' +
        '\h'#39']*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\h'#39']+ [ul]* |'#13#10'0b[01'#39']+ [ul]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d'#39']* (\.[\d'#39']*)? e[\+\-]? \d+ [Lf]? |'#13#10'\. [\d'#39']+ e[\+\-]? \d' +
        '+ [Lf]? |'#13#10'\d[\d'#39']* \. (\d[\d'#39']*)? [Lf]? |'#13#10'\. \d[\d'#39']* [Lf]?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d'#39']* [ulf]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 6
      Expression = '[@\$][\w\#\$]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ;'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = ';'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol :'
      StyleName = 'Symbol'
      TokenType = 11
      Expression = ':'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '\[\[| \]\]| \.\.\.| ::| [\[\],~\.\\\?]|'#13#10'[\-\+<>\|\&\^]{2,3}=? |' +
        ' \.=| \#{1,2}| <=>| %[\{\}]|'#13#10'[\+\-\*/&\|\^!<>=~%]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'break'
            'catch'
            'continue'
            'delete'
            'else'
            'for'
            'foreach'
            'function'
            'global'
            'if'
            'in'
            'limit'
            'next'
            'probe'
            'return'
            'try'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'long'
            'string')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func a:b'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 512
        end
        item
          CondType = tcSkip
          TokenTypes = 2174
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 512
        end
        item
          TokenTypes = 4
        end
        item
          TokenTypes = 2048
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1~[(]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func a'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 512
        end
        item
          CondType = tcSkip
          TokenTypes = 2174
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 512
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1~[(]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 256
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'function f:long (name:string) # comment'
    '{ return '#39'test'#39' + 12.34 - 0xFF + @var + $$params$$ }'
    ''
    'function f2 (name:string) # comment'
    '{ return $# }'
    ''
    'probe %($# >= 5 %? $5 %: never %)'
    '{'
    '  if ($2 in interval) {'
    '    acc[%($# >= 6 %? $6 %: 0 %)] <<< measure - interval[$2]'
    '  }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Var'
    'Id keyword'
    'Symbol {}'
    'Symbol ()'
    'Symbol ;'
    'Symbol :')
  Extentions = 'stp'
  LexerName = 'SystemTap'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
