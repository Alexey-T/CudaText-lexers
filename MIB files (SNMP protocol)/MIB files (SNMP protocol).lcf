object SyntAnal10: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Objects'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Any name'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_][\w\-]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)".*?("|\Z)'#13#10'#"(\\"|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '#any sequence of digits'#13#10'\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Reserved'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'BEGIN'
            'CHOICE'
            'DEFINITIONS'
            'DESCRIPTION'
            'DISPLAY-HINT'
            'END'
            'FROM'
            'IDENTIFIER'
            'IMPORTS'
            'MACRO'
            'MAX-ACCESS'
            'NOTIFICATION-TYPE'
            'OBJECT'
            'OBJECTS'
            'OBJECT-TYPE'
            'REFERENCE'
            'REVISION'
            'SEQUENCE'
            'STATUS'
            'SYNTAX')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Types'
      StyleName = 'Types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'INTEGER'
            'OCTET'
            'STRING')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Objects'
      StyleName = 'Objects'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'MODULE-IDENTITY'
            'NOTIFICATION-TYPE'
            'OBJECT-IDENTITY'
            'OBJECT-TYPE'
            'TEXTUAL-CONVENTION')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Object beg.'
      ConditionList = <
        item
          TagList.Strings = (
            'OBJECT-TYPE')
        end
        item
          TokenTypes = 4
        end>
      IdentIndex = 1
      BlockOffset = 1
      BlockEnd = 'Object end.'
      NameFmt = '%s1'
      GroupFmt = '%e2'
      HighlightPos = cpBound
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Object end.'
      BlockName = 'Object beg.'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end
        item
          TokenTypes = 32
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            '::=')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTagBegin
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Object identifier path'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 44
        end
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      NameFmt = '%s-1 %s-2'
      HighlightPos = cpBound
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Object identifier'
      ConditionList = <
        item
          TagList.Strings = (
            '::=')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'IDENTIFIER')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'OBJECT')
          TokenTypes = 4
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'Object identifier path'
      NameFmt = '%s0 = %e2.%e1'
      RefToCondEnd = True
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Macro start'
      ConditionList = <
        item
          TagList.Strings = (
            'BEGIN')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '::=')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'MACRO')
          TokenTypes = 4
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'END'
      GroupFmt = 'MACRO'
      RefToCondEnd = True
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'END'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'END')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Definitions'
      ConditionList = <
        item
          TagList.Strings = (
            'BEGIN')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '::=')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'DEFINITIONS')
          TokenTypes = 4
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'END'
      RefToCondEnd = True
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'IMPORTS'
      ConditionList = <
        item
          TagList.Strings = (
            'IMPORTS')
          TokenTypes = 4
        end>
      BlockEnd = ';'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = ';'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Imported Module'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'FROM')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor')
  Extentions = 'mib my'
  LexerName = 'MIB files (SNMP protocol)'
  LineComment = '--'
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
