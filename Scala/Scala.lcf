object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12615808
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id reserved'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Unicode'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag brackets'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag name'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12352899
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag attrib'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment empty'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '/\*\*/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)/\*\* (/\* .*? \*/|.)*? (\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment range'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\* (/\* .*? \*/|.)*? (\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '{'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = '\{'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '}'
      StyleName = 'Symbol'
      TokenType = 11
      Expression = '\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag name'
      StyleName = 'Tag name'
      BlockName = '<'
      StrictParent = True
      TokenType = 6
      Expression = '(?<=</?)\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag numbers'
      StyleName = 'Number'
      BlockName = '<'
      StrictParent = True
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag attrib'
      StyleName = 'Tag attrib'
      BlockName = '<'
      StrictParent = True
      TokenType = 9
      Expression = '[\w\-]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag string'
      StyleName = 'String'
      BlockName = '<'
      StrictParent = True
      TokenType = 4
      Expression = '(?s)("|'#39') (\\.|.)*? \1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String """'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s-i)[sq]?""".*?("""|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?-i)(f|s|q|raw)?("|'#39')(\\.|.)*?(\2|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String tick'
      StyleName = 'String2'
      TokenType = 4
      Expression = '`.*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      BlockName = '<'
      NotParent = True
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h+L?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '('#13#10'(\d+\.)?\d+e[\+\-]?\d+ |'#13#10'\d*\.\d+(e[\+\-]?\d+)?'#13#10')[df]?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+[DFL]?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Unicode'
      StyleName = 'Unicode'
      TokenType = 4
      Expression = '\\u[0-9a-fA-F]{4}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '<!--.+?-->'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol long'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '<\-|=>|\->|==|<:|>:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String CDATA'
      StyleName = 'String2'
      TokenType = 12
      Expression = '(?s-i)<!\[CDATA\[.*?\]\]>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '<'
      StyleName = 'Tag brackets'
      TokenType = 7
      Expression = '</?(?=[a-z])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '>'
      StyleName = 'Tag brackets'
      TokenType = 8
      Expression = '/> | ((?<=\w)>)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?%\#@'#39'\\]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id reserved'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'case'
            'catch'
            'class'
            'def'
            'do'
            'else'
            'eq'
            'extends'
            'false'
            'final'
            'finally'
            'for'
            'forSome'
            'if'
            'implicit'
            'import'
            'lazy'
            'macro'
            'match'
            'ne'
            'new'
            'null'
            'object'
            'override'
            'package'
            'private'
            'protected'
            'return'
            'sealed'
            'super'
            'this'
            'throw'
            'trait'
            'true'
            'try'
            'type'
            'val'
            'var'
            'while'
            'with'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Boolean'
            'Byte'
            'Double'
            'Float'
            'Int'
            'Long'
            'Short'
            'String'
            'Unit')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id const'
      StyleName = 'Id const'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'false'
            'Nil'
            'None'
            'null'
            'super'
            'this'
            'true')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Tree items'
      ConditionList = <
        item
          TokenTypes = 1024
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            'class'
            'object'
            'package'
            'trait')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpRange
      CancelNextRules = True
      CollapseFmt = '%sz0'
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TokenTypes = 1024
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpRange
      DynSelectMin = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 2048
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Def'
      ConditionList = <
        item
          TokenTypes = 12
        end
        item
          TagList.Strings = (
            'def')
          TokenTypes = 4
        end>
      NotCollapsed = True
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '{...}'
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '<'
      ConditionList = <
        item
          TokenTypes = 128
        end>
      BlockEnd = '>'
      DisplayInTree = False
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '>'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 256
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Comment here'
    '"String with \" char" + \u000D +'
    '"""String spans'
    'two lines"""'
    '<!-- Comment  -->'
    '<div class="some'
    '  string" value=20 />'
    ''
    'val c = <version>{scalaBook.version}</version>'
    '0.0 + 1e30f + 3.1415F + 1.0e-100 + .1 + `Test`'
    'case <foo/> =>'
    ''
    'object abstractTypes extends Application {'
    '  abstract class Buffer {'
    '    type T; val element: T'
    '  }'
    '  abstract class SeqBuffer {'
    '    type T; val element: Seq[T]; def length = element.length'
    '  }'
    '  println(newIntBuffer(1, 2, 3).length)'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Tag name'
    '<'
    '>'
    'Tag attrib'
    '{'
    '}'
    'CDATA')
  Extentions = 'scala sbt'
  LexerName = 'Scala'
  Notes.Strings = (
    'Alexey T. (CudaText)'
    'Doc: http://www.scala-lang.org/old/node/198'
    'Tests: http://www.scala-lang.org/old/node/219'
    ''
    'Notes:'
    '- tree items for "class" not shown on some examples'
    '  (but seems rule is ok, strange)'
    '- not tested on "Advanced" examples (www page above)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
