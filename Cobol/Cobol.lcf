object SyntAnal43: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Default'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Left margin'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clBackground
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Left margin'
      StyleName = 'Left margin'
      Expression = '^.{6}[^*]'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^.{6}\*.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\|.*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Any name'
      TokenType = 2
      Expression = '[a-z_][-\w]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '".*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      TokenType = 3
      Expression = '\.'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Key words'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'accept'
            'access'
            'add'
            'address'
            'advancing'
            'after'
            'all'
            'alphabet'
            'also'
            'alter'
            'alternate'
            'and'
            'any'
            'apply'
            'are'
            'area'
            'areas'
            'ascending'
            'assign'
            'at'
            'basis'
            'before'
            'beginning'
            'binary'
            'blank'
            'block'
            'bottom'
            'by'
            'call'
            'cancel'
            'cbl'
            'character'
            'characters'
            'class'
            'close'
            'collating'
            'comma'
            'common'
            'compute'
            'configuration'
            'contains'
            'content'
            'continue'
            'converting'
            'copy'
            'corr'
            'corresponding'
            'count'
            'currency'
            'data'
            'day'
            'dbcs'
            'debugging'
            'declaratives'
            'degugging'
            'delete'
            'delimited'
            'delimiter'
            'depending'
            'descending'
            'divide'
            'division'
            'down'
            'duplicates'
            'dynamic'
            'ebcdic'
            'egcs'
            'eject'
            'else'
            'ending'
            'enter'
            'entry'
            'environment'
            'eop'
            'equal'
            'error'
            'evaluate'
            'every'
            'exception'
            'exit'
            'extend'
            'external'
            'f'
            'false'
            'fd'
            'filler'
            'first'
            'footing'
            'for'
            'from'
            'giving'
            'global'
            'go'
            'goback'
            'greater'
            'id'
            'identification'
            'if'
            'in'
            'index'
            'indexed'
            'initial'
            'initialize'
            'insert'
            'inspect'
            'installation'
            'into'
            'invalid'
            'is'
            'just'
            'justified'
            'kanji'
            'key'
            'label'
            'leading'
            'left'
            'length'
            'less'
            'line'
            'lines'
            'linkage'
            'list'
            'lock'
            'map'
            'memory'
            'merge'
            'mode'
            'modules'
            'move'
            'multiple'
            'multiply'
            'native'
            'negative'
            'next'
            'no'
            'nolist'
            'nomap'
            'nosource'
            'not'
            'null'
            'nulls'
            'occurs'
            'of'
            'off'
            'omitted'
            'on'
            'open'
            'optional'
            'or'
            'order'
            'organization'
            'other'
            'output'
            'overflow'
            'padding'
            'page'
            'password'
            'perform'
            'pic'
            'picture'
            'pointer'
            'position'
            'positive'
            'procedure'
            'procedures'
            'proceed'
            'process'
            'quote'
            'quotes'
            'random'
            'read'
            'ready'
            'record'
            'recording'
            'records'
            'redefines'
            'reel'
            'reference'
            'relative'
            'release'
            'reload'
            'remainder'
            'removal'
            'renames'
            'replace'
            'replacing'
            'rerun'
            'reserve'
            'reset'
            'reversed'
            'rewind'
            'rewrite'
            'right'
            'rounded'
            'run'
            's'
            'same'
            'sd'
            'search'
            'section'
            'select'
            'sentence'
            'separate'
            'sequence'
            'sequential'
            'service'
            'set'
            'sign'
            'size'
            'skip1'
            'skip2'
            'skip3'
            'space'
            'spaces'
            'start'
            'status'
            'stop'
            'string'
            'subtract'
            'suppress'
            'symbolic'
            'sync'
            'synchronized'
            'tally'
            'tallying'
            'tape'
            'test'
            'than'
            'then'
            'through'
            'thru'
            'time'
            'times'
            'title'
            'to'
            'top'
            'trace'
            'trailing'
            'true'
            'u'
            'unit'
            'unstring'
            'until'
            'up'
            'upon'
            'usage'
            'use'
            'using'
            'v'
            'value'
            'values'
            'varying'
            'with'
            'words'
            'zero'
            'zeroes'
            'zeros')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'other'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'alphabetic'
            'alphabetic-lower'
            'alphabetic-upper'
            'alphanumeric'
            'alphanumeric-edited'
            'author'
            'code-set'
            'comp'
            'comp-1'
            'comp-2'
            'comp-3'
            'comp-4'
            'computational'
            'computational-1'
            'computational-2'
            'computational-3'
            'computational-4'
            'date'
            'date-compiled'
            'date-written'
            'day-of-week'
            'debug-item'
            'decimal-point'
            'display'
            'display-1'
            'end'
            'end-add'
            'end-call'
            'end-compute'
            'end-delete'
            'end-divide'
            'end-evaluate'
            'end-if'
            'end-multiply'
            'end-of-page'
            'end-perform'
            'end-read'
            'end-return'
            'end-rewrite'
            'end-search'
            'end-start'
            'end-string'
            'end-subtract'
            'end-unstring'
            'end-write'
            'file'
            'file-control'
            'high-value'
            'high-values'
            'input'
            'input-output'
            'i-o'
            'i-o-control'
            'linage'
            'linage-counter'
            'low-value'
            'low-values'
            'more-labels'
            'numeric'
            'numeric-edited'
            'object-computer'
            'packed-decimal'
            'program'
            'program-id'
            'return'
            'return-code'
            'security'
            'segment-limit'
            'shift-in'
            'shift-out'
            'sort'
            'sort-control'
            'sort-core-size'
            'sort-file-size'
            'sort-merge'
            'sort-message'
            'sort-mode-size'
            'sort-return'
            'source'
            'source-computer'
            'special-names'
            'standard'
            'standard-1'
            'standard-2'
            'when'
            'when-compiled'
            'working-storage'
            'write'
            'write-only')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block begin'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'Block end'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block end'
      BlockName = 'Block begin'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '.')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor')
  Extentions = 'cbl cbd cdb cdc cob'
  LexerName = 'Cobol'
  SkipSpaces = False
  Charset = DEFAULT_CHARSET
end
