object SyntAnal37: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      TokenType = 2
      Expression = 
        '(%i|%inf|%nan|%e|%eps|%s|%z|%t|%T|%f|%F|%pi|PWD|SCI|SCIHOME|TMPD' +
        'IR)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d* \.)? \d+ [ed] [\+\-]? \d+ |'#13#10'\d* \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;%]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\$\.!:~\\]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'ans'
            'assignation'
            'backslash'
            'banner'
            'brackets'
            'break'
            'case'
            'catch'
            'clear'
            'clearglobal'
            'colon'
            'comma'
            'comments'
            'comparison'
            'continue'
            'debug'
            'delbpt'
            'dispbpt'
            'do'
            'dollar'
            'dot'
            'else'
            'elseif'
            'empty'
            'end'
            'endfunction'
            'equal'
            'errcatch'
            'errclear'
            'error'
            'error_table'
            'exists'
            'exit'
            'extraction'
            'for'
            'function'
            'getdebuginfo'
            'getmemory'
            'getmodules'
            'getos'
            'getscilabmode'
            'getshell'
            'getvariablesonstack'
            'getversion'
            'global'
            'great'
            'gstacksize'
            'hat'
            'if'
            'isdef'
            'iserror'
            'isglobal'
            'lasterror'
            'minus'
            'names'
            'not'
            'parentheses'
            'pause'
            'percent'
            'perl'
            'plus'
            'power'
            'predef'
            'quit'
            'quote'
            'resume'
            'return'
            'scilab'
            'select'
            'semicolon'
            'setbpt'
            'slash'
            'stacksize'
            'star'
            'startup'
            'symbols'
            'then'
            'tilde'
            'ver'
            'warning'
            'where'
            'whereami'
            'while'
            'who'
            'who_user'
            'whos'
            'with_javasci'
            'with_macros_source'
            'with_module'
            'with_tk')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func begin'
      ConditionList = <
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'func end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%sz0'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endfunction')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block begin'
      ConditionList = <
        item
          TagList.Strings = (
            'for'
            'if'
            'select'
            'try'
            'while')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end'
            'return')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'test('#39'Base'#39')'
    'n = %nan + %pi + TMPDIR'
    'n = 1+ .1 + 1.1 + .1e1+ 1.1e1+ 1e1+ 1d2'
    ''
    '// Polynomial'
    'function [u]=polyfit(x,y,n)'
    '      // Vandermonde'
    '      for k=n:-1:0'
    '          if k==n then w=0;'
    '          end'
    '          w=w+1;'
    '          Xu(:,w)=[x.^k]; //yes, i remove two lines'
    '      end'
    ''
    '      for o=1:length(s)'
    '          u(find(k(:,o)>0))=s(o);'
    '      end'
    'endfunction'
    ''
    'function [y]=polyval(u,x,n)'
    '      for k=1:n+1'
    '          if k==1 then y=[];'
    '          end'
    '      end'
    'endfunction')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number')
  Extentions = 'sce sci'
  LexerName = 'Scilab'
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
