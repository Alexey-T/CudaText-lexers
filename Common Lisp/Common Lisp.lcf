object SyntAnalCL: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clScrollBar
    end
    item
      DisplayName = 'Brackets'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Current block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Global variable'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*|'#13#10'(?s) \#\| (\#\| .+? \|\# |.)*? \|\#'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '\'#39'[\w-+!@\#:$%^&*\\./\d"'#39']+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"(\\"|.)*?(\")'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Brackets'
      StyleName = 'Brackets'
      TokenType = 6
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Constant'
      StyleName = 'Global variable'
      Expression = '(?<=[\s(])\+[\w-+!@\#$%^&*./\d]+\+(?=[\s)])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Parameter'
      StyleName = 'Global variable'
      Expression = '(?<=[\s(])\*[\w-+!@\#$%^&*./\d]+\*(?=[\s)])|(?<=[\s(])\%[\w-+!@\#$%^&*./\d]+\%(?=[\s)])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Function call'
      TokenType = 7
      Expression = '(?<=\()[a-z-+!%\d]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(?<=[\s(])\d+\.\d+ (e[\+\-]\d+)?(?=[\s)])|(?<=[\s(])\d+(?=[\s)])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Character'
      StyleName = 'String'
      Expression = '\#\\\w+|\#\\\S'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Keyword'
      StyleName = 'Symbol'
      Expression = '(?<=[\s\(])\#?:[\w-+/.*%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Function special parameter'
      StyleName = 'Symbol'
      Expression = '\&[a-z-]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = '('
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 64
        end>
      BlockEnd = ')'
      NameFmt = '%sz0'
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 64
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Functions and macros'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '*'
            '+'
            '-'
            '/'
            '/='
            '1+'
            '1-'
            '<'
            '<='
            '='
            '>'
            '>='
            'abort'
            'abs'
            'acons'
            'acos'
            'acosh'
            'add-method'
            'adjoin'
            'adjust-array'
            'adjustable-array-p'
            'allocate-instance'
            'alpha-char-p'
            'alphanumericp'
            'and'
            'append'
            'apply'
            'apropos'
            'apropos-list'
            'aref'
            'arithmetic-error-operands'
            'arithmetic-error-operation'
            'array-dimension'
            'array-dimensions'
            'array-displacement'
            'array-element-type'
            'array-has-fill-pointer-p'
            'array-in-bounds-p'
            'array-rank'
            'array-row-major-index'
            'array-total-size'
            'arrayp'
            'ash'
            'asin'
            'asinh'
            'assert'
            'assoc'
            'assoc-if'
            'assoc-if-not'
            'atan'
            'atanh'
            'atom'
            'bit'
            'bit-and'
            'bit-andc1'
            'bit-andc2'
            'bit-eqv'
            'bit-ior'
            'bit-nand'
            'bit-nor'
            'bit-not'
            'bit-orc1'
            'bit-orc2'
            'bit-vector-p'
            'bit-xor'
            'block'
            'boole'
            'both-case-p'
            'boundp'
            'break'
            'broadcast-stream-streams'
            'butlast'
            'byte'
            'byte-position'
            'byte-size'
            'caaaar'
            'caaadr'
            'caaar'
            'caadar'
            'caaddr'
            'caadr'
            'caar'
            'cadaar'
            'cadadr'
            'cadar'
            'caddar'
            'cadddr'
            'caddr'
            'cadr'
            'call-method'
            'car'
            'case'
            'catch'
            'ccase'
            'cdaaar'
            'cdaadr'
            'cdaar'
            'cdadar'
            'cdaddr'
            'cdadr'
            'cdar'
            'cddaar'
            'cddadr'
            'cddar'
            'cdddar'
            'cddddr'
            'cdddr'
            'cddr'
            'cdr'
            'ceiling'
            'cell-error-name'
            'cerror'
            'change-class'
            'char'
            'char-code'
            'char-downcase'
            'char-equal'
            'char-greaterp'
            'char-int'
            'char-lessp'
            'char-name'
            'char-not-equal'
            'char-not-greaterp'
            'char-not-lessp'
            'char-upcase'
            'char/='
            'char<'
            'char<='
            'char='
            'char>'
            'char>='
            'character'
            'characterp'
            'check-type'
            'cis'
            'class-name'
            'class-of'
            'clear-input'
            'clear-output'
            'close'
            'clrhash'
            'code-char'
            'coerce'
            'compile'
            'compile-file'
            'compile-file-pathname'
            'compiled-function-p'
            'compiler-macro-function'
            'complement'
            'complex'
            'complexp'
            'compute-applicable-methods'
            'compute-restarts'
            'concatenate'
            'concatenated-stream-streams'
            'cond'
            'conjugate'
            'cons'
            'consp'
            'constantly'
            'constantp'
            'continue'
            'copy-alist'
            'copy-list'
            'copy-pprint-dispatch'
            'copy-readtable'
            'copy-seq'
            'copy-structure'
            'copy-symbol'
            'copy-tree'
            'cos'
            'cosh'
            'count'
            'count-if'
            'count-if-not'
            'ctypecase'
            'decf'
            'declaim'
            'decode-float'
            'decode-universal-time'
            'defclass'
            'defconstant'
            'defgeneric'
            'define-compiler-macro'
            'define-condition'
            'define-method-combination'
            'define-modify-macro'
            'define-setf-expander'
            'define-symbol-macro'
            'defmacro'
            'defmethod'
            'defpackage'
            'defparameter'
            'defsetf'
            'defstruct'
            'deftype'
            'defun'
            'defvar'
            'delete'
            'delete-duplicates'
            'delete-file'
            'delete-if'
            'delete-if-not'
            'delete-package'
            'denominator'
            'deposit-field'
            'describe'
            'describe-object'
            'destructuring-bind'
            'digit-char'
            'digit-char-p'
            'directory'
            'directory-namestring'
            'disassemble'
            'do'
            'do*'
            'do-all-symbols'
            'do-external-symbols'
            'do-symbols'
            'documentation'
            'dolist'
            'dotimes'
            'dpb'
            'dribble'
            'ecase'
            'echo-stream-input-stream'
            'echo-stream-output-stream'
            'ed'
            'eighth'
            'elt'
            'encode-universal-time'
            'endp'
            'enough-namestring'
            'ensure-directories-exist'
            'ensure-generic-function'
            'eq'
            'eql'
            'equal'
            'equalp'
            'error'
            'etypecase'
            'eval'
            'eval-when'
            'evenp'
            'every'
            'exp'
            'export'
            'expt'
            'fboundp'
            'fceiling'
            'fdefinition'
            'ffloor'
            'fifth'
            'file-author'
            'file-error-pathname'
            'file-length'
            'file-namestring'
            'file-position'
            'file-string-length'
            'file-write-date'
            'fill'
            'fill-pointer'
            'find'
            'find-all-symbols'
            'find-class'
            'find-if'
            'find-if-not'
            'find-method'
            'find-package'
            'find-restart'
            'find-symbol'
            'finish-output'
            'first'
            'flet'
            'float'
            'float-digits'
            'float-precision'
            'float-radix'
            'float-sign'
            'floatp'
            'floor'
            'fmakunbound'
            'force-output'
            'format'
            'formatter'
            'fourth'
            'fresh-line'
            'fround'
            'ftruncate'
            'funcall'
            'function'
            'function-keywords'
            'function-lambda-expression'
            'functionp'
            'gcd'
            'gensym'
            'gentemp'
            'get'
            'get-decoded-time'
            'get-dispatch-macro-character'
            'get-internal-real-time'
            'get-internal-run-time'
            'get-macro-character'
            'get-output-stream-string'
            'get-properties'
            'get-setf-expansion'
            'get-universal-time'
            'getf'
            'gethash'
            'go'
            'graphic-char-p'
            'handler-bind'
            'handler-case'
            'hash-table-count'
            'hash-table-p'
            'hash-table-rehash-size'
            'hash-table-rehash-threshold'
            'hash-table-size'
            'hash-table-test'
            'host-namestring'
            'identity'
            'if'
            'ignore-errors'
            'imagpart'
            'import'
            'in-package'
            'incf'
            'initialize-instance'
            'input-stream-p'
            'inspect'
            'integer-decode-float'
            'integer-length'
            'integerp'
            'interactive-stream-p'
            'intern'
            'intersection'
            'invalid-method-error'
            'invoke-debugger'
            'invoke-restart'
            'invoke-restart-interactively'
            'isqrt'
            'keywordp'
            'labels'
            'lambda'
            'last'
            'lcm'
            'ldb'
            'ldb-test'
            'ldiff'
            'length'
            'let'
            'let*'
            'lisp-implementation-type'
            'lisp-implementation-version'
            'list'
            'list*'
            'list-all-packages'
            'list-length'
            'listen'
            'listp'
            'load'
            'load-logical-pathname-translations'
            'load-time-value'
            'locally'
            'log'
            'logand'
            'logandc1'
            'logandc2'
            'logbitp'
            'logcount'
            'logeqv'
            'logical-pathname'
            'logical-pathname-translations'
            'logior'
            'lognand'
            'lognor'
            'lognot'
            'logorc1'
            'logorc2'
            'logtest'
            'logxor'
            'long-site-name'
            'loop'
            'loop-finish'
            'lower-case-p'
            'machine-instance'
            'machine-type'
            'machine-version'
            'macro-function'
            'macroexpand'
            'macroexpand-1'
            'macrolet'
            'make-array'
            'make-broadcast-stream'
            'make-concatenated-stream'
            'make-condition'
            'make-dispatch-macro-character'
            'make-echo-stream'
            'make-hash-table'
            'make-instance'
            'make-instances-obsolete'
            'make-list'
            'make-load-form'
            'make-load-form-saving-slots'
            'make-package'
            'make-pathname'
            'make-random-state'
            'make-sequence'
            'make-string'
            'make-string-input-stream'
            'make-string-output-stream'
            'make-symbol'
            'make-synonym-stream'
            'make-two-way-stream'
            'makunbound'
            'map'
            'map-into'
            'mapc'
            'mapcan'
            'mapcar'
            'mapcon'
            'maphash'
            'mapl'
            'maplist'
            'mask-field'
            'max'
            'member'
            'member-if'
            'member-if-not'
            'merge'
            'merge-pathnames'
            'method-combination-error'
            'method-qualifiers'
            'min'
            'minusp'
            'mismatch'
            'mod'
            'muffle-warning'
            'multiple-value-bind'
            'multiple-value-call'
            'multiple-value-list'
            'multiple-value-prog1'
            'multiple-value-setq'
            'name-char'
            'namestring'
            'nbutlast'
            'nconc'
            'nintersection'
            'ninth'
            'no-applicable-method'
            'no-next-method'
            'not'
            'notany'
            'notevery'
            'nreconc'
            'nreverse'
            'nset-difference'
            'nset-exclusive-or'
            'nstring-capitalize'
            'nstring-downcase'
            'nstring-upcase'
            'nsublis'
            'nsubst'
            'nsubst-if'
            'nsubst-if-not'
            'nsubstitute'
            'nsubstitute-if'
            'nsubstitute-if-not'
            'nth'
            'nth-value'
            'nthcdr'
            'null'
            'numberp'
            'numerator'
            'nunion'
            'oddp'
            'open'
            'open-stream-p'
            'or'
            'output-stream-p'
            'package-error-package'
            'package-name'
            'package-nicknames'
            'package-shadowing-symbols'
            'package-use-list'
            'package-used-by-list'
            'packagep'
            'pairlis'
            'parse-integer'
            'parse-namestring'
            'pathname'
            'pathname-device'
            'pathname-directory'
            'pathname-host'
            'pathname-match-p'
            'pathname-name'
            'pathname-type'
            'pathname-version'
            'pathnamep'
            'peek-char'
            'phase'
            'plusp'
            'pop'
            'position'
            'position-if'
            'position-if-not'
            'pprint'
            'pprint-dispatch'
            'pprint-exit-if-list-exhausted'
            'pprint-fill'
            'pprint-indent'
            'pprint-linear'
            'pprint-logical-block'
            'pprint-newline'
            'pprint-pop'
            'pprint-tab'
            'pprint-tabular'
            'prin1'
            'prin1-to-string'
            'princ'
            'princ-to-string'
            'print'
            'print-not-readable-object'
            'print-object'
            'print-unreadable-object'
            'probe-file'
            'proclaim'
            'prog'
            'prog*'
            'prog1'
            'prog2'
            'progn'
            'progv'
            'provide'
            'psetf'
            'psetq'
            'push'
            'pushnew'
            'quote'
            'random'
            'random-state-p'
            'rassoc'
            'rassoc-if'
            'rassoc-if-not'
            'rational'
            'rationalize'
            'rationalp'
            'read'
            'read-byte'
            'read-char'
            'read-char-no-hang'
            'read-delimited-list'
            'read-from-string'
            'read-line'
            'read-preserving-whitespace'
            'read-sequence'
            'readtable-case'
            'readtablep'
            'realp'
            'realpart'
            'reduce'
            'reinitialize-instance'
            'rem'
            'remf'
            'remhash'
            'remove'
            'remove-duplicates'
            'remove-if'
            'remove-if-not'
            'remove-method'
            'remprop'
            'rename-file'
            'rename-package'
            'replace'
            'require'
            'rest'
            'restart-bind'
            'restart-case'
            'restart-name'
            'return'
            'return-from'
            'revappend'
            'reverse'
            'room'
            'rotatef'
            'round'
            'row-major-aref'
            'rplaca'
            'rplacd'
            'sbit'
            'scale-float'
            'schar'
            'search'
            'second'
            'set'
            'set-difference'
            'set-dispatch-macro-character'
            'set-exclusive-or'
            'set-macro-character'
            'set-pprint-dispatch'
            'set-syntax-from-char'
            'setf'
            'setq'
            'seventh'
            'shadow'
            'shadowing-import'
            'shared-initialize'
            'shiftf'
            'short-site-name'
            'signal'
            'signum'
            'simple-bit-vector-p'
            'simple-condition-format-arguments'
            'simple-condition-format-control'
            'simple-string-p'
            'simple-vector-p'
            'sin'
            'sinh'
            'sixth'
            'sleep'
            'slot-boundp'
            'slot-exists-p'
            'slot-makunbound'
            'slot-missing'
            'slot-unbound'
            'slot-value'
            'software-type'
            'software-version'
            'some'
            'sort'
            'special-operator-p'
            'sqrt'
            'stable-sort'
            'standard-char-p'
            'step'
            'store-value'
            'stream-element-type'
            'stream-error-stream'
            'stream-external-format'
            'streamp'
            'string'
            'string-capitalize'
            'string-downcase'
            'string-equal'
            'string-greaterp'
            'string-left-trim'
            'string-lessp'
            'string-not-equal'
            'string-not-greaterp'
            'string-not-lessp'
            'string-right-trim'
            'string-trim'
            'string-upcase'
            'string/='
            'string<'
            'string<='
            'string='
            'string>'
            'string>='
            'stringp'
            'sublis'
            'subseq'
            'subsetp'
            'subst'
            'subst-if'
            'subst-if-not'
            'substitute'
            'substitute-if'
            'substitute-if-not'
            'subtypep'
            'svref'
            'sxhash'
            'symbol-function'
            'symbol-macrolet'
            'symbol-name'
            'symbol-package'
            'symbol-plist'
            'symbol-value'
            'symbolp'
            'synonym-stream-symbol'
            'tagbody'
            'tailp'
            'tan'
            'tanh'
            'tenth'
            'terpri'
            'the'
            'third'
            'throw'
            'time'
            'trace'
            'translate-logical-pathname'
            'translate-pathname'
            'tree-equal'
            'truename'
            'truncate'
            'two-way-stream-input-stream'
            'two-way-stream-output-stream'
            'type-error-datum'
            'type-error-expected-type'
            'type-of'
            'typecase'
            'typep'
            'unbound-slot-instance'
            'unexport'
            'unintern'
            'union'
            'unless'
            'unread-char'
            'untrace'
            'unuse-package'
            'unwind-protect'
            'update-instance-for-different-class'
            'update-instance-for-redefined-class'
            'upgraded-array-element-type'
            'upgraded-complex-part-type'
            'upper-case-p'
            'use-package'
            'use-value'
            'user-homedir-pathname'
            'values'
            'values-list'
            'vector'
            'vector-pop'
            'vector-push'
            'vector-push-extend'
            'vectorp'
            'warn'
            'when'
            'wild-pathname-p'
            'with-accessors'
            'with-compilation-unit'
            'with-condition-restarts'
            'with-hash-table-iterator'
            'with-input-from-string'
            'with-open-file'
            'with-open-stream'
            'with-output-to-string'
            'with-package-iterator'
            'with-simple-restart'
            'with-slots'
            'with-standard-io-syntax'
            'write'
            'write-byte'
            'write-char'
            'write-line'
            'write-sequence'
            'write-string'
            'write-to-string'
            'y-or-n-p'
            'yes-or-no-p'
            'zerop')
          TokenTypes = 128
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
 SampleText.Strings = (
    '(defpackage #:pkg'
    #9'(:use :cl))'
    ''
    '; Comment'
    '#|'
    #9'Multiline'
    #9'comment'
    '|#'
    ''
    '(defvar *value*'
    #9'(list string'
    #9#9#39'(value 1 "single string" '#39's\y/m.b_o:l #\a)'
    #9#9'(:a #\Newline :b #\))'
    #9#9'#(1.0 (char-code #\") %value%)'
    #9#9':keyword #:unintern #'#39'fn '#39'symbol '#39'pkg:symbol'
    #9#9'#'#39'(lambda (a :key c) a))'
    ''
    '(defmacro main (val &optional &rest args)'
    #9'"Multiline'
    #9'string"'
    #9'(let ((*value* (+ 0xFF 100)))'
    #9#9'`(format t "\"~a\"" *value* ,@args)))')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Brackets'
    'Function')
  Extentions = 'lisp'
  LexerName = 'Common Lisp'
  LineComment = ';'
  Notes.Strings = (
    'X4J14 Project (https://codeberg.org/x4j14)'
    'Full list (752) of functions and macros.')
  AlwaysSyncBlockAnal = True
  Charset = DEFAULT_CHARSET
end