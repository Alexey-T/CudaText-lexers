object SyntAnal15: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '!.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}~@]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'access'
            'action'
            'advance'
            'allocatable'
            'allocate'
            'apostrophe'
            'assign'
            'assignment'
            'associate'
            'asynchronous'
            'backspace'
            'bind'
            'blank'
            'blockdata'
            'call'
            'case'
            'character'
            'class'
            'close'
            'common'
            'complex'
            'contains'
            'continue'
            'cycle'
            'data'
            'deallocate'
            'decimal'
            'default'
            'delim'
            'dimension'
            'direct'
            'do'
            'double'
            'doubleprecision'
            'dowhile'
            'else'
            'elseif'
            'elsewhere'
            'encoding'
            'end'
            'endassociate'
            'endblockdata'
            'enddo'
            'endfile'
            'endforall'
            'endfunction'
            'endif'
            'endinterface'
            'endmodule'
            'endprogram'
            'endselect'
            'endsubroutine'
            'endtype'
            'endwhere'
            'entry'
            'eor'
            'equivalence'
            'err'
            'errmsg'
            'exist'
            'exit'
            'external'
            'file'
            'flush'
            'fmt'
            'forall'
            'form'
            'format'
            'formatted'
            'function'
            'go'
            'goto'
            'id'
            'if'
            'implicit'
            'in'
            'include'
            'inout'
            'inquire'
            'integer'
            'intent'
            'interface'
            'intrinsic'
            'iolength'
            'iomsg'
            'iostat'
            'kind'
            'len'
            'logical'
            'module'
            'name'
            'named'
            'namelist'
            'nextrec'
            'nml'
            'none'
            'nullify'
            'number'
            'only'
            'open'
            'opened'
            'operator'
            'optional'
            'out'
            'pad'
            'parameter'
            'pass'
            'pause'
            'pending'
            'pointer'
            'pos'
            'position'
            'precision'
            'print'
            'private'
            'program'
            'protected'
            'public'
            'quote'
            'read'
            'readwrite'
            'real'
            'rec'
            'recl'
            'recursive'
            'result'
            'return'
            'rewind'
            'save'
            'select'
            'selectcase'
            'selecttype'
            'sequential'
            'sign'
            'size'
            'stat'
            'status'
            'stop'
            'stream'
            'subroutine'
            'target'
            'then'
            'to'
            'type'
            'unformatted'
            'unit'
            'use'
            'value'
            'volatile'
            'wait'
            'where'
            'while'
            'write')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Std functions'
      StyleName = 'Id std func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'achar'
            'acos'
            'acosd'
            'adjustl'
            'adjustr'
            'aimag'
            'aimax0'
            'aimin0'
            'aint'
            'ajmax0'
            'ajmin0'
            'akmax0'
            'akmin0'
            'all'
            'allocated'
            'alog'
            'alog10'
            'amax0'
            'amax1'
            'amin0'
            'amin1'
            'amod'
            'anint'
            'any'
            'asin'
            'asind'
            'associated'
            'atan'
            'atan2'
            'atan2d'
            'atand'
            'bit_size'
            'bitest'
            'bitl'
            'bitlr'
            'bitrl'
            'bjtest'
            'bktest'
            'break'
            'btest'
            'cabs'
            'ccos'
            'cdabs'
            'cdcos'
            'cdexp'
            'cdlog'
            'cdsin'
            'cdsqrt'
            'ceiling'
            'cexp'
            'char'
            'clog'
            'cmplx'
            'conjg'
            'cos'
            'cosd'
            'cosh'
            'count'
            'cpu_time'
            'cshift'
            'csin'
            'csqrt'
            'dabs'
            'dacos'
            'dacosd'
            'dasin'
            'dasind'
            'datan'
            'datan2'
            'datan2d'
            'datand'
            'date'
            'date_and_time'
            'dble'
            'dcmplx'
            'dconjg'
            'dcos'
            'dcosd'
            'dcosh'
            'dcotan'
            'ddim'
            'dexp'
            'dfloat'
            'dfloti'
            'dflotj'
            'dflotk'
            'digits'
            'dim'
            'dimag'
            'dint'
            'dlog'
            'dlog10'
            'dmax1'
            'dmin1'
            'dmod'
            'dnint'
            'dot_product'
            'dprod'
            'dreal'
            'dsign'
            'dsin'
            'dsind'
            'dsinh'
            'dsqrt'
            'dtan'
            'dtand'
            'dtanh'
            'eoshift'
            'epsilon'
            'errsns'
            'exp'
            'exponent'
            'float'
            'floati'
            'floatj'
            'floatk'
            'floor'
            'fraction'
            'free'
            'huge'
            'iabs'
            'iachar'
            'iand'
            'ibclr'
            'ibits'
            'ibset'
            'ichar'
            'idate'
            'idim'
            'idint'
            'idnint'
            'ieor'
            'ifix'
            'iiabs'
            'iiand'
            'iibclr'
            'iibits'
            'iibset'
            'iidim'
            'iidint'
            'iidnnt'
            'iieor'
            'iifix'
            'iint'
            'iior'
            'iiqint'
            'iiqnnt'
            'iishft'
            'iishftc'
            'iisign'
            'ilen'
            'imax0'
            'imax1'
            'imin0'
            'imin1'
            'imod'
            'index'
            'inint'
            'inot'
            'int'
            'int1'
            'int2'
            'int4'
            'int8'
            'ior'
            'iqint'
            'iqnint'
            'ishft'
            'ishftc'
            'isign'
            'isnan'
            'izext'
            'jiand'
            'jibclr'
            'jibits'
            'jibset'
            'jidim'
            'jidint'
            'jidnnt'
            'jieor'
            'jifix'
            'jint'
            'jior'
            'jiqint'
            'jiqnnt'
            'jishft'
            'jishftc'
            'jisign'
            'jmax0'
            'jmax1'
            'jmin0'
            'jmin1'
            'jmod'
            'jnint'
            'jnot'
            'jzext'
            'kiabs'
            'kiand'
            'kibclr'
            'kibits'
            'kibset'
            'kidim'
            'kidint'
            'kidnnt'
            'kieor'
            'kifix'
            'kind'
            'kint'
            'kior'
            'kishft'
            'kishftc'
            'kisign'
            'kmax0'
            'kmax1'
            'kmin0'
            'kmin1'
            'kmod'
            'knint'
            'knot'
            'kzext'
            'lbound'
            'leadz'
            'len'
            'len_trim'
            'lenlge'
            'lge'
            'lgt'
            'lle'
            'llt'
            'log'
            'log10'
            'logical'
            'lshift'
            'malloc'
            'matmul'
            'max'
            'max0'
            'max1'
            'maxexponent'
            'maxloc'
            'maxval'
            'merge'
            'min'
            'min0'
            'min1'
            'minexponent'
            'minloc'
            'minval'
            'mod'
            'modulo'
            'mvbits'
            'nearest'
            'nint'
            'not'
            'number_of_processors'
            'nworkers'
            'pack'
            'popcnt'
            'poppar'
            'precision'
            'present'
            'product'
            'radix'
            'random'
            'random_number'
            'random_seed'
            'range'
            'real'
            'repeat'
            'reshape'
            'rrspacing'
            'rshift'
            'scale'
            'scan'
            'secnds'
            'selected_int_kind'
            'selected_real_kind'
            'set_exponent'
            'shape'
            'sign'
            'sin'
            'sind'
            'sinh'
            'size'
            'sizeof'
            'sngl'
            'snglq'
            'spacing'
            'spread'
            'sqrt'
            'sum'
            'system_clock'
            'tan'
            'tand'
            'tanh'
            'tiny'
            'transfer'
            'transpose'
            'trim'
            'ubound'
            'unpack'
            'verify')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Tree item'
      Enabled = False
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function'
            'program')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = -1
      NameFmt = '%s-1 %s-2'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if begin'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = -1
      BlockEnd = 'if end'
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'else'
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do begin'
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockOffset = -1
      BlockEnd = 'do end'
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func begin'
      ConditionList = <
        item
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'func end'
      NameFmt = '%s-1 %s-2'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '%s-1 %s-2'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    
      '! --------------------------------------------------------------' +
      '------'
    '!    This program solves equations with the Bisection Method.'
    
      '! --------------------------------------------------------------' +
      '------'
    ''
    'PROGRAM  Bisection'
    '   IMPLICIT  NONE'
    ''
    '   REAL, PARAMETER :: Tolerance = 0.00001'
    '   REAL            :: Left,  fLeft'
    '   REAL            :: Right, fRight'
    '   REAL            :: Root'
    ''
    '   WRITE(*,*)  '#39'This program can solves equation F(x) = 0'#39
    
      '   WRITE(*,*)  '#39'Please enter two values Left and Right such that' +
      ' '#39
    '   WRITE(*,*)  '#39'F(Left) and F(Right) have opposite signs.'#39
    '   WRITE(*,*)'
    '   WRITE(*,*)  '#39'Left and Right please --> '#39
    '   READ(*,*)   Left, Right              ! read in Left and Right'
    ''
    
      '   fLeft  = Funct(Left)                 ! compute their function' +
      ' values'
    '   fRight = Funct(Right)'
    '   WRITE(*,*)'
    '   WRITE(*,*)  '#39'Left = '#39', Left, '#39'    f(Left) = '#39', fLeft'
    '   WRITE(*,*)  '#39'Right = '#39', Right, '#39'   f(Right) = '#39', fRight'
    '   WRITE(*,*)'
    '   IF (fLeft*fRight > 0.0)  THEN'
    
      '      WRITE(*,*)  '#39'*** ERROR: f(Left)*f(Right) must be negative ' +
      '***'#39
    '   ELSE'
    '      Root = Solve(Left, Right, Tolerance)'
    '      WRITE(*,*)  '#39'A root is '#39', Root'
    '   END IF'
    ''
    'CONTAINS'
    ''
    
      '! --------------------------------------------------------------' +
      '------'
    '! REAL FUNCTION  Funct()'
    
      '! --------------------------------------------------------------' +
      '------'
    ''
    '   REAL FUNCTION  Funct(x)'
    '      IMPLICIT  NONE'
    '      REAL, INTENT(IN) :: x'
    '      REAL, PARAMETER  :: PI = 3.1415926'
    '      REAL, PARAMETER  :: a  = 0.8475'
    ''
    '      Funct = SQRT(PI/2.0)*EXP(a*x) + x/(a*a + x*x)'
    ''
    '   END FUNCTION  Funct'
    ''
    
      '! --------------------------------------------------------------' +
      '------'
    '! REAL FUNCTION  Solve()'
    
      '! --------------------------------------------------------------' +
      '------'
    ''
    '   REAL FUNCTION  Solve(Left, Right, Tolerance)'
    '      IMPLICIT  NONE'
    '      REAL, INTENT(IN) :: Left, Right, Tolerance'
    '      REAL             :: a, Fa, b, Fb, c, Fc'
    ''
    '      a = Left                          ! save Left and Right'
    '      b = Right'
    ''
    
      '      Fa = Funct(a)                     ! compute the function v' +
      'alues'
    '      Fb = Funct(b)'
    
      '      IF (ABS(Fa) < Tolerance) THEN     ! if f(a) is already sma' +
      'll'
    '         Solve = a                      ! then a is a root'
    '      ELSE IF (ABS(Fb) < Tolerance) THEN     ! is f(b) is small'
    '         Solve = b                      ! then b is a root'
    '      ELSE                              ! otherwise,'
    '         DO                             ! iterate ....'
    
      '            c  = (a + b)/2.0            !   compute the middle p' +
      'oint'
    
      '            Fc = Funct(c)               !   and its function val' +
      'ue'
    '            IF (ABS(Fc) < Tolerance) THEN    ! is it very small?'
    '               Solve = c                ! yes, c is a root'
    '               EXIT'
    '            ELSE IF (Fa*Fc < 0.0) THEN  ! do f(a)*f(c) < 0 ?'
    '               b  = c                   ! replace b with c'
    '               Fb = Fc                  ! and f(b) with f(c)'
    
      '            ELSE                        ! then f(c)*f(b) < 0 hol' +
      'ds'
    '               a  = c                   ! replace a with c'
    '               Fa = Fc                  ! and f(a) with f(c)'
    '            END IF'
    
      '         END DO                         ! go back and do it agai' +
      'n'
    '      END IF'
    '   END FUNCTION  Solve'
    ''
    'END PROGRAM  Bisection')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'f for f90 f95 f2k'
  LexerName = 'Fortran'
  Notes.Strings = (
    'Alexey (SynWrite)'
    'Based on original from EControl SDK')
  LineComment = '!'
  Charset = DEFAULT_CHARSET
end
