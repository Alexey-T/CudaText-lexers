object SyntAnal34: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(\#|//) .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String 2'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) @" (.)*? "'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d* e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:~\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'base'
            'break'
            'case'
            'catch'
            'class'
            'clone'
            'const'
            'constructor'
            'continue'
            'default'
            'delete'
            'do'
            'else'
            'enum'
            'extends'
            'false'
            'for'
            'foreach'
            'function'
            'if'
            'in'
            'instanceof'
            'local'
            'null'
            'resume'
            'return'
            'static'
            'switch'
            'this'
            'throw'
            'true'
            'try'
            'typeof'
            'while'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'acos'
            'append'
            'apply'
            'array'
            'asin'
            'atan'
            'atan2'
            'capture'
            'ceil'
            'clear'
            'compilestring'
            'cos'
            'date'
            'dofile'
            'error'
            'exp'
            'extend'
            'fabs'
            'file'
            'find'
            'floor'
            'format'
            'getclass'
            'getconsttable'
            'getroottable'
            'getstackinfos'
            'insert'
            'instance'
            'len'
            'log'
            'log10'
            'lstrip'
            'map'
            'match'
            'parent'
            'PI'
            'pop'
            'pow'
            'print'
            'push'
            'rand'
            'RAND_MAX'
            'rawdelete'
            'rawget'
            'rawin'
            'rawset'
            'regexp'
            'remove'
            'resize'
            'reverse'
            'rstrip'
            'search'
            'sin'
            'slice'
            'sort'
            'split'
            'sqrt'
            'srand'
            'system'
            'tan'
            'time'
            'tochar'
            'tofloat'
            'tointeger'
            'tolower'
            'top'
            'tostring'
            'toupper'
            'type'
            'vargc'
            'vargv')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      BlockEnd = '{'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func ::'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      NameFmt = 'func %s-4'
      GroupFmt = 'class %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            ':')
          CondType = tcNotEqual
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      NameFmt = 'func %s-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = 'func %s-1'
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      NameFmt = 'class %s-1'
      HighlightPos = cpAny
      CollapseFmt = 'class %s-1'
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/*From Squirrel pack'
    '*/'
    ''
    'class Toggle {'
    '    bool=null'
    '}'
    ''
    'function Toggle::constructor(startstate) {'
    '    bool = startstate'
    '}'
    ''
    'function Toggle::value() {'
    '    return bool;'
    '}'
    ''
    'function Toggle::activate() {'
    '    bool = !bool;'
    '    return this;'
    '}'
    ''
    'class NthToggle extends Toggle {'
    '    count_max=null'
    '    count=0'
    '}'
    ''
    'function NthToggle::constructor(start_state,max_counter)'
    '{'
    '    base.constructor(start_state);'
    '    count_max = max_counter'
    '}'
    ''
    'function NthToggle::activate ()'
    '{'
    '    ++count;'
    '    if (count >= count_max ) {'
    '      base.activate();'
    '      count = 0;'
    '    }'
    '    return this;'
    '}'
    ''
    ''
    'function main() {'
    '    local n = vargv.len()!=0?vargv[0].tointeger():1'
    ''
    '    local ntoggle = NthToggle(val, 3);'
    '    while(i--) {'
    '      val = ntoggle.activate().value();'
    '    }'
    '    print(ntoggle.value() ? "true\n" : "false\n");'
    ''
    '}'
    'local start=clock();'
    'main();'
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'nut'
  LexerName = 'Squirrel'
  Notes.Strings = (
    'Alexey (SynWrite)'
    'Keywords: https://github.com/iAmRoland/Sublime-Squirrel')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
