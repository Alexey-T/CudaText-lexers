object SyntAnal18: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String tick'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '@Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '#Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment empty'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '/\*\*/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"(\\.|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String tick'
      StyleName = 'String tick'
      TokenType = 9
      Expression = '(?s)`.*?(`|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'[^'#39']{1,2}'#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag'
      StyleName = 'Tag'
      TokenType = 6
      Expression = '(?<=\s</?)[\w\.]+(?=[\x20/>\n])'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[0-9a-f_]+[ln]?\b|'#13#10'0b[01_]+[ln]?\b|'#13#10'0o[0-7_]+[ln]?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]*(\.[\d_]*)?e[\+\-]? \d[\d_]*\b|'#13#10'\d[\d_]*\.[\d_]+\b|'#13#10'\d' +
        '[\d_]*\.|'#13#10'\.\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b\d[\d_]*[ln]?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@Id'
      StyleName = '@Id'
      TokenType = 10
      Expression = '(%%?|@@?)[a-z_][\w\.]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '#Id'
      StyleName = '#Id'
      TokenType = 11
      Expression = '[\#'#39'][a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol { }'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        ':=|:>|/\.|[\[\],;:\?/~%\#@]|\.+|'#13#10'\->|=>|\+\+|\-\-|\|\||&&|'#13#10'[!\' +
        '-\+\*/=<>&\|\^]=*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'as'
            'assert'
            'constraint'
            'else'
            'exception'
            'external'
            'for'
            'if'
            'in'
            'include'
            'lazy'
            'let'
            'module'
            'mutable'
            'of'
            'open'
            'rec'
            'switch'
            'try'
            'type'
            'when'
            'while'
            'with')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'false'
            'float'
            'int'
            'string'
            'true'
            'unit'
            'unknown')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'module'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end
        item
          TagList.Strings = (
            ':'
            '=')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'module')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'module %s-1 ...'
      TreeItemImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 256
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 256
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = ']'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '[ ... ]'
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'type'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'type')
          TokenTypes = 4
        end>
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = 'type %s-1 ...'
      NoEndRule = True
      TreeItemImage = 1
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Comment'
    'let s = `test`+'#39'a'#39'+10L+0xFFn+1.2e-3 /* Comment'
    '*/'
    'module Warning = {'
    '  @@test.component'
    '  let make = (~version: string, ~route: bool) => {'
    '    let latestUrl ='
    '      ("text/" ++ #Change(url.pagepath, "/")))'
    '    <div className="tt">'
    '    </div>'
    '  }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Tag'
    'Symbol ()'
    'Symbol {}'
    'String tick'
    '@Id'
    '#Id')
  Extentions = 'res resi'
  LexerName = 'ReScript'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
