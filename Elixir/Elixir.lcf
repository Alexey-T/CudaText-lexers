object SyntAnal41: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id atom'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String2'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) ("""|'#39#39#39') .*? (\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id atom'
      StyleName = 'Id atom'
      TokenType = 7
      Expression = ':\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      TokenType = 6
      Expression = '@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\$\.!%\\\?:~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'after'
            'alias'
            'bc'
            'case'
            'catch'
            'cond'
            'def'
            'defcallback'
            'defdelegate'
            'defexception'
            'defimpl'
            'defmacro'
            'defmacrocallback'
            'defmacrop'
            'defmodule'
            'defoverridable'
            'defp'
            'defprotocol'
            'defrecord'
            'defstruct'
            'do'
            'else'
            'end'
            'exit'
            'fn'
            'for'
            'if'
            'import'
            'lc'
            'quote'
            'raise'
            'receive'
            'require'
            'rescue'
            'super'
            'throw'
            'try'
            'unless'
            'unquote'
            'use')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'def tree item'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'def\w*'
            'quote')
          CondType = tcMask
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      BlockName = 'def tree item'
      NotParent = True
      ConditionList = <
        item
          TagList.Strings = (
            ':')
          CondType = tcNotEqual
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'do'
            'fn')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'do ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# There are numbers'
    '3    # integer'
    '0x1F # integer'
    '10.20  # float'
    ':hello # atom'
    ''
    ' @doc, @spec'
    ' """Str'
    ' str2""", '#39'char list'#39
    ''
    'defmodule NewRelixir.Mixfile do'
    '  use Mix.Project'
    ''
    '  def project do'
    '    [app: :new_relixir,'
    '     name: "New Relixir",'
    '     description: "New Relic tracking for Elixir applications.",'
    '     deps: deps]'
    '  end'
    ''
    '  defp deps do'
    '    [{:phoenix, "~> 1.1"},'
    '     {:ex_doc, "~> 0.11", only: :dev}]'
    '  end'
    ''
    'end')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Id@'
    'Id:')
  Extentions = 'ex exs'
  LexerName = 'Elixir'
  Notes.Strings = (
    'Alex (Synwrite)'
    'Tutor: '
    'https://learnxinyminutes.com/docs/elixir/')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
