object SyntAnal41: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Marked block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clHighlightText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clHighlight
      FormatType = ftColor
    end
    item
      DisplayName = 'Cmt'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Int'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Str'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symb'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'ResId'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Cmt'
      StyleName = 'Cmt'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'EndRec'
      StyleName = 'ResId'
      TokenType = 10
      Expression = 'end \s+ (record | case)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Int'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
        'hout exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Int'
      TokenType = 7
      Expression = '\d+\#[\dA-F]+\# (e\d+)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Int'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Str'
      StyleName = 'Str'
      TokenType = 4
      Expression = '(").*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'Str'
      TokenType = 8
      Expression = #39'.'#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symb'
      StyleName = 'Symb'
      TokenType = 3
      Expression = '[\-\+\*/\(\)\[\]<>~!@\#\$%\^\:;\.,\?\|&='#39']'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Key'
      StyleName = 'ResId'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'abs'
            'abstract'
            'accept'
            'access'
            'aliased'
            'all'
            'and'
            'array'
            'at'
            'begin'
            'body'
            'case'
            'constant'
            'declare'
            'delay'
            'delta'
            'digits'
            'do'
            'else'
            'elsif'
            'end'
            'entry'
            'exception'
            'exit'
            'for'
            'function'
            'generic'
            'goto'
            'if'
            'in'
            'is'
            'limited'
            'loop'
            'mod'
            'new'
            'not'
            'null'
            'of'
            'or'
            'others'
            'out'
            'package'
            'pragma'
            'private'
            'procedure'
            'protected'
            'raise'
            'range'
            'record'
            'rem'
            'renames'
            'requeue'
            'return'
            'reverse'
            'select'
            'separate'
            'subtype'
            'tagged'
            'task'
            'terminate'
            'then'
            'type'
            'until'
            'use'
            'when'
            'while'
            'with'
            'xor')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Rec'
      ConditionList = <
        item
          TagList.Strings = (
            'case'
            'record')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Rec end'
      DisplayInTree = False
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Rec end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 1024
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Pack'
      ConditionList = <
        item
          TagList.Strings = (
            'package')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Pack end'
      EndOfTextClose = True
      NameFmt = '%s0~[is]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '%s0 %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Pack end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end'
            'new')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func'
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'procedure')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Func end'
      NameFmt = '%s0 %s-1~[)]'
      HighlightPos = cpAny
      CollapseFmt = '%s0 %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'package WORD_SUPPORT_PACKAGE is'
    '  '
    '  type DICTIONARY_STEM is'
    '    record'
    '      case FF of'
    '        when N  => N : NOUN_ENTRY;'
    '        when PRON  => PRON : PRONOUN_ENTRY;'
    '      end case;'
    '    end record;'
    ''
    '  package STEM_IO is new DIRECT_IO(DICTIONARY_STEM);'
    '  package COUNT_IO is new TEXT_IO.INTEGER_IO(STEM_IO.COUNT);'
    '   '
    '  procedure DoNoPar;'
    '  procedure GET(F : in FILE_TYPE; P : out SUFFIX_ENTRY);'
    '  procedure GET(P : out SUFFIX_ENTRY);'
    
      '  function ADJ_COMP_FROM_KEY(KEY : STEM_KEY_TYPE) return COMPARI' +
      'SON_TYPE;'
    
      '  function ADV_COMP_FROM_KEY(KEY : STEM_KEY_TYPE) return COMPARI' +
      'SON_TYPE;'
    
      '  function NUM_SORT_FROM_KEY(KEY : STEM_KEY_TYPE) return NUMERAL' +
      '_SORT_TYPE;'
    
      '  function EFF_PART(PART : PART_OF_SPEECH_TYPE) return PART_OF_S' +
      'PEECH_TYPE;'
    '  function  LAST_INDEX(INPUT_WORD : STRING; '
    
      '              D_K : DICTIONARY_FILE_KIND := DEFAULT_DICTIONARY_F' +
      'ILE_KIND) '
    '                  return STEM_IO.COUNT;  '
    ''
    'end WORD_SUPPORT_PACKAGE;')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor'
    'EndRec')
  MarkedBlockStyle = 'Marked block'
  Extentions = 'ads'
  LexerName = 'Ada (.ads)'
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Test:'
    'http://users.erols.com/whitaker/wordsdev.htm')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
