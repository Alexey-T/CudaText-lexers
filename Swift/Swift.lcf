object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'If type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h[\h_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Octal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0o[0-7][0-7_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Binary'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0b[01][01_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(?-i)\b(0x\h[\h_]*)(\.(0x\h[\h_]*))?([pP][+\-]?(0x\h[\h_]*))\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b([0-9][0-9_]*)(\.([0-9][0-9_]*))?(e[+\-]?([0-9][0-9_]*))?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\?%\\@~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__COLUMN__'
            '__FILE__'
            '__FUNCTION__'
            '__LINE__'
            'as'
            'associativity'
            'break'
            'case'
            'catch'
            'class'
            'continue'
            'default'
            'defer'
            'deinit'
            'didSet'
            'do'
            'dynamicType'
            'else'
            'enum'
            'extension'
            'fallthrough'
            'for'
            'func'
            'get'
            'guard'
            'if'
            'import'
            'in'
            'infix'
            'init'
            'inout'
            'is'
            'left'
            'let'
            'mutating'
            'new'
            'none'
            'nonmutating'
            'operator'
            'postfix'
            'precedence'
            'prefix'
            'protocol'
            'repeat'
            'rethrows'
            'return'
            'right'
            'self'
            'Self'
            'set'
            'struct'
            'subscript'
            'super'
            'switch'
            'throw'
            'throws'
            'try'
            'Type'
            'typealias'
            'var'
            'where'
            'while'
            'willSet')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'modifiers'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'convenience'
            'dynamic'
            'fileprivate'
            'final'
            'internal'
            'lazy'
            'mutating'
            'nonmutating'
            'open'
            'optional'
            'override'
            'private'
            'public'
            'required'
            'static'
            'unowned'
            'unownedsafe'
            'unownedunsafe'
            'weak')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'types'
      StyleName = 'If type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Array'
            'Bool'
            'Character'
            'Dictionary'
            'Double'
            'false'
            'Float'
            'Int'
            'Int16'
            'Int32'
            'Int64'
            'Int8'
            'nil'
            'Optional'
            'String'
            'true'
            'UInt16'
            'UInt32'
            'UInt64'
            'UInt8'
            'Void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... %ez0'
      IgnoreAsParent = False
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'tree item'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class'
            'enum'
            'extension'
            'func'
            'protocol')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Test test'
    'import UIKit'
    '@UIApplicationMain'
    ''
    'protocol AppearanceProviderProtocol: class {'
    '  func tileColor(value: Int) -> UIColor'
    '}'
    ''
    'class AppDelegate: UIResponder, UIApplicationDelegate {'
    '  var window: UIWindow?'
    ''
    
      '  func application(application: UIApplication, didFinishLaunchin' +
      'gWithOptions launchOptions: NSDictionary?) -> Bool {'
    '    return true'
    '  }'
    '  '
    '  func fontForNumbers() -> UIFont {'
    '    if let font = UIFont(name: "HelveticaNeue-Bold", size: 20) {'
    '      return font'
    '    }'
    '    return UIFont.systemFontOfSize(20)'
    '  }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}')
  Extentions = 'swift'
  LexerName = 'Swift'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
