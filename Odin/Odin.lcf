object SyntAnal19: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Attr'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.* | \#!.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(["'#39'])(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String 2'
      StyleName = 'String'
      TokenType = 4
      Expression = '`.*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Attr'
      StyleName = 'Attr'
      TokenType = 8
      Expression = '(?-i)\#[a-z_]\w*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        ':=| [\[\],\.:\\\?@] |'#13#10'[\-\+<>\|\&\^]{2}=? | \#|'#13#10'[\+\-\*/&\|\^!' +
        '<>=~%]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b(\d(\d|_)*(.\d(\d|_)*)?)((e|E)(\+|-)?\d+)?[ijk]?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number int'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b((0b(0|1|_)+)|(0o(\d|_)+)|(0d(\d|_)+)|(0[xXh](\h|_)+))[ijk]?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align_of'
            'asm'
            'auto_cast'
            'bit_set'
            'break'
            'case'
            'cast'
            'const'
            'context'
            'continue'
            'defer'
            'distinct'
            'do'
            'dynamic'
            'else'
            'enum'
            'fallthrough'
            'false'
            'for'
            'foreign'
            'if'
            'import'
            'in'
            'map'
            'nil'
            'not_in'
            'offset_of'
            'or_else'
            'or_return'
            'package'
            'proc'
            'return'
            'size_of'
            'struct'
            'switch'
            'transmute'
            'true'
            'type'
            'type_info_of'
            'type_of'
            'typeid_of'
            'union'
            'using'
            'when'
            'where')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'any'
            'b16'
            'b32'
            'b64'
            'b8'
            'bool'
            'byte'
            'char'
            'char16_t'
            'char32_t'
            'complex_double'
            'complex_float'
            'complex128'
            'complex32'
            'complex64'
            'cstring'
            'double'
            'f16'
            'f16be'
            'f16le'
            'f32'
            'f32be'
            'f32le'
            'f64'
            'f64be'
            'f64le'
            'float'
            'i128'
            'i128be'
            'i128le'
            'i16'
            'i16be'
            'i16le'
            'i32'
            'i32be'
            'i32le'
            'i64'
            'i64be'
            'i64le'
            'i8'
            'int'
            'int_fast16_t'
            'int_fast32_t'
            'int_fast64_t'
            'int_fast8_t'
            'int_least16_t'
            'int_least32_t'
            'int_least64_t'
            'int_least8_t'
            'int16_t'
            'int32_t'
            'int64_t'
            'int8_t'
            'intmax_t'
            'intptr_t'
            'long'
            'longlong'
            'ptrdiff_t'
            'quaternion128'
            'quaternion256'
            'quaternion64'
            'rawptr'
            'rune'
            'schar'
            'short'
            'size_t'
            'ssize_t'
            'string'
            'typeid'
            'u128'
            'u128be'
            'u128le'
            'u16'
            'u16be'
            'u16le'
            'u32'
            'u32be'
            'u32le'
            'u64'
            'u64be'
            'u64le'
            'u8'
            'uchar'
            'uint'
            'uint_fast16_t'
            'uint_fast32_t'
            'uint_fast64_t'
            'uint_fast8_t'
            'uint_least16_t'
            'uint_least32_t'
            'uint_least64_t'
            'uint_least8_t'
            'uint16_t'
            'uint32_t'
            'uint64_t'
            'uint8_t'
            'uintmax_t'
            'uintptr'
            'uintptr_t'
            'ulong'
            'ulonglong'
            'ushort'
            'wchar_t')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc'
      ConditionList = <
        item
          TagList.Strings = (
            'proc')
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 256
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      NameFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'enum'
      ConditionList = <
        item
          TagList.Strings = (
            'bit_set'
            'enum'
            'struct'
            'union')
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 256
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      NameFmt = '%s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 3
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Comment'
    'test :: struct{'
    '      compressed: []u8,'
    '}'
    ''
    'somename :: proc(t: ^testing.T) {'
    #9'TEST: []u8 = {'
    #9#9'0x1f, 0x8b,'
    #9'}'
    #9'for v in Shoco_Tests {'
    #9#9'buffer := make([]u8, max(biggest_packed, biggest_unpacked))'
    #9#9'defer delete(buffer)'
    #9#9'msg := fmt.tprintf("Expected to return `nil`, got %v", err)'
    #9'}'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()'
    'Attr')
  Extentions = 'odin'
  LexerName = 'Odin'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
