object SyntAnal17: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id funcs'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'HashId'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'IdFunc'
      StyleName = 'Id'
      TokenType = 7
      Expression = '\w+\.\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-zA-Z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'HashId'
      StyleName = 'HashId'
      TokenType = 8
      Expression = '\#\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 3
      Expression = '(").*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 5
      Expression = '[=,\.;/\+\-\*<>!\|\(\)\{\}\?\\\[\]\#&@~]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 6
      Expression = '0x[a-f0-9]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 4
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keyword'
      StyleName = 'Keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'as'
            'each'
            'else'
            'error'
            'if'
            'in'
            'is'
            'let'
            'meta'
            'not'
            'or'
            'otherwise'
            'section'
            'shared'
            'then'
            'try'
            'type')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Std'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'any'
            'anynonnull'
            'binary'
            'date'
            'datetime'
            'datetimezone'
            'duration'
            'false'
            'function'
            'list'
            'logical'
            'none'
            'null'
            'nullable'
            'number'
            'optional'
            'record'
            'table'
            'text'
            'true'
            'type')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'StdClasses'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Access'
            'Action'
            'ActiveDirectory'
            'AdoDotNet'
            'AnalysisServices'
            'AzureStorage'
            'Binary'
            'BinaryFormat'
            'Byte'
            'Character'
            'Combiner'
            'Comparer'
            'Crypto'
            'Csv'
            'Cube'
            'Currency'
            'Date'
            'DateTime'
            'DateTimeZone'
            'DB2'
            'Decimal'
            'Delta'
            'Diagnostics'
            'DirectQueryCapabilities'
            'Double'
            'Duration'
            'Embedded'
            'Error'
            'Excel'
            'Exchange'
            'Expression'
            'Extension'
            'Facebook'
            'File'
            'Folder'
            'Function'
            'Hdfs'
            'HdInsight'
            'Informix'
            'Int16'
            'Int32'
            'Int64'
            'Int8'
            'Json'
            'Lines'
            'List'
            'Logical'
            'Marketplace'
            'MQ'
            'MySQL'
            'Number'
            'OData'
            'Odbc'
            'OleDb'
            'Oracle'
            'Percentage'
            'PostgreSQL'
            'RData'
            'Record'
            'Replacer'
            'Resource'
            'RowExpression'
            'Salesforce'
            'SapBusinessWarehouse'
            'SapHana'
            'SharePoint'
            'Single'
            'Soda'
            'Splitter'
            'Sql'
            'SqlExpression'
            'Sybase'
            'Table'
            'TableAction'
            'Tables'
            'Teradata'
            'Text'
            'Time'
            'Type'
            'Uri'
            'Value'
            'ValueAction'
            'Variable'
            'Web'
            'WebAction'
            'Xml')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'StdFuncs'
      StyleName = 'Id funcs'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Access.Database'
            'Action.Return'
            'Action.Sequence'
            'Action.Try'
            'ActiveDirectory.Domains'
            'AdoDotNet.DataSource'
            'AdoDotNet.Query'
            'AnalysisServices.Database'
            'AnalysisServices.Databases'
            'AzureStorage.Blobs'
            'AzureStorage.Tables'
            'Binary.Buffer'
            'Binary.Combine'
            'Binary.Compress'
            'Binary.Decompress'
            'Binary.End'
            'Binary.From'
            'Binary.FromList'
            'Binary.FromText'
            'Binary.Length'
            'Binary.ToList'
            'Binary.ToText'
            'BinaryFormat.7BitEncodedSignedInteger'
            'BinaryFormat.7BitEncodedUnsignedInteger'
            'BinaryFormat.Binary'
            'BinaryFormat.Byte'
            'BinaryFormat.ByteOrder'
            'BinaryFormat.Choice'
            'BinaryFormat.Decimal'
            'BinaryFormat.Double'
            'BinaryFormat.Group'
            'BinaryFormat.Length'
            'BinaryFormat.List'
            'BinaryFormat.Null'
            'BinaryFormat.Record'
            'BinaryFormat.SignedInteger16'
            'BinaryFormat.SignedInteger32'
            'BinaryFormat.SignedInteger64'
            'BinaryFormat.Single'
            'BinaryFormat.Text'
            'BinaryFormat.Transform'
            'BinaryFormat.UnsignedInteger16'
            'BinaryFormat.UnsignedInteger32'
            'BinaryFormat.UnsignedInteger64'
            'Byte.From'
            'Character.FromNumber'
            'Character.ToNumber'
            'Combiner.CombineTextByDelimiter'
            'Combiner.CombineTextByEachDelimiter'
            'Combiner.CombineTextByLengths'
            'Combiner.CombineTextByPositions'
            'Combiner.CombineTextByRanges'
            'Comparer.Equals'
            'Comparer.FromCulture'
            'Comparer.Ordinal'
            'Comparer.OrdinalIgnoreCase'
            'Crypto.CreateHash'
            'Crypto.CreateHmac'
            'Csv.Document'
            'Cube.AddAndExpandDimensionColumn'
            'Cube.AddMeasureColumn'
            'Cube.ApplyParameter'
            'Cube.AttributeMemberId'
            'Cube.CollapseAndRemoveColumns'
            'Cube.Dimensions'
            'Cube.DisplayFolders'
            'Cube.Measures'
            'Cube.Parameters'
            'Cube.Transform'
            'Currency.From'
            'Date.AddDays'
            'Date.AddMonths'
            'Date.AddQuarters'
            'Date.AddWeeks'
            'Date.AddYears'
            'Date.Day'
            'Date.DayOfWeek'
            'Date.DayOfWeekName'
            'Date.DayOfYear'
            'Date.DaysInMonth'
            'Date.EndOfDay'
            'Date.EndOfMonth'
            'Date.EndOfQuarter'
            'Date.EndOfWeek'
            'Date.EndOfYear'
            'Date.From'
            'Date.FromText'
            'Date.IsInCurrentDay'
            'Date.IsInCurrentMonth'
            'Date.IsInCurrentQuarter'
            'Date.IsInCurrentWeek'
            'Date.IsInCurrentYear'
            'Date.IsInNextDay'
            'Date.IsInNextMonth'
            'Date.IsInNextNDays'
            'Date.IsInNextNMonths'
            'Date.IsInNextNQuarters'
            'Date.IsInNextNWeeks'
            'Date.IsInNextNYears'
            'Date.IsInNextQuarter'
            'Date.IsInNextWeek'
            'Date.IsInNextYear'
            'Date.IsInPreviousDay'
            'Date.IsInPreviousMonth'
            'Date.IsInPreviousNDays'
            'Date.IsInPreviousNMonths'
            'Date.IsInPreviousNQuarters'
            'Date.IsInPreviousNWeeks'
            'Date.IsInPreviousNYears'
            'Date.IsInPreviousQuarter'
            'Date.IsInPreviousWeek'
            'Date.IsInPreviousYear'
            'Date.IsInYearToDate'
            'Date.IsLeapYear'
            'Date.Month'
            'Date.MonthName'
            'Date.QuarterOfYear'
            'Date.StartOfDay'
            'Date.StartOfMonth'
            'Date.StartOfQuarter'
            'Date.StartOfWeek'
            'Date.StartOfYear'
            'Date.ToRecord'
            'Date.ToText'
            'Date.WeekOfMonth'
            'Date.WeekOfYear'
            'Date.Year'
            'DateTime.AddZone'
            'DateTime.Date'
            'DateTime.FixedLocalNow'
            'DateTime.From'
            'DateTime.FromFileTime'
            'DateTime.FromText'
            'DateTime.IsInCurrentHour'
            'DateTime.IsInCurrentMinute'
            'DateTime.IsInCurrentSecond'
            'DateTime.IsInNextHour'
            'DateTime.IsInNextMinute'
            'DateTime.IsInNextNHours'
            'DateTime.IsInNextNMinutes'
            'DateTime.IsInNextNSeconds'
            'DateTime.IsInNextSecond'
            'DateTime.IsInPreviousHour'
            'DateTime.IsInPreviousMinute'
            'DateTime.IsInPreviousNHours'
            'DateTime.IsInPreviousNMinutes'
            'DateTime.IsInPreviousNSeconds'
            'DateTime.IsInPreviousSecond'
            'DateTime.LocalNow'
            'DateTime.Time'
            'DateTime.ToRecord'
            'DateTime.ToText'
            'DateTimeZone.FixedLocalNow'
            'DateTimeZone.FixedUtcNow'
            'DateTimeZone.From'
            'DateTimeZone.FromFileTime'
            'DateTimeZone.FromText'
            'DateTimeZone.LocalNow'
            'DateTimeZone.RemoveZone'
            'DateTimeZone.SwitchZone'
            'DateTimeZone.ToLocal'
            'DateTimeZone.ToRecord'
            'DateTimeZone.ToText'
            'DateTimeZone.ToUtc'
            'DateTimeZone.UtcNow'
            'DateTimeZone.ZoneHours'
            'DateTimeZone.ZoneMinutes'
            'DB2.Database'
            'Decimal.From'
            'Delta.Since'
            'Diagnostics.ActivityId'
            'Diagnostics.Trace'
            'DirectQueryCapabilities.From'
            'Double.From'
            'Duration.Days'
            'Duration.From'
            'Duration.FromText'
            'Duration.Hours'
            'Duration.Minutes'
            'Duration.Seconds'
            'Duration.ToRecord'
            'Duration.TotalDays'
            'Duration.TotalHours'
            'Duration.TotalMinutes'
            'Duration.TotalSeconds'
            'Duration.ToText'
            'Embedded.Value'
            'Error.Record'
            'Error.Unexpected'
            'Excel.CurrentWorkbook'
            'Excel.Workbook'
            'Exchange.Contents'
            'Expression.Constant'
            'Expression.Evaluate'
            'Expression.Identifier'
            'Extension.Contents'
            'Extension.CredentialError'
            'Extension.CurrentApplication'
            'Extension.CurrentCredential'
            'Extension.Module'
            'Extension\.LoadString'
            'Facebook.Graph'
            'File.Contents'
            'Folder.Contents'
            'Folder.Files'
            'Function.Invoke'
            'Function.InvokeAfter'
            'Function.IsDataSource'
            'Hdfs.Contents'
            'Hdfs.Files'
            'HdInsight.Containers'
            'HdInsight.Contents'
            'HdInsight.Files'
            'Informix.Database'
            'Int16.From'
            'Int32.From'
            'Int64.From'
            'Int8.From'
            'Json.Document'
            'Json.FromValue'
            'Lines.FromBinary'
            'Lines.FromText'
            'Lines.ToBinary'
            'Lines.ToText'
            'List.Accumulate'
            'List.AllTrue'
            'List.Alternate'
            'List.AnyTrue'
            'List.Average'
            'List.Buffer'
            'List.Combine'
            'List.Contains'
            'List.ContainsAll'
            'List.ContainsAny'
            'List.Count'
            'List.Covariance'
            'List.Dates'
            'List.DateTimes'
            'List.DateTimeZones'
            'List.Difference'
            'List.Distinct'
            'List.Durations'
            'List.FindText'
            'List.First'
            'List.FirstN'
            'List.Generate'
            'List.InsertRange'
            'List.Intersect'
            'List.IsDistinct'
            'List.IsEmpty'
            'List.Last'
            'List.LastN'
            'List.MatchesAll'
            'List.MatchesAny'
            'List.Max'
            'List.MaxN'
            'List.Median'
            'List.Min'
            'List.MinN'
            'List.Mode'
            'List.Modes'
            'List.NonNullCount'
            'List.Numbers'
            'List.PositionOf'
            'List.PositionOfAny'
            'List.Positions'
            'List.Product'
            'List.Random'
            'List.Range'
            'List.RemoveFirstN'
            'List.RemoveItems'
            'List.RemoveLastN'
            'List.RemoveMatchingItems'
            'List.RemoveNulls'
            'List.RemoveRange'
            'List.Repeat'
            'List.ReplaceMatchingItems'
            'List.ReplaceRange'
            'List.ReplaceValue'
            'List.Reverse'
            'List.Select'
            'List.Single'
            'List.SingleOrDefault'
            'List.Skip'
            'List.Sort'
            'List.StandardDeviation'
            'List.Sum'
            'List.Times'
            'List.Transform'
            'List.TransformMany'
            'List.Union'
            'List.Zip'
            'Logical.From'
            'Logical.FromText'
            'Logical.ToText'
            'Marketplace.Subscriptions'
            'MQ.Queue'
            'MySQL.Database'
            'Number.Abs'
            'Number.Acos'
            'Number.Asin'
            'Number.Atan'
            'Number.Atan2'
            'Number.BitwiseAnd'
            'Number.BitwiseNot'
            'Number.BitwiseOr'
            'Number.BitwiseShiftLeft'
            'Number.BitwiseShiftRight'
            'Number.BitwiseXor'
            'Number.Combinations'
            'Number.Cos'
            'Number.Cosh'
            'Number.Exp'
            'Number.Factorial'
            'Number.From'
            'Number.FromText'
            'Number.IntegerDivide'
            'Number.IsEven'
            'Number.IsNaN'
            'Number.IsOdd'
            'Number.Ln'
            'Number.Log'
            'Number.Log10'
            'Number.Mod'
            'Number.Permutations'
            'Number.Power'
            'Number.Random'
            'Number.RandomBetween'
            'Number.Round'
            'Number.RoundAwayFromZero'
            'Number.RoundDown'
            'Number.RoundTowardZero'
            'Number.RoundUp'
            'Number.Sign'
            'Number.Sin'
            'Number.Sinh'
            'Number.Sqrt'
            'Number.Tan'
            'Number.Tanh'
            'Number.ToText'
            'OData.Feed'
            'Odbc.DataSource'
            'Odbc.Query'
            'OleDb.DataSource'
            'OleDb.Query'
            'Oracle.Database'
            'Percentage.From'
            'PostgreSQL.Database'
            'RData.FromBinary'
            'Record.AddField'
            'Record.Combine'
            'Record.Field'
            'Record.FieldCount'
            'Record.FieldNames'
            'Record.FieldOrDefault'
            'Record.FieldValues'
            'Record.FromList'
            'Record.FromTable'
            'Record.HasFields'
            'Record.RemoveFields'
            'Record.RenameFields'
            'Record.ReorderFields'
            'Record.SelectFields'
            'Record.ToList'
            'Record.ToTable'
            'Record.TransformFields'
            'Replacer.ReplaceText'
            'Replacer.ReplaceValue'
            'Resource.Access'
            'RowExpression.Column'
            'RowExpression.From'
            'Salesforce.Data'
            'Salesforce.Reports'
            'SapHana.Database'
            'SharePoint.Contents'
            'SharePoint.Files'
            'SharePoint.Tables'
            'Single.From'
            'Soda.Feed'
            'Splitter.SplitByNothing'
            'Splitter.SplitTextByAnyDelimiter'
            'Splitter.SplitTextByDelimiter'
            'Splitter.SplitTextByEachDelimiter'
            'Splitter.SplitTextByLengths'
            'Splitter.SplitTextByPositions'
            'Splitter.SplitTextByRanges'
            'Splitter.SplitTextByRepeatedLengths'
            'Splitter.SplitTextByWhitespace'
            'Sql.Database'
            'Sql.Databases'
            'SqlExpression.SchemaFrom'
            'SqlExpression.ToExpression'
            'Sybase.Database'
            'Table.AddColumn'
            'Table.AddIndexColumn'
            'Table.AddJoinColumn'
            'Table.AddKey'
            'Table.AggregateTableColumn'
            'Table.AlternateRows'
            'Table.Buffer'
            'Table.Column'
            'Table.ColumnCount'
            'Table.ColumnNames'
            'Table.ColumnsOfType'
            'Table.Combine'
            'Table.CombineColumns'
            'Table.Contains'
            'Table.ContainsAll'
            'Table.ContainsAny'
            'Table.DemoteHeaders'
            'Table.Distinct'
            'Table.DuplicateColumn'
            'Table.ExpandListColumn'
            'Table.ExpandRecordColumn'
            'Table.ExpandTableColumn'
            'Table.FillDown'
            'Table.FillUp'
            'Table.FilterWithDataTable'
            'Table.FindText'
            'Table.First'
            'Table.FirstN'
            'Table.FirstValue'
            'Table.FromColumns'
            'Table.FromList'
            'Table.FromPartitions'
            'Table.FromRecords'
            'Table.FromRows'
            'Table.FromValue'
            'Table.Group'
            'Table.HasColumns'
            'Table.InsertRows'
            'Table.IsDistinct'
            'Table.IsEmpty'
            'Table.Join'
            'Table.Keys'
            'Table.Last'
            'Table.LastN'
            'Table.MatchesAllRows'
            'Table.MatchesAnyRows'
            'Table.Max'
            'Table.MaxN'
            'Table.Min'
            'Table.MinN'
            'Table.NestedJoin'
            'Table.Partition'
            'Table.PartitionValues'
            'Table.Pivot'
            'Table.PositionOf'
            'Table.PositionOfAny'
            'Table.PrefixColumns'
            'Table.Profile'
            'Table.PromoteHeaders'
            'Table.Range'
            'Table.RemoveColumns'
            'Table.RemoveFirstN'
            'Table.RemoveLastN'
            'Table.RemoveMatchingRows'
            'Table.RemoveRows'
            'Table.RemoveRowsWithErrors'
            'Table.RenameColumns'
            'Table.ReorderColumns'
            'Table.Repeat'
            'Table.ReplaceErrorValues'
            'Table.ReplaceKeys'
            'Table.ReplaceMatchingRows'
            'Table.ReplaceRelationshipIdentity'
            'Table.ReplaceRows'
            'Table.ReplaceValue'
            'Table.ReverseRows'
            'Table.RowCount'
            'Table.Schema'
            'Table.SelectColumns'
            'Table.SelectRows'
            'Table.SelectRowsWithErrors'
            'Table.SingleRow'
            'Table.Skip'
            'Table.Sort'
            'Table.SplitColumn'
            'Table.ToColumns'
            'Table.ToList'
            'Table.ToRecords'
            'Table.ToRows'
            'Table.TransformColumnNames'
            'Table.TransformColumns'
            'Table.TransformColumnTypes'
            'Table.TransformRows'
            'Table.Transpose'
            'Table.Unpivot'
            'Table.UnpivotOtherColumns'
            'Table.View'
            'TableAction.DeleteRows'
            'TableAction.InsertRows'
            'TableAction.UpdateRows'
            'Tables.GetRelationships'
            'Teradata.Database'
            'Text.AfterDelimiter'
            'Text.At'
            'Text.BeforeDelimiter'
            'Text.BetweenDelimiters'
            'Text.Clean'
            'Text.Combine'
            'Text.Contains'
            'Text.End'
            'Text.EndsWith'
            'Text.Format'
            'Text.From'
            'Text.FromBinary'
            'Text.Insert'
            'Text.Length'
            'Text.Lower'
            'Text.Middle'
            'Text.NewGuid'
            'Text.PadEnd'
            'Text.PadStart'
            'Text.PositionOf'
            'Text.PositionOfAny'
            'Text.Proper'
            'Text.Range'
            'Text.Remove'
            'Text.RemoveRange'
            'Text.Repeat'
            'Text.Replace'
            'Text.ReplaceRange'
            'Text.Split'
            'Text.SplitAny'
            'Text.Start'
            'Text.StartsWith'
            'Text.ToBinary'
            'Text.ToList'
            'Text.Trim'
            'Text.TrimEnd'
            'Text.TrimStart'
            'Text.Upper'
            'Time.EndOfHour'
            'Time.From'
            'Time.FromText'
            'Time.Hour'
            'Time.Minute'
            'Time.Second'
            'Time.StartOfHour'
            'Time.ToRecord'
            'Time.ToText'
            'Type.AddTableKey'
            'Type.ClosedRecord'
            'Type.Facets'
            'Type.ForFunction'
            'Type.ForRecord'
            'Type.FunctionParameters'
            'Type.FunctionRequiredParameters'
            'Type.FunctionReturn'
            'Type.Is'
            'Type.IsNullable'
            'Type.IsOpenRecord'
            'Type.ListItem'
            'Type.NonNullable'
            'Type.OpenRecord'
            'Type.RecordFields'
            'Type.ReplaceFacets'
            'Type.ReplaceTableKeys'
            'Type.TableColumn'
            'Type.TableKeys'
            'Type.TableRow'
            'Type.TableSchema'
            'Type.Union'
            'Uri.BuildQueryString'
            'Uri.Combine'
            'Uri.EscapeDataString'
            'Uri.Parts'
            'Value.Add'
            'Value.As'
            'Value.Compare'
            'Value.Divide'
            'Value.Equals'
            'Value.Firewall'
            'Value.FromText'
            'Value.Is'
            'Value.Metadata'
            'Value.Multiply'
            'Value.NativeQuery'
            'Value.NullableEquals'
            'Value.RemoveMetadata'
            'Value.ReplaceMetadata'
            'Value.ReplaceType'
            'Value.ResourceExpression'
            'Value.Subtract'
            'Value.Type'
            'ValueAction.NativeStatement'
            'ValueAction.Replace'
            'Variable.Value'
            'Web.Contents'
            'Web.Page'
            'Web.SignForOAuth'
            'WebAction.Request'
            'Xml.Document'
            'Xml.Tables')
          TokenTypes = 128
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '['
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 32
        end>
      BlockEnd = ']'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '[...]'
      IgnoreAsParent = False
    end
    item
      DisplayName = ']'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 32
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Number'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 32
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '{...}'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 32
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'RuleFuncBegin'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 1024
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'RuleFuncEnd'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 1024
        end>
      BlockEnd = 'RuleFuncBegin'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/*'
    'Comment'
    '*/'
    '//Comment'
    'let'
    '    AreaCalculation = (x, y) => '
    '        let '
    
      '            Nn = 0xAB20, true, false, table                     ' +
      '     '
    ''
    'let Orders = Table.FromRecords({  '
    
      '    #"Capitalized Each Word" = Table.TransformColumns(Orders, {"' +
      'Item", Text.Proper})'
    '    })  '
    ''
    'let'
    '   DayPassedInYear = (x) => '
    '       let'
    
      '          D=List.Transform(MonthList,each Date.DaysInMonth(DateT' +
      'ime.FromText("-"&Text.From(_)&"-01")))'
    '       in '
    
      '          Date.Day(DateTime.FromText(x))+List.Sum(DaysInMonthLis' +
      't)')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'String'
    'Number'
    'Symbol'
    'Number'
    'IdFunc'
    'HashId')
  Extentions = 'pq m pqm'
  LexerName = 'Power Query M'
  Notes.Strings = (
    
      'Original by Alexander Medvedev (Medvosa), https://github.com/med' +
      'vosa/cuda_lexers'
    'Changed by Alexey (CudaText)')
  LineComment = '//'
  AlwaysSyncBlockAnal = True
  Charset = DEFAULT_CHARSET
end
