object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Out'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Slot'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\(\*( \(\*.*?\*\) |.)*?(\*\)|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '2\^\^[01]+\b |'#13#10'8\^\^[0-7]+\b |'#13#10'16\^\^\h+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\.\d+ (\*\^[\+\-]?\d+)?\b |'#13#10'\d+(\.[\d`]+)? (\*\^[\+\-]?\d+)?\b'#13 +
        #10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Const'
      StyleName = 'Const'
      TokenType = 9
      Expression = '\$\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '([a-z_\$]|\\\[.+?\])([\w\$@]|\\\[.+?\])*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Str'
      StyleName = 'String'
      TokenType = 4
      Expression = '(")(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\+\-/\*\<>\.,~!&\|;:=\^@'#39'`]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Out'
      StyleName = 'Out'
      TokenType = 7
      Expression = '%\d+|%+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Slot'
      StyleName = 'Slot'
      TokenType = 8
      Expression = '\#{1,2}\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '(* comment (*in a comment*) *)'
    '  11, .11, 11., 11.11, 11.11*^23, '
    '  16^^AF, 8^^07, 2^^0101'
    ''
    'abc >>> "/a/b/c/d", f@@x, foo$bar12'
    'foo::bar = "This is a `string` (* this is not a comment*)"'
    'foo[1, 2, a__, b__, c__, g[h[j[]]]] := xxx'
    '$constant := 3 + 4'
    ''
    '(* Out *)'
    '  %, %%, %%%, %1, %123'
    '(* Slot *)'
    '  #, ##, #1, ##1, #123, ##123, #abc, #Sin')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ()'
    'Out'
    'Slot'
    'Const')
  Extentions = 'wl m wls wlt mt'
  LexerName = 'Wolfram'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  Charset = DEFAULT_CHARSET
end
