object SyntAnal61: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Current block'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftColor
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Id spec type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id spec macro'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id spec var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 7
      Expression = '\b(catch|else|for|if|switch|while)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+ f?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#\s*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:~]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String <path>'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?<=\#\w+\s+) <.+?>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\\\?%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'break'
            'case'
            'catch'
            'class'
            'const'
            'continue'
            'delete'
            'do'
            'else'
            'exit'
            'export'
            'for'
            'if'
            'new'
            'operator'
            'return'
            'sizeof'
            'static'
            'struct'
            'switch'
            'this'
            'throw'
            'try'
            'virtual'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id spec type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'char'
            'double'
            'float'
            'float16'
            'float2'
            'float4'
            'float8'
            'int'
            'string'
            'unsigned'
            'void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id specifier'
      StyleName = 'Id spec macro'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__constant'
            '__global'
            '__kernel'
            '__local'
            '__private'
            '__read_only'
            '__read_write'
            '__write_only'
            'constant'
            'global'
            'kernel'
            'local'
            'private'
            'read_only'
            'read_write'
            'write_only')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id func'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'acos'
            'acosh'
            'acospi'
            'asin'
            'asinh'
            'asinpi'
            'atan'
            'atan2'
            'atan2pi'
            'atanh'
            'atanpi'
            'cbrt'
            'ceil'
            'copysign'
            'cos'
            'cosh'
            'cospi'
            'erf'
            'erfc'
            'exp'
            'exp10'
            'exp2'
            'expm1'
            'fabs'
            'fdim'
            'floor'
            'fma'
            'fmax'
            'fmin'
            'fmod'
            'fract'
            'frexp'
            'get_global_id'
            'get_global_size'
            'get_group_id'
            'get_local_id'
            'get_local_size'
            'get_num_groups'
            'get_work_dim'
            'hypot'
            'ilogb'
            'ldexp'
            'lgamma'
            'lgamma_r'
            'log'
            'log10'
            'log1p'
            'log2'
            'logb'
            'mad'
            'maxmag'
            'minmag'
            'modf'
            'nan'
            'nextafter'
            'pow'
            'pown'
            'powr'
            'remainder'
            'remquo'
            'rint'
            'rootn'
            'round'
            'rsqrt'
            'sin'
            'sincos'
            'sinh'
            'sinpi'
            'sqrt'
            'tan'
            'tanh'
            'tanpi'
            'tgamma'
            'trunc')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id spec var'
      StyleName = 'Id spec var'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'HUGE_VAL'
            'HUGE_VALF'
            'INFINITY'
            'M_1_PI'
            'M_1_PI_F'
            'M_2_PI'
            'M_2_PI_F'
            'M_2_SQRTPI'
            'M_2_SQRTPI_F'
            'M_E'
            'M_E_F'
            'M_LN10'
            'M_LN10_F'
            'M_LN2'
            'M_LN2_F'
            'M_LOG10E'
            'M_LOG10E_F'
            'M_LOG2E'
            'M_LOG2E_F'
            'M_PI'
            'M_PI_2'
            'M_PI_2_F'
            'M_PI_4'
            'M_PI_4_F'
            'M_PI_F'
            'M_SQRT1_2'
            'M_SQRT1_2_F'
            'M_SQRT2'
            'M_SQRT2_F'
            'MAXFLOAT'
            'NAN')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%sz-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      NoEndRule = True
      IgnoreAsParent = False
      AutoCloseText = '}'#13#10
    end
    item
      DisplayName = 'func ::'
      Enabled = False
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TokenTypes = 4
        end>
      NameFmt = '%sz-4'
      GroupFmt = '%s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'struct')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 4
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//code from https://github.com/HandsOnOpenCL'
    '__kernel void pi(                                       '
    '   const int          niters,                           '
    '   const float        step_size,                        '
    '   __local  float*    local_sums,                       '
    '   __global float*    partial_sums)                     '
    '{                                                       '
    '   int num_wrk_items  = get_local_size(0);              '
    '   int local_id       = get_local_id(0);                '
    '   int group_id       = get_group_id(0);                '
    '   float x, sum, accum = 0.0f;                           '
    '   int i,istart,iend;                                       '
    '   istart = (group_id * num_wrk_items + local_id) * niters; '
    '   iend   = istart+niters;                 '
    '   for(i= istart; i<iend; i++){            '
    '   }                                       '
    '   local_sums[local_id] = accum;           '
    '   barrier(CLK_LOCAL_MEM_FENCE);           '
    '   if (local_id == 0){                     '
    '      sum = 0.0f;                           '
    '      for(i=0; i<num_wrk_items;i++){       '
    '          sum += local_sums[i];            '
    '      }                                    '
    '      partial_sums[group_id] = sum;        '
    '   }                                       '
    '}                                          '
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    'Id keyword')
  Extentions = 'cl'
  LexerName = 'OpenCL'
  Notes.Strings = (
    'Alexey (SynWrite)'
    'Test: https://github.com/HandsOnOpenCL')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
