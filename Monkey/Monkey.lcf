object SyntAnal25: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Preproc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 16744576
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = #39'.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment long'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '(?s)\#rem.+?\#end'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(") (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\$[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preproc'
      StyleName = 'Preproc'
      TokenType = 6
      Expression = '\#\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String regex'
      TokenType = 4
      Expression = '`.*?`'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!%:~\?\#]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Abstract'
            'Alias'
            'And'
            'Array'
            'Case'
            'Cast'
            'Catch'
            'Class'
            'Const'
            'Continue'
            'CString'
            'Default'
            'Delete'
            'Eachin'
            'Else'
            'Elseif'
            'End'
            'Endif'
            'Enum'
            'Exit'
            'Extends'
            'Extension'
            'Extern'
            'False'
            'Field'
            'Final'
            'For'
            'Forever'
            'Friend'
            'Function'
            'Getter'
            'Global'
            'If'
            'Implements'
            'Import'
            'Inline'
            'Interface'
            'Internal'
            'Lambda'
            'Local'
            'Method'
            'Namespace'
            'New'
            'Next'
            'Not'
            'Operator'
            'Or'
            'Override'
            'Print'
            'Private'
            'Property'
            'Protected'
            'Protocol'
            'Ptr'
            'Public'
            'Repeat'
            'Return'
            'Select'
            'Setter'
            'Static'
            'Step'
            'Struct'
            'Then'
            'Throw'
            'Throwable'
            'To'
            'True'
            'Try'
            'TypeInfo'
            'Until'
            'Using'
            'Var'
            'Variant'
            'Varptr'
            'Virtual'
            'Wend'
            'Where'
            'While'
            'Xor')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'std types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Array'
            'Bool'
            'Byte'
            'Double'
            'Enum'
            'Float'
            'Int'
            'Long'
            'Object'
            'Ptr'
            'Short'
            'String'
            'UByte'
            'UInt'
            'ULong'
            'UShort'
            'Void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block begin'
      ConditionList = <
        item
          TagList.Strings = (
            'Class'
            'Function'
            'Getter'
            'Interface'
            'Lambda'
            'Method'
            'Operator'
            'Property'
            'Select'
            'Setter'
            'Struct')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%sz0...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'End')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for begin'
      ConditionList = <
        item
          TagList.Strings = (
            'For')
          TokenTypes = 4
        end>
      BlockEnd = 'for end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'For...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'Next')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if begin'
      ConditionList = <
        item
          TagList.Strings = (
            'If')
          TokenTypes = 4
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'If...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'Endif')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'Namespace ted2go'
    ''
    '#rem text'
    'text'
    '#end'
    '20 + 30.40e4 + $A0F'
    '#Import "assets/liveTemplates.json"'
    ''
    'Const LiveTemplates:=New LiveTemplatesClass'
    ''
    'Class LiveTemplatesClass'
    #9
    #9'Field DataChanged:Void( lang:String )'
    #9
    #9'Method Load()'
    #9#9
    #9#9#39' merge two files'
    #9#9'Load( DefaultPath )'
    #9#9'Load( CustomPath )'
    #9'End'
    #9
    #9'Method Save()'
    #9#9
    #9#9'If Not _dirty Return'
    #9#9
    #9#9'_dirty=False'
    #9#9'NotifyDataChanged()'
    #9#9
    #9#9'Local json:=New JsonObject'
    #9#9
    #9#9'For Local map:=Eachin _items.All()'
    #9#9#9'Local obj:=New JsonObject'
    #9#9#9'json[map.Key]=obj'
    #9#9#9'For Local i:=Eachin map.Value.All()'
    #9#9#9#9'obj[i.Key]=New JsonString( i.Value )'
    #9#9#9'Next'
    #9#9'Next'
    #9#9
    #9#9'Local txt:=json.ToJson()'
    #9#9'SaveString( txt,DefaultPath )'
    #9#9'SaveString( txt,CustomPath )'
    #9'End'
    #9
    #9'Operator []:StringMap<String>( fileType:String )'
    #9
    #9#9'Return _items[fileType]'
    #9'End'
    #9#9
    #9'Operator []:String( fileType:String,name:String )'
    #9
    #9#9'Local map:=_items[fileType]'
    #9#9'Return map ? map[name] Else Null'
    #9'End'
    #9
    #9'Operator []=( fileType:String,name:String,value:String )'
    #9
    #9#9'Local map:=_items[fileType]'
    #9#9'If map'
    #9#9#9'map[name]=value'
    #9#9#9'OnChanged( fileType )'
    #9#9'Endif'
    #9'End'
    #9
    #9'Method All:StringMap<StringMap<String>>.Iterator()'
    #9
    #9#9'Return _items.All()'
    #9'End'#9
    #9
    'End'
    ''
    ''
    'Class TemplateListViewItem Extends ListViewItem'
    #9
    #9'Field name:String'
    #9'Field value:String'
    #9
    #9'Method GetCaption:String( name:String,value:String )'
    #9#9
    
      #9#9'Local s:=value.Replace( "~n"," ... " ).Replace( "~t","" ).Repl' +
      'ace( "${Cursor}","" )'
    #9#9'Return name+"   "+s'
    #9'End'
    'End')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preproc')
  Extentions = 'monkey monkey2'
  LexerName = 'Monkey'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Sample from Ted2Go project')
  LineComment = #39
  Charset = DEFAULT_CHARSET
end
