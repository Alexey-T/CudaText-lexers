object SyntAnal1: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '@Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String regex'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.* | \#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id label'
      StyleName = 'Id label'
      TokenType = 11
      Expression = '[a-z_]\w*(?=\s*:)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(['#39'"])(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 8
      Expression = '\$\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@Id'
      StyleName = '@Id'
      TokenType = 8
      Expression = '@[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String regex'
      StyleName = 'String regex'
      TokenType = 12
      Expression = '(?<=[:\]\?~\|\*\+]\s*)~?\[.*?(\]|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol []'
      StyleName = 'Symbol'
      TokenType = 10
      Expression = '[\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '::|'#13#10'[<>]+=?|'#13#10'[\-\+\*/&\|\^!=]=|'#13#10'[:\.,;\-\+<>\|\&\^\+\-\*/&\|\' +
        '^!<>=~%\?\\]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'assert'
            'begin'
            'break'
            'case'
            'catch'
            'class'
            'continue'
            'default'
            'do'
            'else'
            'end'
            'enum'
            'extends'
            'finally'
            'for'
            'fragment'
            'goto'
            'grammar'
            'if'
            'implements'
            'import'
            'instanceof'
            'interface'
            'lexer'
            'locals'
            'mode'
            'new'
            'options'
            'package'
            'parser'
            'return'
            'returns'
            'super'
            'switch'
            'then'
            'this'
            'throw'
            'throws'
            'tokens'
            'try'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'boolean'
            'byte'
            'char'
            'double'
            'false'
            'float'
            'int'
            'long'
            'null'
            'short'
            'true'
            'void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id modifier'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'const'
            'final'
            'native'
            'private'
            'protected'
            'public'
            'static'
            'strictfp'
            'synchronized'
            'transient'
            'volatile')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'lexer grammar TestBaseLexer;'
    '/* Comment */'
    'tokens  { Name }'
    ''
    '// Comment'
    'Comment     :  '#39'<!--'#39' .*? '#39'-->'#39' ;'
    'CDSect      :  '#39'<![CDATA['#39' .*? '#39']]>'#39' ;'
    ''
    'fragment'
    'Hexdigit    :  [a-fA-F0-9]+ ;'
    'fragment SpacingMark:'
    '    [\p{Grapheme_Cluster_Break=SpacingMark}];'
    ''
    '@parser::members {'
    'bool myAction() { return true; }'
    'ruleBlock[GrammarAST ebnfRoot] returns [ATNFactory.Handle p]')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()'
    'Var'
    '@Id'
    'Symbol []'
    'Label'
    'String regex')
  Extentions = 'g g4'
  LexerName = 'ANTLR'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
