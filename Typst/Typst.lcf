object SyntAnal19: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Head'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Text'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Font style'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Code'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number unit'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'List'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clSilver
    end
    item
      DisplayName = '``` edge'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Math BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Codeblock BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clSkyBlue
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment range'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*(/\*.*?\*/|.)*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Head'
      StyleName = 'Head'
      Expression = '^[\x20\x09]*=+.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'List'
      StyleName = 'List'
      TokenType = 3
      Expression = '^[\x09\x20]*\-\x20'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      TokenType = 9
      Expression = '<[a-z]\w*>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 4
      Expression = '\\.|\#\{|=>|'#13#10'[\(\)\[\]\{\}:%\$\#,<>\.=/\^\+\-!&@'#39'\\]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Font style'
      StyleName = 'Font style'
      StatesAbsent = 1
      TokenType = 5
      Expression = '[\*_]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '`begin'
      StyleName = '``` edge'
      StatesAdd = 1024
      StatesRemove = 7
      StatesAbsent = 1024
      TokenType = 13
      Expression = '`{3,}[a-z]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '`end'
      StyleName = '``` edge'
      StatesRemove = 1024
      StatesPresent = 1024
      TokenType = 14
      Expression = '`{3,}(?!\w)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Code'
      StyleName = 'Code'
      TokenType = 6
      Expression = '`.*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0b[01]+|'#13#10'0x\h+|'#13#10'0o[0-7]+|'#13#10'\d+(\.\d+)?(e[\-\+]?\d+)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number unit'
      StyleName = 'Number unit'
      TokenType = 8
      Expression = '(?-i)(?<=\d)(cm|mm|pt|in|em|deg|rad|fr)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Text'
      StyleName = 'Text'
      TokenType = 2
      Expression = '[a-z][a-z0-9]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 11
      Expression = '(?s)"(\\.|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keyword'
      StyleName = 'Keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'as'
            'auto'
            'break'
            'context'
            'continue'
            'else'
            'false'
            'for'
            'if'
            'import'
            'in'
            'include'
            'let'
            'none'
            'not'
            'or'
            'return'
            'set'
            'show'
            'true'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Math begin'
      StyleName = 'Math BG'
      StatesAdd = 1
      StatesAbsent = 1
      ConditionList = <
        item
          TagList.Strings = (
            '$')
          TokenTypes = 16
        end>
      BlockEnd = 'Math end'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhRange
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Math end'
      StatesRemove = 1
      StatesPresent = 1
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '$')
          TokenTypes = 16
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'fenced-python'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(python|py)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal17
    end
    item
      DisplayName = 'fenced-js'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(javascript|js)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal10
    end
    item
      DisplayName = 'fenced-cpp'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(c\+\+|cc|cpp|cxx|h\+\+|hpp|hxx)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal6
    end
    item
      DisplayName = 'fenced-c'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(c|h)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal5
    end
    item
      DisplayName = 'fenced-csharp'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(csharp|c\#|cs)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal4
    end
    item
      DisplayName = 'fenced-css'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(css)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal7
    end
    item
      DisplayName = 'fenced-json'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(jsonc?)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal12
    end
    item
      DisplayName = 'fenced-html'
      StyleName = 'Codeblock BG'
      StartExpression = '`{3,}(html)\b'
      EndExpression = '`{3,}(?!\w)'
      SyntAnalyzer = SyntAnal9
    end>
  SampleText.Strings = (
    '= Main'
    '_Text_ *text* <label1> "Str" + `Str`'
    '$ Math block $'
    '#let a=10pt #0xFF #1.2e3'
    '  - List'
    ''
    '== Sublexers  '
    '```js'
    'function a() { return 0; }'
    '```'
    '  '
    '#let f() = {'
    '  let a = ```py'
    '  def a():'
    '    pass'
    '  ```.text'
    ''
    '```c return 0; ```'
    '```cpp return 0; ```'
    '```css p { color: #abc } ```')
  TokenTypeNames.Strings = (
    'Head'
    'Comment'
    'Text'
    'List'
    'Symbol'
    'Font style'
    'Code'
    'Number'
    'Number unit'
    'Label'
    '--'
    'String'
    'Fence edge'
    '`begin'
    '`end')
  Extentions = 'typ'
  LexerName = 'Typst'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
