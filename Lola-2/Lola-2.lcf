object SyntAnal24: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Pragma'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'ModuleProc BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 11206655
      FormatType = ftBackGround
    end
    item
      DisplayName = 'RegBlock BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 15125965
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = 
        '#nested comment allowed: (* (*..*) *)'#13#10'(?s)\(\* ( \(\*.*?\*\) |.' +
        ')*? (\*\)|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Pragma'
      StyleName = 'Pragma'
      TokenType = 9
      Expression = '#nested "--...." comment can be'#13#10'(?s)<\* (--.*?$| .)*? \*>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(").*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d* [ed] [\+\-]? \d+ |'#13#10'\d+ \. \d*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = '(?-i)\d[\dA-F]*X'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\dA-F]*H'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Number'
      TokenType = 7
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\^\#&~\{\}\|!'#39'"]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ARRAY'
            'BEGIN'
            'BY'
            'CASE'
            'CONST'
            'DIV'
            'DO'
            'ELSE'
            'ELSIF'
            'END'
            'EXIT'
            'FOR'
            'IF'
            'IMPORT'
            'IN'
            'INOUT'
            'INTEGER'
            'IS'
            'LOOP'
            'MOD'
            'MODULE'
            'NEW'
            'NIL'
            'OF'
            'OR'
            'OUT'
            'POINTER'
            'PROCEDURE'
            'RECORD'
            'REG'
            'REPEAT'
            'RETURN'
            'THEN'
            'TO'
            'TS'
            'TYPE'
            'UNTIL'
            'VAR'
            'WHILE'
            'WITH')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'BIT'
            'BYTE'
            'WORD')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc simple'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'PROCEDURE')
          TokenTypes = 4
        end>
      BlockEnd = 'proc end'
      NameFmt = 'proc %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = 'proc %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'END')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'IMPLEMENTATION'
      ConditionList = <
        item
          TagList.Strings = (
            'BEGIN')
          TokenTypes = 4
        end>
      BlockEnd = 'IMPLMENTend'
      NameFmt = 'IMPLEMENTATION'
      RefToCondEnd = True
      HighlightPos = cpBound
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'IMPLMENTend'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '.')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'END')
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'MODproc'
      Enabled = False
      StyleName = 'ModuleProc BG'
      ConditionList = <>
      BlockEnd = 'MODprocEnd'
      Highlight = True
      RefToCondEnd = True
      DynHighlight = dhRange
      HighlightPos = cpAny
      CollapseFmt = 'mod %s-2'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'MODprocEnd'
      Enabled = False
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '.')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'END')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '1_REGblock'
      StyleName = 'RegBlock BG'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'REG')
          TokenTypes = 4
        end>
      BlockEnd = '1_REGblockEnd'
      Highlight = True
      NameFmt = '%s-2'
      GroupFmt = 'REGISTERS'
      DynHighlight = dhRange
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 6
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = '1_REGblockEnd'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TYPES'
      BlockName = 'TopMOD'
      StrictParent = True
      ConditionList = <
        item
          TagList.Strings = (
            'TYPE')
          TokenTypes = 4
        end>
      BlockEnd = 'TYPEend'
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      TreeItemImage = 3
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TYPEend'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'BEGIN'
            'VAR')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'MODdef'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
        end
        item
          TagList.Strings = (
            'MODULE')
        end
        item
          TagList.Strings = (
            '=')
        end
        item
          TagList.Strings = (
            ':')
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'MODdefEnd'
      GroupFmt = 'Module Types'
      RefToCondEnd = True
      HighlightPos = cpAny
      TreeItemImage = 4
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'MODdefEnd'
      BlockName = 'MODdef'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            '^')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TopMOD'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'MODULE')
        end>
      IdentIndex = -1
      NameFmt = 'Module %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = 'Module %s-1'
      TreeItemImage = 0
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TopMODend'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'END')
          TokenTypes = 4
        end>
      IdentIndex = -1
      BlockEnd = 'TopMOD'
      SameIdent = True
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TYPESsimple'
      BlockName = 'TYPES'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':')
        end
        item
          TokenTypes = 4
        end>
      GroupFmt = 'Simple Types'
      RefToCondEnd = True
      HighlightPos = cpAny
      TreeItemImage = 5
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'TYPESsimpleEnd'
      NotParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
        end>
      BlockEnd = 'TYPES'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'VAR'
      ConditionList = <>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'VARend'
      ConditionList = <>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'CONST'
      BlockName = 'TopMOD'
      NotParent = True
      ConditionList = <
        item
          TagList.Strings = (
            'CONST')
        end>
      BlockEnd = 'CONSTend'
      NameFmt = '%s-1'
      GroupFmt = 'CONST'
      RefToCondEnd = True
      HighlightPos = cpAny
      TreeItemImage = 7
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'CONSTend'
      BlockName = 'TopMOD'
      BlockType = btRangeEnd
      ConditionList = <>
      BlockEnd = 'CONST'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'MODULE RISC5Top('
    '  INOUT msclk, msdat: BIT;'
    '  INOUT gpio: BYTE);'
    '                            '
    '  CONST StartAddress = 1FF00H'#39'22;  test1 = 001;'
    '  '
    '(* I/O addresses:'
    ' *)'
    ''
    'TYPE RISC5 := MODULE ('
    '      rd, wr, ben: BIT;'
    '      outbus: WORD) ^;'
    ''
    '  RS232R := MODULE ('
    '    OUT rdy: BIT; data: BYTE) ^;'
    ''
    '  RS232T := MODULE ('
    '    OUT rdy, TxD: BIT) ^;'
    ''
    '  SPI := MODULE ('
    '    OUT MOSI, SCLK: BIT)  ^;'
    ''
    '  VID := MODULE ('
    '      hsync, vsync: BIT; RGB: [3] BIT) ^;'
    ''
    '  MouseP := MODULE ( '
    '    OUT out: [28] BIT) ^;'
    ''
    '  PS2 = MODULE ('
    '    IN PS2C, PS2D: BIT) ^;'
    ''
    'REG (CLK50M) clk: BIT;      '
    'REG (clk) rst: BIT;'
    ''
    '  bitrate: BIT;   (*RS-232*)'
    '  Lreg: BYTE;  (*LED*)'
    ''
    'VAR riscx: RISC5;'
    '  receiver: RS232R;'
    '  dmy: BIT;'
    '  dataMs: [28] BIT;   (*mouse*)'
    '  limit: BIT;   (*of cnt0*)'
    ''
    'BEGIN'
    '  ioenb := (adr[10:2] = 2FFFH'#39'16);'
    '  inbus := ~ioenb -> inbus0 :'
    '    (iowadr = 1) -> {0'#39'20, btn, swi}'
    ''
    'END RISC5Top.'
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor')
  Extentions = 'Lola'
  LexerName = 'Lola-2'
  Notes.Strings = (
    'Based on Oberon lexer by Alexey (SynWrite)'
    'Done by BillBuzzell (github), and Alexey')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
