object SyntAnal29: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id nodes'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\.\d+ (e[\+\-]?\d+)?\b |'#13#10'\d*(\.\d+)? (e[\+\-]?\d+)?\b |'#13#10'\d+\.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\[\]\(\)\.,;\+\-/\*=]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"(\\.|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'DEF'
            'eventIn'
            'eventOut'
            'exposedField'
            'EXTERNPROTO'
            'FALSE'
            'field'
            'IS'
            'NULL'
            'PROTO'
            'ROUTE'
            'TO'
            'TRUE'
            'USE')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'MFColor'
            'MFFloat'
            'MFInt32'
            'MFNode'
            'MFRotation'
            'MFString'
            'MFTime'
            'MFVec2f'
            'MFVec3f'
            'SFBool'
            'SFColor'
            'SFFloat'
            'SFImage'
            'SFInt32'
            'SFNode'
            'SFRotation'
            'SFString'
            'SFTime'
            'SFVec2f'
            'SFVec3f')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id nodes'
      StyleName = 'Id nodes'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Anchor'
            'Appearance'
            'AudioClip'
            'Background'
            'Billboard'
            'Box'
            'Collision'
            'Color'
            'ColorInterpolator'
            'Cone'
            'Coordinate'
            'CoordinateInterpolator'
            'Cylinder'
            'CylinderSensor'
            'DirectionalLight'
            'ElevationGrid'
            'Extrusion'
            'Fog'
            'FontStyle'
            'Group'
            'ImageTexture'
            'IndexedFaceSet'
            'IndexedLineSet'
            'Inline'
            'LOD'
            'Material'
            'MovieTexture'
            'NavigationInfo'
            'Normal'
            'NormalInterpolator'
            'OrientationInterpolator'
            'PixelTexture'
            'Plane'
            'PlaneSensor'
            'PointLight'
            'PointSet'
            'PositionInterpolator'
            'ProximitySensor'
            'ScalarInterpolator'
            'Script'
            'Sensor'
            'Shape'
            'Sound'
            'Sphere'
            'SphereSensor'
            'SpotLight'
            'Switch'
            'Text'
            'TextureCoordinate'
            'TextureTransform'
            'TimeSensor'
            'TouchSensor'
            'Transform'
            'Viewpoint'
            'VisibilitySensor'
            'WorldInfo')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#VRML V2.0 utf8'
    'PROTO BouncingShape ['
    '        field SFNode appearance NULL'
    '        field SFNode geometry NULL'
    '] {'
    '   DEF bounceTrans Transform {'
    '      translation 0 0 0'
    '      children ['
    #9' Shape {'
    #9'    appearance IS appearance'
    #9'    geometry IS geometry'
    #9' }'
    #9' DEF bounceInterp PositionInterpolator {'
    #9'    key      [ 0, 0.5, 1 ]'
    #9'    keyValue [ 0 0 0, 0 10 0, 0 0 0 ]'
    #9' }'
    #9' DEF bounceTimer TimeSensor {'
    #9'    cycleInterval 2'
    #9'    loop TRUE'
    #9' }'
    #9']'
    '   }'
    ''
    
      '   ROUTE bounceTimer.fraction_changed TO bounceInterp.set_fracti' +
      'on'
    '   ROUTE bounceInterp.value_changed TO bounceTrans.translation'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}')
  Extentions = 'wrl'
  LexerName = 'VRML'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
