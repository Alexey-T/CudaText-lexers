object SyntAnal71: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 16711808
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      FormatType = ftColor
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Macro'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comm 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\* .*? (\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') .*? \1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'IdVar'
      StyleName = 'Var'
      TokenType = 2
      Expression = '\$\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'IdMacro'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+ \. \d* (e \d+)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'IntHex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '&[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.!\?/\+\-\*:=<>&/\|\^~%]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'KeywMacro'
      StyleName = 'Macro'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '@Address'
            '@Build'
            '@Color'
            '@Comment'
            '@CPU'
            '@CRLF'
            '@CSD'
            '@CurDir'
            '@Date'
            '@Day'
            '@Domain'
            '@DOS'
            '@Error'
            '@FullName'
            '@HomeDir'
            '@HomeDrive'
            '@HomeShr'
            '@HostName'
            '@InWin'
            '@IPAddressX'
            '@KiX'
            '@LanRoot'
            '@LDomain'
            '@LDrive'
            '@LM'
            '@LogonMode'
            '@LongHomeDir'
            '@LServer'
            '@MaxPWAge'
            '@MDayNo'
            '@MHz'
            '@Month'
            '@MonthNo'
            '@MSecs'
            '@OnWoW64'
            '@PID'
            '@PrimaryGroup'
            '@Priv'
            '@ProductSuite'
            '@ProductType'
            '@PWAge'
            '@RAS'
            '@Result'
            '@RServer'
            '@ScriptDir'
            '@ScriptExe'
            '@ScriptName'
            '@SError'
            '@SID'
            '@Site'
            '@StartDir'
            '@SysLang'
            '@Ticks'
            '@Time'
            '@TsSession'
            '@UserID'
            '@UserLang'
            '@WDayNo'
            '@WkSta'
            '@WUserID'
            '@YDayNo'
            '@Year')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Keyw'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Abs'
            'AddKey'
            'AddPrinterConnection'
            'AddProgramGroup'
            'AddProgramItem'
            'and'
            'Asc'
            'AScan'
            'At'
            'BackupEventLog'
            'Beep'
            'Big'
            'Box'
            'Break'
            'Call'
            'Case'
            'CD'
            'CDbl'
            'Chr'
            'CInt'
            'ClearEventLog'
            'Close'
            'CLS'
            'Color'
            'CompareFileTimes'
            'Cookie1'
            'Copy'
            'CreateObject'
            'CStr'
            'Debug'
            'DecToHex'
            'Del'
            'DelKey'
            'DelPrinterConnection'
            'DelProgramGroup'
            'DelProgramItem'
            'DelTree'
            'DelValue'
            'Dim'
            'Dir'
            'Display'
            'Do'
            'Each'
            'Else'
            'EndFunction'
            'Endif'
            'EndSelect'
            'EnumGroup'
            'EnumIpInfo'
            'EnumKey'
            'EnumLocalGroup'
            'EnumValue'
            'Execute'
            'Exist'
            'Exit'
            'ExpandEnvironmentVars'
            'Fix'
            'FlushKb'
            'For'
            'FormatNumber'
            'FreeFileHandle'
            'Function'
            'Get'
            'GetCommandLine'
            'GetDiskSpace'
            'GetFileAttr'
            'GetFileSize'
            'GetFileTime'
            'GetFileVersion'
            'GetObject'
            'GetS'
            'Global'
            'Go'
            'Gosub'
            'Goto'
            'If'
            'IIF'
            'in'
            'Include'
            'InGroup'
            'InStr'
            'InStrRev'
            'Int'
            'IsDeclared'
            'Join'
            'KbHit'
            'KeyExist'
            'LCase'
            'Left'
            'Len'
            'LoadHive'
            'LoadKey'
            'LogEvent'
            'Logoff'
            'Loop'
            'LTrim'
            'MD'
            'MemorySize'
            'MessageBox'
            'mod'
            'Move'
            'Next'
            'not'
            'Off'
            'On'
            'Open'
            'or'
            'Play'
            'Quit'
            'RD'
            'ReadLine'
            'ReadProfileString'
            'ReadType'
            'ReadValue'
            'ReDim'
            'RedirectOutput'
            'Return'
            'Right'
            'Rnd'
            'Round'
            'RTrim'
            'Run'
            'SaveKey'
            'Select'
            'SendKeys'
            'SendMessage'
            'Set'
            'SetASCII'
            'SetConsole'
            'SetDefaultPrinter'
            'SetFileAttr'
            'SetFocus'
            'SetL'
            'SetM'
            'SetOption'
            'SetSystemState'
            'SetTime'
            'SetTitle'
            'SetWallpaper'
            'Shell'
            'ShowProgramGroup'
            'ShutDown'
            'SidToName'
            'Sleep'
            'Small'
            'Split'
            'SRnd'
            'Substr'
            'Trim'
            'Ubound'
            'UCase'
            'UnloadHive'
            'Until'
            'Use'
            'Val'
            'VarType'
            'VarTypeName'
            'While'
            'WriteLine'
            'WriteProfileString'
            'WriteValue')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'if-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'sel'
      ConditionList = <
        item
          TagList.Strings = (
            'select')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'sel-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'sel-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endselect')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'func-end'
      NameFmt = '%s0 %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '%s0 %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endfunction')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for'
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'for-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'next')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do'
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'do-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'until')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while'
      ConditionList = <
        item
          TagList.Strings = (
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'while-end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while-end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'loop')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/* Long'
    'comment */'
    ''
    '? @Kix, @Build'
    '? @SomeStr, &AB'
    ''
    'Function ShowError()'
    #9'? "Error # @ERROR"'
    #9'?'
    #9'Syntax'
    'EndFunction'
    ''
    '; Check KiXtart version'
    '$KixMajorVer = SubStr( @Kix, 1, InStr( @Kix, "." ) - 1 )'
    'If $KixMajorVer < 4'
    #9'GoTo Syntax'
    'EndIf'
    ''
    '; Check command line parameters'
    'Select'
    #9'Case $PC = ""'
    #9#9'; Default if none specified is local computer (".")'
    #9#9'$strComputer = @WKSTA'
    #9'Case 1'
    #9#9'; Command line parameter $PC can either be a'
    #9#9'; computer name or "/?" to request online help'
    #9#9'$strComputer = $PC'
    #9#9'If InStr( $strComputer, "?" ) > 0'
    #9#9#9'GoTo Syntax'
    #9#9'EndIf'
    'EndSelect')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const')
  Extentions = 'kix kx'
  LexerName = 'KiXtart'
  Notes.Strings = (
    'Author: Alex (SynWrite)'
    'Test: http://www.robvanderwoude.com/kixtartexamples.php'
    
      'Keywords: http://www.scriptlogic.com/Kixtart/htmlhelp/Reference/' +
      '!keyword-index.asp')
  LineComment = ';'
  Charset = DEFAULT_CHARSET
end
