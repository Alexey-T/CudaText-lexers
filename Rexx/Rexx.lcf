object SyntAnal49: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 10451805
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39')(\\\1|\\\\|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      TokenType = 8
      Expression = '^ [a-z_]\w* (?=:\s*$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
        'hout exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment#'
      StyleName = 'Comment2'
      TokenType = 1
      Expression = '^\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '::'
      StyleName = 'Symbol'
      TokenType = 9
      Expression = '^::'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^\.!~\\%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'class'
            'do'
            'else'
            'end'
            'exit'
            'function'
            'if'
            'method'
            'procedure'
            'return'
            'then'
            'while')
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end>
      BlockOffset = 2
      BlockEnd = 'Block comment'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do'
      ConditionList = <
        item
          TagList.Strings = (
            'do'
            'select')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'do end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'do'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc'
      ConditionList = <
        item
          TagList.Strings = (
            'procedure')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      BlockEnd = 'proc end'
      NameFmt = 'proc %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'proc end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'return')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      GrammaRuleName = 'label_end'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'label'
      ConditionList = <
        item
          TokenTypes = 256
        end>
      NameFmt = 'label %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 20
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TokenTypes = 512
        end>
      BlockEnd = 'class end'
      EndOfTextClose = True
      NameFmt = 'class %s-2'
      RefToCondEnd = True
      HighlightPos = cpAny
      SelfClose = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TokenTypes = 512
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'method'
      ConditionList = <
        item
          TokenTypes = 20
        end
        item
          TagList.Strings = (
            'method'
            'routine')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TokenTypes = 512
        end>
      BlockEnd = 'method end'
      EndOfTextClose = True
      NameFmt = '%s-1 %s-2'
      RefToCondEnd = True
      HighlightPos = cpAny
      SelfClose = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'method end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 768
        end>
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '/* Get domain controller name */'
    'GetDC: procedure'
    #9'NETGETDCNAME = 510  --Comment'
    #9'DomainName = value( "DOMAIN", , "OS2ENVIRONMENT" )'
    
      #9'parse value NetMisc( NETGETDCNAME, DomainName, "" ) with myRc d' +
      'cName'
    #9'if myRc <> "0" then do'
    #9#9'say "NetMisc NETGETDCNAME error: "||myRc'
    #9#9'exit 9'
    #9'end'
    'return dcName'
    ''
    '/* Get requester type */'
    'RequesterType:'
    #9'NETSERVICE = 170'
    #9'MyRc = NetEnumerate( NETSERVICE, "serviceInfo", "" )'
    #9'if MyRc <> 0 then do'
    #9#9'say "NetEnumerate NETSERVICE error: "||MyRc'
    #9#9'exit 9'
    #9'end'
    #9'if serviceInfo.0 = 0 then do'
    #9#9'req_type = "UNKNOWN"'
    #9'end'
    #9'else do'
    #9#9'req_type = ""'
    #9#9'do i = 1 to serviceInfo.0'
    #9#9#9'if serviceInfo.i = "SERVER" then req_type = "SERVER"'
    #9#9'end'
    #9'end'
    'return req_type'
    ''
    '--Class test here'
    '::class Test'
    '::method Init'
    'return'
    '::method Done'
    'return')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Label'
    'Symbol::')
  Extentions = 'rex cls'
  LexerName = 'Rexx'
  Notes.Strings = (
    'Alexey (SynWrite)'
    'Samples:'
    'http://www.robvanderwoude.com/rexxexamples.php'
    'http://www.oorexx.org/ - Download, see samples folder')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
