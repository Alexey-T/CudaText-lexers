object SyntAnal37: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Marked block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clHighlightText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clHighlight
      FormatType = ftColor
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String { }'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id Keyw'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id Func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = '\#'#39' .*? ('#39'|$) | #Java not.'#13#10'\#\\\w+         #Scheme not.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) ".*? ("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s) \#\| .*? (\|\# |\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_\#] [\w!\?\-<>=]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String 2'
      StyleName = 'String { }'
      TokenType = 4
      Expression = '(?s) \{ .*? (\}|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:<>\(\)=\+\-\[\]\{\}\?!\$@&%'#39'`]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+) [FD]?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ [LD]?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id Func'
      StyleName = 'Id Func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'acos'
            'and'
            'angle'
            'append'
            'apply'
            'asin'
            'assoc'
            'assq'
            'assv'
            'atan'
            'begin'
            'boolean?'
            'caaaar'
            'caaadr'
            'caaar'
            'caadar'
            'caaddr'
            'caadr'
            'caar'
            'cadaar'
            'cadadr'
            'cadar'
            'caddar'
            'cadddr'
            'caddr'
            'cadr'
            'call/cc'
            'call-with-current-continuation'
            'call-with-input-file'
            'call-with-output-file'
            'call-with-values'
            'car'
            'case'
            'cdaaar'
            'cdaadr'
            'cdaar'
            'cdadar'
            'cdaddr'
            'cdadr'
            'cdar'
            'cddaar'
            'cddadr'
            'cddar'
            'cdddar'
            'cddddr'
            'cdddr'
            'cddr'
            'cdr'
            'ceiling'
            'char?'
            'char<?'
            'char<=?'
            'char=?'
            'char>?'
            'char>=?'
            'char->integer'
            'char-alphabetic?'
            'char-ci<?'
            'char-ci<=?'
            'char-ci=?'
            'char-ci>?'
            'char-ci>=?'
            'char-downcase'
            'char-lower-case?'
            'char-numeric?'
            'char-ready?'
            'char-upcase'
            'char-upper-case?'
            'char-whitespace?'
            'close-input-port'
            'close-output-port'
            'complex?'
            'cond'
            'cons'
            'cos'
            'current-input-port'
            'current-output-port'
            'define'
            'define-syntax'
            'delay'
            'denominator'
            'display'
            'do'
            'dynamic-wind'
            'else'
            'eof-object?'
            'eq?'
            'equal?'
            'eqv?'
            'eval'
            'even?'
            'exact?'
            'exact->inexact'
            'exp'
            'expt'
            'floor'
            'force'
            'for-each'
            'gcd'
            'if'
            'imag-part'
            'inexact?'
            'inexact->exact'
            'input-port?'
            'integer?'
            'integer->char'
            'interaction-environment'
            'lambda'
            'lcm'
            'length'
            'let'
            'let*'
            'letrec'
            'letrec-syntax'
            'let-syntax'
            'list'
            'list?'
            'list->string'
            'list->vector'
            'list-ref'
            'list-tail'
            'load'
            'log'
            'magnitude'
            'make-polar'
            'make-rectangular'
            'make-string'
            'make-vector'
            'map'
            'max'
            'member'
            'memq'
            'memv'
            'min'
            'modulo'
            'negative?'
            'newline'
            'not'
            'null?'
            'null-environment'
            'number?'
            'number->string'
            'numerator'
            'odd?'
            'open-input-file'
            'open-output-file'
            'or'
            'output-port?'
            'pair?'
            'peek-char'
            'positive?'
            'procedure?'
            'quasiquote'
            'quote'
            'quotient'
            'rational?'
            'rationalize'
            'read'
            'read-char'
            'real?'
            'real-part'
            'remainder'
            'reverse'
            'round'
            'scheme-report-environment'
            'set!'
            'set-car!'
            'set-cdr!'
            'sin'
            'sqrt'
            'string'
            'string?'
            'string<?'
            'string<=?'
            'string=?'
            'string>?'
            'string>=?'
            'string->list'
            'string->number'
            'string->symbol'
            'string-append'
            'string-ci<?'
            'string-ci<=?'
            'string-ci=?'
            'string-ci>?'
            'string-ci>=?'
            'string-copy'
            'string-fill!'
            'string-length'
            'string-ref'
            'string-set!'
            'substring'
            'symbol?'
            'symbol->string'
            'syntax-rules'
            'transcript-off'
            'transcript-on'
            'truncate'
            'unquote'
            'unquote-splicing'
            'values'
            'vector'
            'vector?'
            'vector->list'
            'vector-fill!'
            'vector-length'
            'vector-ref'
            'vector-set!'
            'with-input-from-file'
            'with-output-to-file'
            'write'
            'write-char'
            'zero?')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id keyw'
      StyleName = 'Id Keyw'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '#f'
            '#null'
            '#t'
            'begin'
            'case'
            'cond'
            'define'
            'define-syntax'
            'do'
            'else'
            'fluid-let'
            'for-each'
            'if'
            'let'
            'let*'
            'letrec'
            'letrec-syntax'
            'let-syntax'
            'load'
            'set!'
            'set-car!'
            'set-cdr!'
            'syntax-case'
            'syntax-rules')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      EndOfTextClose = True
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func begin (compact)'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'define')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      NameFmt = 'func %s-3~s[)]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func begin (lambda)'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'lambda')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'define')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      NameFmt = 'func %s-2 %s-5~s[)]'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ')'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    ';Test'
    ';Const'
    '#t + #f + #null'
    '12 + 0xFFCCAA + 132L'
    '123.45 + 1.2345E-2 + 123.45F + 42D'
    '#'#39'a'#39' + #'#39'\n'#39' + #'#39'\040'#39' + #'#39'\u4FA3'#39
    '#\space + #\a + "Test"  '
    ';Strings'
    '(define (li c x) {<li class="[c]">[x]</li>})'
    '(li '#39'warning {<a href="#licence">Licensing information</a>})'
    ''
    '#| Funcs '
    '|#'
    'for-each'
    'string>=?'
    'string>?'
    'string?'
    'substring'
    'symbol->string'
    'symbol?'
    ''
    ';Tree'
    '(define (banner-compact)'
    '    (display "Hello world"))'
    ''
    '(define banner-lambda (lambda ()'
    '    (display "Hello world")))'
    ''
    '(define banner-lambda-2 (lambda (n1 n2)'
    '    (display "Hello world")))')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const')
  MarkedBlockStyle = 'Marked block'
  Extentions = 'scm ss smd'
  LexerName = 'Scheme'
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Ref:'
    'http://jscheme.sourceforge.net/jscheme/doc/refman.html'
    'Test:'
    'http://jscheme.sourceforge.net/jscheme/src/using/package.html')
  LineComment = ';'
  Charset = DEFAULT_CHARSET
end
