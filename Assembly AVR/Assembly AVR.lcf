object SyntAnal3: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id register'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Directive'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 215
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(;|//) .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '-? (\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'-? \d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[0-9a-f_]+ |'#13#10'0b[01]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      Expression = '\w+:     '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Directive'
      StyleName = 'Directive'
      TokenType = 6
      Expression = '\.\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|") (\\\\|\\\1|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\.,:\-\+\*\\/%@<>\(\)\[\]\{\}\?=!~\&\$\^]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'adc'
            'add'
            'and'
            'andi'
            'asr'
            'bclr'
            'bld'
            'brbc'
            'brbs'
            'brcc'
            'brcs'
            'break'
            'breq'
            'brge'
            'brhc'
            'brhs'
            'brid'
            'brie'
            'brlo'
            'brlt'
            'brmi'
            'brne'
            'brpl'
            'brsh'
            'brtc'
            'brts'
            'brvc'
            'brvs'
            'bset'
            'bst'
            'call'
            'cbi'
            'cbr'
            'clc'
            'clh'
            'cli'
            'cln'
            'clr'
            'cls'
            'clt'
            'clv'
            'clz'
            'com'
            'cp'
            'cpc'
            'cpi'
            'cpse'
            'dec'
            'eor'
            'ijmp'
            'in'
            'inc'
            'jmp'
            'ld'
            'ldd'
            'ldi'
            'lds'
            'lpm'
            'lsl'
            'lsr'
            'mov'
            'movw'
            'neg'
            'nop'
            'or'
            'ori'
            'out'
            'pop'
            'push'
            'rcall'
            'ret'
            'reti'
            'rjmp'
            'rol'
            'ror'
            'sbc'
            'sbci'
            'sbi'
            'sbic'
            'sbis'
            'sbiw'
            'sbr'
            'sbrc'
            'sbrs'
            'sec'
            'seh'
            'sei'
            'sen'
            'ser'
            'ses'
            'set'
            'sev'
            'sez'
            'sleep'
            'spm'
            'st'
            'std'
            'sts'
            'sub'
            'subi'
            'swap'
            'tst'
            'wdr')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id registers'
      StyleName = 'Id register'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'r0'
            'r1'
            'r10'
            'r11'
            'r12'
            'r13'
            'r14'
            'r15'
            'r16'
            'r17'
            'r18'
            'r19'
            'r2'
            'r20'
            'r21'
            'r22'
            'r23'
            'r24'
            'r25'
            'r26'
            'r27'
            'r28'
            'r29'
            'r3'
            'r30'
            'r31'
            'r4'
            'r5'
            'r6'
            'r7'
            'r8'
            'r9'
            'xh'
            'xl'
            'yh'
            'yl'
            'zh'
            'zl')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'byte'
            'cseg'
            'csegsize'
            'db'
            'dd'
            'def'
            'device'
            'dq'
            'dseg'
            'dw'
            'elif'
            'else'
            'endif'
            'endm'
            'endmacro'
            'equ'
            'error'
            'eseg'
            'exit'
            'if'
            'ifdef'
            'ifndef'
            'include'
            'list'
            'listmac'
            'macro'
            'message'
            'nolist'
            'org'
            'undef')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Label'
      ConditionList = <
        item
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'dw name '#39'Test'#39', 0x20, 0b1010'
    '/* Text'
    '*/'
    ''
    '.DSEG'
    'log_buffer:'#9#9'.BYTE'#9'OUT_SIZE'#9'; buffer'
    'log_out_count:'#9'.BYTE'#9'1'#9#9#9#9'; number of bytes'
    ''
    '.CSEG'
    'logger_clear:'
    #9'ldi'#9#9'r16, LOW(log_buffer)'
    #9'sts'#9#9'log_buffer_XL, r16'
    #9'ret'
    ''
    'logger_send:'
    ' '#9'ldi'#9#9'r17, ADDR'
    ' '#9'lds'#9#9'r18, log_out_count'#9#9#9#9'; get number of bytes to send.'
    #9'ret')
  TokenTypeNames.Strings = (
    'Label'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Directive')
  Extentions = 'asm inc'
  LexerName = 'Assembly AVR'
  Notes.Strings = (
    'Alexey (SynWrite)')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
