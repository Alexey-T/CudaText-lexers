object SyntAnal12: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
    end
    item
      DisplayName = 'Current block'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftColor
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Id qualifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      TokenType = 10
      Expression = '\b(catch|else|for|if|switch|while)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '\~?[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
        'hout exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+L?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '\#\s*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String include'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?<=\#include\s+) <.+?>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!\?%\\]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'auto'
            'break'
            'case'
            'catch'
            'class'
            'const'
            'continue'
            'default'
            'delete'
            'do'
            'else'
            'enum'
            'explicit'
            'export'
            'extern'
            'for'
            'friend'
            'goto'
            'if'
            'inline'
            'mutable'
            'namespace'
            'new'
            'operator'
            'private'
            'protected'
            'public'
            'register'
            'return'
            'sizeof'
            'static'
            'struct'
            'switch'
            'this'
            'throw'
            'try'
            'typedef'
            'typeid'
            'typename'
            'union'
            'using'
            'uuid'
            'virtual'
            'volatile'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id qualifier'
      StyleName = 'Id qualifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__constant__'
            '__device__'
            '__forceinline__'
            '__global__'
            '__host__'
            '__launch_bounds__'
            '__managed__'
            '__noinline__'
            '__restrict__'
            '__shared__')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'char'
            'char1'
            'char2'
            'char3'
            'char4'
            'dim3'
            'double'
            'double1'
            'double2'
            'double3'
            'double4'
            'false'
            'float'
            'float1'
            'float2'
            'float3'
            'float4'
            'int'
            'int1'
            'int2'
            'int3'
            'int4'
            'long'
            'long1'
            'long2'
            'long3'
            'long4'
            'longlong'
            'longlong1'
            'longlong2'
            'longlong3'
            'longlong4'
            'NULL'
            'short'
            'short1'
            'short2'
            'short3'
            'short4'
            'signed'
            'string'
            'true'
            'uchar'
            'uchar1'
            'uchar2'
            'uchar3'
            'uchar4'
            'uint'
            'uint1'
            'uint2'
            'uint3'
            'uint4'
            'ulong'
            'ulong1'
            'ulong2'
            'ulong3'
            'ulong4'
            'ulonglong'
            'ulonglong1'
            'ulonglong2'
            'ulonglong3'
            'ulonglong4'
            'unsigned'
            'ushort'
            'ushort1'
            'ushort2'
            'ushort3'
            'ushort4'
            'vector'
            'void')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id var'
      StyleName = 'Id var'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__CUDA_ARCH__'
            'blockDim'
            'blockIdx'
            'gridDim'
            'threadIdx'
            'warpSize')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id func'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__all'
            '__any'
            '__ballot'
            '__cosf'
            '__dadd_rd'
            '__dadd_rn'
            '__dadd_ru'
            '__dadd_rz'
            '__ddiv_rd'
            '__ddiv_rn'
            '__ddiv_ru'
            '__ddiv_rz'
            '__dmul_rd'
            '__dmul_rn'
            '__dmul_ru'
            '__dmul_rz'
            '__drcp_rd'
            '__drcp_rn'
            '__drcp_ru'
            '__drcp_rz'
            '__dsqrt_rd'
            '__dsqrt_rn'
            '__dsqrt_ru'
            '__dsqrt_rz'
            '__dsub_rd'
            '__dsub_rn'
            '__dsub_ru'
            '__dsub_rz'
            '__exp10f'
            '__expf'
            '__fadd_rd'
            '__fadd_rn'
            '__fadd_ru'
            '__fadd_rz'
            '__fdiv_rd'
            '__fdiv_rn'
            '__fdiv_ru'
            '__fdiv_rz'
            '__fdividef'
            '__fma_rd'
            '__fma_rn'
            '__fma_ru'
            '__fma_rz'
            '__fmaf_rd'
            '__fmaf_rn'
            '__fmaf_ru'
            '__fmaf_rz'
            '__fmul_rd'
            '__fmul_rn'
            '__fmul_ru'
            '__fmul_rz'
            '__frcp_rd'
            '__frcp_rn'
            '__frcp_ru'
            '__frcp_rz'
            '__frsqrt_rn'
            '__fsqrt_rd'
            '__fsqrt_rn'
            '__fsqrt_ru'
            '__fsqrt_rz'
            '__fsub_rd'
            '__fsub_rn'
            '__fsub_ru'
            '__fsub_rz'
            '__ldg'
            '__log10f'
            '__log2f'
            '__logf'
            '__powf'
            '__prof_trigger'
            '__shfl'
            '__shfl_down'
            '__shfl_up'
            '__shfl_xor'
            '__sincosf'
            '__sinf'
            '__syncthreads'
            '__syncthreads_and'
            '__syncthreads_count'
            '__syncthreads_or'
            '__tanf'
            '__threadfence'
            '__threadfence_block'
            '__threadfence_system'
            'assert'
            'atomicAdd'
            'atomicAnd'
            'atomicCAS'
            'atomicDec'
            'atomicExch'
            'atomicInc'
            'atomicMax'
            'atomicMin'
            'atomicOr'
            'atomicSub'
            'atomicXor'
            'clock'
            'clock64'
            'cudaFree'
            'cudaMalloc'
            'cudaMemcpy'
            'exit'
            'free'
            'malloc'
            'memcpy'
            'memset'
            'printf'
            'strlen'
            'surf1DLayeredread'
            'surf1DLayeredwrite'
            'surf1Dread'
            'surf1Dwrite'
            'surf2DLayeredread'
            'surf2DLayeredwrite'
            'surf2Dread'
            'surf2Dwrite'
            'surf3Dread'
            'surf3Dwrite'
            'surfCubemapLayeredread'
            'surfCubemapLayeredwrite'
            'surfCubemapread'
            'surfCubemapwrite'
            'tex1D'
            'tex1Dfetch'
            'tex1Dlayered'
            'tex2D'
            'tex2Dgather'
            'tex2Dlayered'
            'tex3D'
            'texCubemap'
            'texCubemapLayered')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'class %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class :'
      BlockName = 'class :'
      NotParent = True
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'class %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '/* ... */'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      StrictParent = True
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func begin'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'const')
          CondType = tcSkip
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TokenTypes = 4
        end>
      IdentIndex = -1
      BlockOffset = -1
      BlockEnd = 'func end'
      NameFmt = '%sz-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%sz-1...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockName = 'func begin'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func-class'
      StrictParent = True
      ConditionList = <
        item
          TagList.Strings = (
            ':'
            '{')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '::'
            '->')
          TokenTypes = 8
        end>
      BlockOffset = 1
      BlockEnd = 'func-class end'
      NameFmt = '%s-1'
      GroupFmt = '%s1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%sz2...'
      TreeItemImage = 5
      TreeGroupImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func-class end'
      BlockName = 'func-class'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      IdentIndex = 1
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... %ez0'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'struct')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'typedef')
          TokenTypes = 4
        end>
      NameFmt = '%s[}]'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 4
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func operator'
      ConditionList = <
        item
          TagList.Strings = (
            'operator')
          TokenTypes = 4
        end>
      NameFmt = 'op %sz-1'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 7
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//Test'
    '#include <cstdio>'
    ''
    'extern "C" {'
    '  __global__ void helloWorld(char *data) {'
    '    #if __CUDA_ARCH__ >= 200'
    
      '    printf("Hello, world! I'#39'm thread (%d,%d,%d) in block (%d,%d,' +
      '%d).\n",'
    '      threadIdx.x, threadIdx.y, threadIdx.z,'
    '      blockIdx.x, blockIdx.y, blockIdx.z);'
    '    #endif'
    ''
    '    int sum = 0;'
    '    for (int i=0; i<100; i++) {'
    '      sum += data[i];'
    '    }'
    '    '
    '    #if __CUDA_ARCH__ >= 200'
    '    printf("The sum is: %d\n", sum);'
    '    #endif'
    '  }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor'
    'Id keyword')
  Extentions = 'cu cuh h'
  LexerName = 'CUDA C++'
  Notes.Strings = (
    'Alexey (Synwrite)'
    'Test: https://github.com/bzip2-cuda/bzip2-cuda'
    'Spec words: https://github.com/harrism/sublimetext-cuda-cpp')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
