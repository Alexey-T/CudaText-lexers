object SyntAnal24: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id class'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '@Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9' +
        '][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+' +
        ')?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id keyword2'
      StyleName = 'Id keyword'
      Expression = '\b(((abstract|primitive)\s+)type|(mutable\s+)?struct)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '(?r)\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String triple'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)""".*?"""'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|") .*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\#=.*?=\#'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '::|=>|&&|\|\||\$\(|<:|[/\*,\.;:=<>\+\-\[\]&\$\{\}\\\|\?!]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@Id'
      StyleName = '@Id'
      Expression = '\@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'baremodule'
            'begin'
            'break'
            'catch'
            'ccall'
            'const'
            'continue'
            'do'
            'else'
            'elseif'
            'end'
            'export'
            'finally'
            'for'
            'function'
            'global'
            'if'
            'import'
            'in'
            'isa'
            'let'
            'local'
            'macro'
            'module'
            'quote'
            'return'
            'try'
            'using'
            'where'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'std class'
      StyleName = 'Id class'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'AbstractArray'
            'AbstractChannel'
            'AbstractChar'
            'AbstractDict'
            'AbstractDisplay'
            'AbstractFloat'
            'AbstractIrrational'
            'AbstractMatrix'
            'AbstractRange'
            'AbstractSet'
            'AbstractString'
            'AbstractUnitRange'
            'AbstractVecOrMat'
            'AbstractVector'
            'Any'
            'ArgumentError'
            'Array'
            'AssertionError'
            'BigFloat'
            'BigInt'
            'BitArray'
            'BitMatrix'
            'BitSet'
            'BitVector'
            'Bool'
            'BoundsError'
            'CapturedException'
            'CartesianIndex'
            'CartesianIndices'
            'Cchar'
            'Cdouble'
            'Cfloat'
            'Channel'
            'Char'
            'Cint'
            'Cintmax_t'
            'Clong'
            'Clonglong'
            'Cmd'
            'Colon'
            'Complex'
            'ComplexF16'
            'ComplexF32'
            'ComplexF64'
            'CompositeException'
            'Condition'
            'Cptrdiff_t'
            'Cshort'
            'Csize_t'
            'Cssize_t'
            'Cstring'
            'Cuchar'
            'Cuint'
            'Cuintmax_t'
            'Culong'
            'Culonglong'
            'Cushort'
            'Cvoid'
            'Cwchar_t'
            'Cwstring'
            'DataType'
            'DenseArray'
            'DenseMatrix'
            'DenseVecOrMat'
            'DenseVector'
            'Dict'
            'DimensionMismatch'
            'Dims'
            'DivideError'
            'DomainError'
            'Enum'
            'EOFError'
            'ErrorException'
            'Exception'
            'ExponentialBackOff'
            'Expr'
            'Float16'
            'Float32'
            'Float64'
            'Function'
            'GlobalRef'
            'HTML'
            'IdDict'
            'IndexCartesian'
            'IndexLinear'
            'IndexStyle'
            'InexactError'
            'InitError'
            'Int'
            'Int128'
            'Int16'
            'Int32'
            'Int64'
            'Int8'
            'Integer'
            'InterruptException'
            'InvalidStateException'
            'IO'
            'IOBuffer'
            'IOContext'
            'IOStream'
            'Irrational'
            'KeyError'
            'LinearIndices'
            'LineNumberNode'
            'LinRange'
            'LoadError'
            'Matrix'
            'Method'
            'MethodError'
            'MIME'
            'Missing'
            'MissingException'
            'Module'
            'NamedTuple'
            'Nothing'
            'NTuple'
            'Number'
            'OrdinalRange'
            'OutOfMemoryError'
            'OverflowError'
            'Pair'
            'PartialQuickSort'
            'PermutedDimsArray'
            'Pipe'
            'ProcessFailedException'
            'Ptr'
            'QuoteNode'
            'Rational'
            'RawFD'
            'ReadOnlyMemoryError'
            'Real'
            'ReentrantLock'
            'Ref'
            'Regex'
            'RegexMatch'
            'RoundingMode'
            'SegmentationFault'
            'Set'
            'Signed'
            'Some'
            'StackOverflowError'
            'StepRange'
            'StepRangeLen'
            'StridedArray'
            'StridedMatrix'
            'StridedVecOrMat'
            'StridedVector'
            'String'
            'StringIndexError'
            'SubArray'
            'SubstitutionString'
            'SubString'
            'Symbol'
            'SystemError'
            'Task'
            'TaskFailedException'
            'Text'
            'TextDisplay'
            'Timer'
            'Tuple'
            'Type'
            'TypeError'
            'TypeVar'
            'UInt'
            'UInt128'
            'UInt16'
            'UInt32'
            'UInt64'
            'UInt8'
            'UndefInitializer'
            'UndefKeywordError'
            'UndefRefError'
            'UndefVarError'
            'Union'
            'UnionAll'
            'UnitRange'
            'Unsigned'
            'Val'
            'Vararg'
            'VecElement'
            'VecOrMat'
            'Vector'
            'VersionNumber'
            'WeakKeyDict'
            'WeakRef')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'std const'
      StyleName = 'Id const'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ARGS'
            'C_NULL'
            'DEPOT_PATH'
            'devnull'
            'e'
            'ENDIAN_BOM'
            'ENV'
            'false'
            'im'
            'Inf'
            'Inf16'
            'Inf32'
            'Inf64'
            'InsertionSort'
            'LOAD_PATH'
            'MergeSort'
            'missing'
            'NaN'
            'NaN16'
            'NaN32'
            'NaN64'
            'nothing'
            'pi'
            'PROGRAM_FILE'
            'QuickSort'
            'RoundDown'
            'RoundFromZero'
            'RoundNearest'
            'RoundNearestTiesAway'
            'RoundNearestTiesUp'
            'RoundToZero'
            'RoundUp'
            'stderr'
            'stdin'
            'stdout'
            'true'
            'undef')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block'
      ConditionList = <
        item
          TagList.Strings = (
            'begin'
            'do'
            'for'
            'if'
            'immutable'
            'let'
            'quote'
            'try'
            'while')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      DisplayInTree = False
      NameFmt = '%sz0'
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block tree'
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'macro'
            'type')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '[')
          CondType = tcNotEqual
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# Comment'
    '"""'
    'import Base.Sort'
    '"""'
    '#='
    'Comment'
    '=#'
    'immutable BubbleSortAlg <: Sort.Algorithm end'
    '@assert true'
    ''
    'abstract type Test end'
    ''
    '    binary literal (e.g. 0x10)'
    '    octal literal (e.g. 0o76543210)'
    '    hexadecimal literal (e.g. 0xfedcba876543210)'
    '    hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)'
    '    decimal literal (e.g. 9876543210, 100_000_000)'
    
      '    floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2' +
      'e-10)'
    '    '
    
      'function Base.sort!(v::AbstractVector, lo::Int, hi::Int, ::Bubbl' +
      'eSortAlg, o::Sort.Ordering)'
    '    while true'
    '        clean = true'
    '        for i = 100 + 0xAF20     '
    '            if Sort.lt(o, v[i+1], v[i])'
    '                clean = false'
    '            end'
    '        end'
    '        clean && break'
    '    end'
    '    return v'
    'end'
    ''
    'macro enum(T,syms...)'
    '    blk = quote'
    '        immutable $(esc(T))'
    '            n::Int32'
    '            $(esc(T))(n::Integer) = new(n)'
    '        end'
    
      '        nn = print(io, $(string("enum ", T, '#39' '#39', '#39'('#39', join(syms,' +
      ' ", "), '#39')'#39')))'
    '    end'
    'end'
    ''
    'const Nnn = LittleDict( :NAME => true, :NAME2 => nothing )'
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'String2'
    'Symbol ()')
  Extentions = 'jl'
  LexerName = 'Julia'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Copied regex for '#39'Number'#39', keywords list, from:'
    
      'https://github.com/highlightjs/highlight.js/blob/master/src/lang' +
      'uages/julia.js')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
