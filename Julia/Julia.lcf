object SyntAnal3: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '@Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|") .*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[a-f\d]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*$'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]&\$\{\}\\\|\?!]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@Id'
      StyleName = '@Id'
      Expression = '\@\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keyw'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'baremodule'
            'begin'
            'bitstype'
            'break'
            'C_NULL'
            'catch'
            'ccall'
            'const'
            'continue'
            'do'
            'else'
            'elseif'
            'end'
            'export'
            'false'
            'finally'
            'for'
            'function'
            'global'
            'if'
            'immutable'
            'import'
            'importall'
            'in'
            'Inf'
            'Inf32'
            'let'
            'local'
            'macro'
            'module'
            'NaN'
            'NaN32'
            'nothing'
            'quote'
            'return'
            'true'
            'try'
            'type'
            'typealias'
            'using'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'std type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'AbstractArray'
            'AbstractMatrix'
            'AbstractSparseMatrix'
            'AbstractVector'
            'Any'
            'ArgumentError'
            'Array'
            'ASCIIString'
            'Associative'
            'AsyncStream'
            'BigFloat'
            'BigInt'
            'BitArray'
            'BitMatrix'
            'BitVector'
            'Bool'
            'BunchKaufman'
            'ByteString'
            'Cchar'
            'Cdouble'
            'Cfloat'
            'Char'
            'CharString'
            'CholeskyDense'
            'CholeskyPivotedDense'
            'Cint'
            'Cintmax_t'
            'Clong'
            'Clonglong'
            'Colon'
            'Complex'
            'Complex128'
            'Complex64'
            'ComplexPair'
            'Cptrdiff_t'
            'Cshort'
            'Csize_t'
            'Cuchar'
            'Cuint'
            'Cuintmax_t'
            'Culong'
            'Culonglong'
            'Cushort'
            'DArray'
            'Dict'
            'Dims'
            'DisconnectException'
            'EachLine'
            'EnvHash'
            'EOFError'
            'ErrorException'
            'Exception'
            'Expr'
            'Factorization'
            'FileOffset'
            'Filter'
            'Float'
            'Float32'
            'Float64'
            'Function'
            'GSVDDense'
            'ImaginaryUnit'
            'InsertionSort'
            'Int'
            'Int128'
            'Int16'
            'Int32'
            'Int64'
            'Int8'
            'Integer'
            'IntSet'
            'IO'
            'IOBuffer'
            'IOStream'
            'KeyError'
            'LDLTTridiagonal'
            'LoadError'
            'LocalProcess'
            'LUDense'
            'LUTridiagonal'
            'Matrix'
            'MergeSort'
            'MethodError'
            'NTuple'
            'Number'
            'ObjectIdDict'
            'OrdinalRange'
            'ParseError'
            'PipeBuffer'
            'ProcessGroup'
            'Ptr'
            'QRDense'
            'QRPivotedDense'
            'QuickSort'
            'Range'
            'Range1'
            'RangeIndex'
            'Ranges'
            'Rational'
            'Real'
            'Regex'
            'RegexMatch'
            'RegexMatchIterator'
            'RemoteRef'
            'RepString'
            'Reverse'
            'RevString'
            'RopeString'
            'Set'
            'Signed'
            'SparseMatrixCSC'
            'SpawnNullStream'
            'Stat'
            'StridedArray'
            'StridedMatrix'
            'StridedVecOrMat'
            'StridedVector'
            'String'
            'SubArray'
            'SubDArray'
            'SubOrDArray'
            'SubString'
            'SVDDense'
            'Symbol'
            'SymTridiagonal'
            'SystemError'
            'Task'
            'TcpSocket'
            'TimSort'
            'Tridiagonal'
            'Tuple'
            'Type'
            'TypeError'
            'UInt'
            'UInt128'
            'UInt16'
            'UInt32'
            'UInt64'
            'UInt8'
            'Union'
            'Unsigned'
            'UTF8String'
            'UVError'
            'VecOrMat'
            'Vector'
            'VersionNumber'
            'Void'
            'WeakKeyDict'
            'WeakRef'
            'Woodbury'
            'Zip')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block'
      ConditionList = <
        item
          TagList.Strings = (
            'begin'
            'do'
            'for'
            'if'
            'immutable'
            'let'
            'quote'
            'try'
            'while')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block tree'
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'macro'
            'type')
          TokenTypes = 4
        end>
      BlockEnd = 'block end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            '[')
          CondType = tcNotEqual
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '## Test test'
    'import Base.Sort'
    'immutable BubbleSortAlg <: Sort.Algorithm end'
    '@assert true'
    ''
    
      'function Base.sort!(v::AbstractVector, lo::Int, hi::Int, ::Bubbl' +
      'eSortAlg, o::Sort.Ordering)'
    '    while true'
    '        clean = true'
    '        for i = 100 + 0xAF20'
    '            if Sort.lt(o, v[i+1], v[i])'
    '                clean = false'
    '            end'
    '        end'
    '        clean && break'
    '    end'
    '    return v'
    'end'
    ''
    'macro enum(T,syms...)'
    '    blk = quote'
    '        immutable $(esc(T))'
    '            n::Int32'
    '            $(esc(T))(n::Integer) = new(n)'
    '        end'
    
      '        nn = print(io, $(string("enum ", T, '#39' '#39', '#39'('#39', join(syms,' +
      ' ", "), '#39')'#39')))'
    '    end'
    'end')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'jl'
  LexerName = 'Julia'
  Notes.Strings = (
    'Author: Alexey (SynWrite)'
    'Test:'
    'https://github.com/JuliaLang/julia/tree/master/examples'
    '')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
