object SyntAnal3: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '#can be nested'#13#10'(?s)\[\* (\[\*.+?\*\]|.)+? (\*\]|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(.|\\")*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\$[a-f0-9]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\\/\+\-\*:=<>&/\|\^\.!\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keyw'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Abs'
            'Apply'
            'Assert'
            'Audiobits'
            'Audiochannels'
            'Audiolength'
            'AudiolengthF'
            'Audiorate'
            'catch'
            'Ceil'
            'Chr'
            'clip'
            'cos'
            'default'
            'defined'
            'Eval'
            'Exist'
            'Exp'
            'false'
            'FindStr'
            'Float'
            'Floor'
            'Frac'
            'FrameCount'
            'FrameRate'
            'FramerateDenominator'
            'FramerateNumerator'
            'function'
            'GetParity'
            'global'
            'HasAudio'
            'HasVideo'
            'Height'
            'hexValue'
            'Import'
            'Int'
            'IsAudioFloat'
            'IsAudioInt'
            'IsBool'
            'IsClip'
            'IsFieldBased'
            'IsFloat'
            'IsFrameBased'
            'IsInt'
            'IsInterleaved'
            'IsPlanar'
            'IsRGB'
            'IsRGB24'
            'IsRGB32'
            'IsString'
            'IsYUV'
            'IsYUY2'
            'IsYV12'
            'LCase'
            'LeftStr'
            'Log'
            'max'
            'MidStr'
            'min'
            'Muldiv'
            'NOP'
            'Pi'
            'Pow'
            'Rand'
            'return'
            'RevStr'
            'Round'
            'Select'
            'SetmemoryMax'
            'SetPlanarLegacyAlignment'
            'SetWorkingDir'
            'Sign'
            'sin'
            'Spline'
            'Sqrt'
            'string'
            'StrLen'
            'Time'
            'true'
            'try'
            'UCase'
            'Value'
            'VersionNumber'
            'VersionString'
            'Width')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'#13#10
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      NameFmt = 'Func %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = 'Func %s-1'
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#Comment'
    '"Str", $00FF'
    ''
    '[* nested block comment'
    '[* text here'
    '*]'
    'end of comment *]'
    ''
    'Function MyFunc(clip c) {'
    '    Assert(c.height == 480, "Error")'
    '    Bob(c, height=576)'
    '    return Weave()'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number')
  Extentions = 'avs avsi'
  LexerName = 'AviSynth'
  Notes.Strings = (
    'Author: Alex (Synwrite)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
