object SyntAnal10: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      ChangeCase = ccTitle
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Function separator'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clSkyBlue
    end
    item
      DisplayName = 'Function background'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = 16774389
      FormatType = ftBackGround
    end
    item
      DisplayName = 'Current block bound'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftBackGround
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'OP Keywords'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      Expression = 
        '# ^    search from begin of line '#13#10'# \s*  allow leading spaces'#13#10 +
        '# \S+: 1-n chars followed by :'#13#10'^\s*\S+:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '".*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '#HEX can be written '#13#10'# 0xF9A0'#13#10'# h'#39'F9A0'#39'  or'#13#10'0x[\da-f]+ |'#13#10'h'#39'[' +
        '\da-f]+('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Bin'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '#binary can be written '#13#10'# 0b01010101'#13#10'# b'#39'01010101'#39'  or'#13#10'0b[01]' +
        '+ |'#13#10'b'#39'[01]+('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '#first charecter can'#39't be digit'#13#10'[_a-z]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
        'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preproc'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/,\.;:\(\)=<>\+\-&%\$]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = #39'.*'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Alias'
            'AND'
            'As'
            'At'
            'Call'
            'Case'
            'Dim'
            'Do'
            'Else'
            'End'
            'Exit'
            'For'
            'Function'
            'Get'
            'Gosub'
            'Goto'
            'If'
            'Loop'
            'Macro'
            'Next'
            'NOT'
            'OR'
            'Repeat'
            'Return'
            'Step'
            'Sub'
            'Then'
            'To'
            'Until'
            'While'
            'XOR')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ADOff'
            'bootloader'
            'Byte'
            'ClearTimer'
            'CLS'
            'Dir'
            'DisplayChar'
            'DisplayValue'
            'EPRead'
            'EPWrite'
            'Hex'
            'HPWM'
            'HSerPrint'
            'HSerReceive'
            'HSerSend'
            'I2CReceive'
            'I2CSend'
            'I2CStart'
            'I2CStop'
            'Ignore'
            'In'
            'IndCall'
            'InitSer'
            'InitTimer0'
            'InitTimer1'
            'INKEY'
            'Instr'
            'IntOff'
            'IntOn'
            'KeypadData'
            'KeypadRaw'
            'LCase'
            'LCDCreateChar'
            'LCDHex'
            'LCDWriteChar'
            'Left'
            'Locate'
            'm'
            'Mid'
            'ms'
            'Off'
            'On'
            'On Interrupt'
            'Out'
            'Peek'
            'Poke'
            'Pot'
            'Print'
            'ProgramErase'
            'ProgramRead'
            'ProgramWrite'
            'PS2ReadByte'
            'PS2SetKBLeds'
            'PS2WriteByte'
            'PulseOut'
            'Put'
            'PWMOff'
            'PWMOn'
            'PWMOut'
            'Random'
            'Randomize'
            'ReadAD'
            'ReadTable'
            'Right'
            'Rotate'
            's'
            'sec'
            'Select'
            'SerPrint'
            'SerReceive'
            'SerSend'
            'Set'
            'ShortTone'
            'Simple'
            'SPIMode'
            'SPITransfer'
            'StartTimer'
            'StopTimer'
            'Str'
            'Swap'
            'Swap4'
            'Tone'
            'UCase'
            'us'
            'Val'
            'Wait'
            'Word')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub begin line break'
      StyleName = 'Function separator'
      BlockName = 'Sub'
      NotParent = True
      BlockType = btLineBreak
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'sub')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub end line break'
      StyleName = 'Function separator'
      BlockType = btLineBreak
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'sub')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      LinePos = lbBottom
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'macro'
            'sub')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sub'
      StyleName = 'Function background'
      ConditionList = <
        item
          TagList.Strings = (
            'function'
            'macro'
            'sub')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'exit')
          CondType = tcNotEqual
          IgnoreCase = True
        end>
      BlockEnd = 'Sub end'
      Highlight = True
      NameFmt = '%s0 %s-1'
      DynHighlight = dhRange
      HighlightPos = cpBound
      DrawStaple = True
      CollapseFmt = '%s0 %s-1'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Gosub End'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'return')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Label'
      StyleName = 'Function background'
      ConditionList = <
        item
          TagList.Strings = (
            '^\s*\S+:')
          CondType = tcMask
        end>
      BlockEnd = 'Gosub End'
      Highlight = True
      NameFmt = '%s0'
      DynHighlight = dhRange
      HighlightPos = cpBound
      DynSelectMin = True
      CollapseFmt = '%sz0'
      SelfClose = True
      TreeItemImage = 7
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Begin'
      StyleName = 'Current block bound'
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'if'
            'property'
            'select'
            'type'
            'with')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      IdentIndex = 1
      BlockOffset = 1
      BlockEnd = 'End'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '%s1 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'End'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      SameIdent = True
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Dim'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'dim')
          TokenTypes = 4
          IgnoreCase = True
        end>
      NotCollapsed = True
      GroupFmt = 'Variables'
      HighlightPos = cpBound
      NoEndRule = True
      TreeItemImage = 4
      TreeGroupImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'For'
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'For end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'For...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'For end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'next')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Do'
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Do end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = 'Do...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Do end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'loop')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    #39'Test'
    #39'Test'
    '#chip 16F819, 8  '
    '#config NN = 0xF0 + h'#39'F0F0'#39' + b'#39'1010'#39' + "Test"'
    ''
    'Dir PORTA.0 In'#9#9' '
    'Dir FullLight Out'#9' '
    'Set FullLight Off'#9' '
    ''
    'Do'
    '  Label:'
    '  EPWrite(DataCount, ReadAD(ReadSensor))'
    ''
    '  If DataCount = 255 then'
    '    Set FullLight On'#9' '
    '    End'#9#9#9' '
    '  End If'
    ''
    '  DataCount += 1'#9#9#9#9#39'Increment EEPROM location'
    '  Wait ReadWait'#9#9#9#9#39'Wait before taking another reading'
    'Loop')
  TokenTypeNames.Strings = (
    'Label'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Preproc')
  Extentions = 'gcb bas pbs h'
  LexerName = 'Great Cow Basic'
  SkipSpaces = False
  Notes.Strings = (
    'Alex (Synwrite)'
    'Tests: http://www.greatcowbasic.com/sample-projects.html')
  LineComment = #39
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
