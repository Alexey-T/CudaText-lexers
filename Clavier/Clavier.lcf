object SyntAnal18: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id spec'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 0'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)//\*.*?(\*//|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 2
      Expression = '("|'#39') .*? (\1|$)'#13#10'#double quotas are never written'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 5
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id spec'
      StyleName = 'Id spec'
      TokenType = 6
      Expression = '\\\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      TokenType = 7
      Expression = '\< [^\<\s].+? \>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 4
      Expression = '[\+\*\(\)\[\]\{\}\<>\,~!&\|;:=%\^\#\$\?\\@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 3
      Expression = '0x[0-9a-f_]+ |'#13#10'0b[01_]+ |'#13#10'0g[0-7_]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 3
      Expression = '([\d_]+ \.)? [\d_]+ e [\+\-]? [\d_]+ |'#13#10'[\d_]+ \. [\d_]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 3
      Expression = '[\d_]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords1'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'FALSE'
            'IN'
            'IS'
            'TRUE')
          TokenTypes = 32
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'keywords2'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'BREAK'
            'BY'
            'CATCH'
            'CLASS'
            'COLLECTION'
            'CONST'
            'CONSTANT'
            'CONSTRUCTED'
            'CONSTRUCTION'
            'CONTENTS'
            'CONTINUE'
            'DEFINE'
            'DESTRUCTION'
            'DO'
            'DOWNTO'
            'EACH'
            'ELSE'
            'ENUM'
            'ENUMERATION'
            'EVENT'
            'FALSE'
            'FOR'
            'FOREVER'
            'FUNCTION'
            'IF'
            'IMPORT'
            'LOOP'
            'MODULE'
            'NEW'
            'NONE'
            'OWNED'
            'PUSH'
            'RAISE'
            'REPEAT'
            'RESULT'
            'SWITCH'
            'THEN'
            'TO'
            'TRUE'
            'UNTIL'
            'UPDATE'
            'WHILE')
          TokenTypes = 32
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'keywords\'
      Enabled = False
      StyleName = 'Id spec'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '\DUMMY'
            '\GLOBALS'
            '\OVERRIDE'
            '\RECURSIVE'
            '\REF'
            '\TEMP'
            '\TEMPORARY'
            '\WARNINGS')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'treeitem'
      ConditionList = <
        item
          TokenTypes = 32
        end
        item
          TagList.Strings = (
            'FUNCTION')
          TokenTypes = 32
        end>
      NameFmt = '%s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 16
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 16
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '----------Test'
    '//* Test '
    '*//'
    '1_345+ 0b_0100_1010+ 0g_7_342_001+ 0xFFEA_d44a+'
    '-2.22e2 + 11_E-04'
    ''
    'FUNCTION Init_system_types() \GLOBALS { '
    '         TYPE_BOOLEAN = NEW <Type> >> System_types[] {'
    '                      Module_ = NONE'
    '                      Names[] << "<bool>"'
    '                      Names[] << "<boolean>"'
    '                      Kind = '#39'bool'#39
    '                      Final_name = "Boolean"'
    '         }'
    '         TYPE_EXCEPTION = NEW <Type> >> System_types[] {'
    '                        Module_ = NONE'
    '                        Names[] << "<***>"'
    '                        Names[] << "<*** Any exception>"'
    '                        Kind = '#39'class'#39
    '                        Final_name = "AnyException"'
    '                        Methods[] << NEW <Function> {'
    '                                  Content_item = NONE'
    '                                  Module_ = NONE'
    '                                  Start_line = 0'
    '                                  Names[] << "Throw"'
    
      '                                  Names[] << " Throw_an_exceptio' +
      'n"'
    
      '                                  Final_name = "Throw_an_excepti' +
      'on"'
    '                                  Params[] << NEW <Variable> {'
    '                                           Line = 0'
    '                                           Names[] << "Msg"'
    '                                           Final_name = "X_Msg"'
    '                                           Type_ = TYPE_STRING'
    '                                           IsPublic = TRUE'
    '                                  }'
    '                                  IsPublic = TRUE'
    '                                  Native_unit = "SYSTEM_MODULE"'
    '                        }'
    '         }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'String'
    'Number'
    'Symbol'
    'Id'
    'Id spec'
    'Id type')
  Extentions = 'cla'
  LexerName = 'Clavier'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (Synwrite)')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
