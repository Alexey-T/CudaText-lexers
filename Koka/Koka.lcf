object SyntAnal14: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol 2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\.|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String@'
      StyleName = 'String'
      TokenType = 4
      Expression = '@"(""|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w\-]*'#39'?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\h_]+\b | 0b[01_]+\b | 0o[0-7_]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]* (\.[\d_]*)? e [\+\-]? \d[\d_]*\b |'#13#10'\d[\d_]*\.[\d_]*\b ' +
        '|'#13#10'\.\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number dec'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol (operator)'
      StyleName = 'Symbol 2'
      TokenType = 3
      Expression = '\([=!<>\-\+\*/&\|\^~%]+\)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol { }'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ( )'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '[\.,:;\[\]~%\#@\?] | -> | := | \+\+ | \-\- | && | \|\| | \^\^ |'#13 +
        #10'[\-\+\*/!=<>&\|\^]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'alias'
            'as'
            'con'
            'control'
            'ctl'
            'effect'
            'elif'
            'else'
            'exists'
            'extern'
            'fn'
            'forall'
            'foreach'
            'fun'
            'function'
            'handle'
            'handler'
            'hiding'
            'if'
            'import'
            'in'
            'infix'
            'infixl'
            'infixr'
            'interface'
            'mask'
            'match'
            'module'
            'named'
            'override'
            'prefix'
            'private'
            'pub'
            'public'
            'qualified'
            'rcontrol'
            'return'
            'some'
            'struct'
            'then'
            'type'
            'unsafe'
            'val'
            'var'
            'with'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id standard'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'behind'
            'c'
            'co'
            'cs'
            'extend'
            'external'
            'file'
            'import'
            'include'
            'inline'
            'js'
            'linear'
            'noinline'
            'open'
            'print'
            'println'
            'raw'
            'rec'
            'reference'
            'use'
            'using'
            'value')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'bool'
            'char'
            'Cons'
            'div'
            'double'
            'exn'
            'False'
            'float'
            'int'
            'int16'
            'int32'
            'int64'
            'int8'
            'io'
            'Just'
            'list'
            'maybe'
            'ndet'
            'Nil'
            'Nothing'
            'pure'
            'string'
            'total'
            'True'
            'uint16'
            'uint32'
            'uint64'
            'uint8')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 126
        end
        item
          TagList.Strings = (
            'extern'
            'fun'
            'function')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      RefToCondEnd = True
      HighlightPos = cpBound
      CancelNextRules = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 128
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'is-nil + x'#39' + Cons + True + fold-right'
    'n-x-1      // illegal, a digit cannot follow a dash'
    'n-x - 10    // identifier "n-x" minus 1'
    'n - x - 10  // n minus x minus 1'
    'fun eq2( x : int, '
    '          y : int ) : io bool {  '
    '  print("calc " ++'
    '        "ality");'
    '  val result = if (x == y)'
    '                then True'
    '                else False;'
    '  result'
    '}'
    ''
    
      'private inline extern (>=) : (ssize_t,ssize_t) -> bool   { inlin' +
      'e "(#1 >= #2)" }')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ( )'
    'Symbol { }')
  Extentions = 'kk'
  LexerName = 'Koka'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Docs: https://koka-lang.github.io/koka/doc/book.html')
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
