object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id std func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment block'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(['#39'"])(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d+\.?\d* e[\+\-]? \d+\b |'#13#10'\.\d+ e[\+\-]?\d+\b |'#13#10'\d+\.\d* |'#13#10'\' +
        '.\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(?-i)\d+\b|\binfinity\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[;\[\],~\.\\\?] | [\+\-\*/&\|\^!<>=~%:]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'arc'
            'binary'
            'card'
            'check'
            'circular'
            'close'
            'coef'
            'coeff'
            'cover'
            'data'
            'default'
            'dimen'
            'dimension'
            'display'
            'drop'
            'else'
            'end'
            'exists'
            'first'
            'fix'
            'for'
            'forall'
            'format'
            'from'
            'function'
            'if'
            'in'
            'include'
            'integer'
            'last'
            'let'
            'maximize'
            'member'
            'minimize'
            'model'
            'net_in'
            'net_out'
            'next'
            'nextw'
            'node'
            'not'
            'obj'
            'objective'
            'option'
            'or'
            'ord'
            'ord0'
            'ordered'
            'param'
            'pipe'
            'prev'
            'prevw'
            'print'
            'printf'
            'quit'
            'repeat'
            'reset'
            'restore'
            'reversed'
            'set'
            'shell'
            'solution'
            'solve'
            'subj'
            'subject'
            'symbolic'
            'then'
            'to'
            'to_come'
            'unfix'
            'update'
            'var'
            'while'
            'within'
            'write')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id std func'
      StyleName = 'Id std func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'acos'
            'acosh'
            'alias'
            'asin'
            'asinh'
            'atan'
            'atan2'
            'atanh'
            'Beta'
            'by'
            'Cauchy'
            'ceil'
            'cos'
            'cross'
            'diff'
            'difference'
            'div'
            'exp'
            'Exponential'
            'floor'
            'Gamma'
            'inter'
            'intersect'
            'intersection'
            'Irand224'
            'less'
            'log'
            'log10'
            'max'
            'min'
            'mod'
            'Normal'
            'Poisson'
            'precision'
            'product'
            'round'
            'setof'
            'sin'
            'sinh'
            'sqrt'
            'sum'
            'symdiff'
            'tan'
            'tanh'
            'trunc'
            'Uniform'
            'Uniform01'
            'union')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id std'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'body'
            'dinit'
            'dinit0'
            'dual'
            'init'
            'init0'
            'lb'
            'lb0'
            'lb1'
            'lb2'
            'lbs'
            'ldual'
            'lrc'
            'lslack'
            'slack'
            'ub'
            'ub0'
            'ub1'
            'ub2'
            'ubs'
            'udual'
            'urc'
            'uslack'
            'val')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# comment'
    'function expectation;'
    'var area{c in Crops} >= -infinity;'
    'param Yield{c in Crops, s in Scen}; # T/acre'
    ''
    'maximize profit:'
    '  expectation('
    '    sum{c in Crops} PlantingCost[c] * area[c];'
    ''
    's.t. sellBeets:'
    
      '  sell['#39'beets'#39'] + sell_excess <= RandomYield['#39'beets'#39'] * area['#39'be' +
      'ets'#39'];'
    ''
    'param Yield:'
    '           below average above :='
    '    beets   20.0 30.10e-2;')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ;'
    'Symbol {}'
    'Symbol ()')
  Extentions = 'ampl'
  LexerName = 'AMPL'
  Notes.Strings = (
    'Alexey (CudaText)')
  RestartFromLineStart = True
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
