object SyntAnal7: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id soft keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String $'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String `'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '[br]?(['#39'"])(\\.|.)*?\1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\._*\d+ | \b\d[\d_]*(\._*[\d_]*)?)'#13#10'(_*e[\+\-]?_*\d[\d_]*)?n?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '\.|,|;|=|:=|:+|\->|\+|\-|\*|/|<=?|>=?|%|\[|\]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String $$'
      StyleName = 'String $'
      TokenType = 8
      Expression = '(?s)\$\$.*?(\$\$|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String $id$'
      StyleName = 'String $'
      TokenType = 8
      Expression = '(?s)\$([a-z]\w*)\$.*?(\$\1\$|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String `'
      StyleName = 'String `'
      TokenType = 9
      Expression = '`.*?(`|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 2
      Expression = '[\$@]\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'administer'
            'alter'
            'analyze'
            'and'
            'anyarray'
            'anyobject'
            'anytuple'
            'begin'
            'by'
            'case'
            'check'
            'commit'
            'configure'
            'create'
            'deallocate'
            'delete'
            'describe'
            'detached'
            'discard'
            'distinct'
            'do'
            'drop'
            'else'
            'end'
            'except'
            'exists'
            'explain'
            'extending'
            'fetch'
            'filter'
            'for'
            'get'
            'global'
            'grant'
            'group'
            'if'
            'ilike'
            'import'
            'in'
            'insert'
            'intersect'
            'introspect'
            'is'
            'like'
            'limit'
            'listen'
            'load'
            'lock'
            'match'
            'module'
            'move'
            'never'
            'not'
            'notify'
            'offset'
            'on'
            'optional'
            'or'
            'over'
            'partition'
            'prepare'
            'raise'
            'refresh'
            'revoke'
            'rollback'
            'select'
            'set'
            'single'
            'start'
            'typeof'
            'union'
            'update'
            'variadic'
            'when'
            'window'
            'with')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id soft keyword'
      StyleName = 'Id soft keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'abstract'
            'access'
            'after'
            'AGGREGATE'
            'alias'
            'all'
            'allow'
            'annotation'
            'applied'
            'as'
            'asc'
            'assignment'
            'before'
            'cardinality'
            'cast'
            'committed'
            'config'
            'conflict'
            'CONSTRAINT'
            'cube'
            'current'
            'database'
            'ddl'
            'declare'
            'default'
            'deferrable'
            'deferred'
            'delegated'
            'deny'
            'desc'
            'each'
            'empty'
            'extension'
            'false'
            'final'
            'first'
            'from'
            'function'
            'future'
            'implicit'
            'index'
            'infix'
            'inheritable'
            'instance'
            'into'
            'isolation'
            'last'
            'link'
            'migration'
            'multi'
            'named'
            'object'
            'of'
            'only'
            'onto'
            'operator'
            'optionality'
            'order'
            'orphan'
            'overloaded'
            'owned'
            'package'
            'policy'
            'populate'
            'postfix'
            'prefix'
            'property'
            'proposed'
            'pseudo'
            'read'
            'reject'
            'release'
            'rename'
            'required'
            'reset'
            'restrict'
            'rewrite'
            'role'
            'roles'
            'rollup'
            'savepoint'
            'scalar'
            'schema'
            'sdl'
            'serializable'
            'session'
            'source'
            'sql'
            'superuser'
            'system'
            'target'
            'ternary'
            'then'
            'to'
            'transaction'
            'trigger'
            'true'
            'type'
            'unless'
            'using'
            'verbose'
            'version'
            'view'
            'write')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id builtins'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'cal'
            'cfg'
            'enc'
            'ext'
            'fts'
            'math'
            'pg'
            'std'
            'sys')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id builtins func'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'all'
            'any'
            'array_agg'
            'array_unpack'
            'bounded_above'
            'bounded_below'
            'count'
            'len'
            'multirange_unpack'
            'random'
            'range_unpack'
            're_match'
            're_test'
            'sum'
            'uuid_generate_v1mc')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id builtins 3'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__source__'
            '__subject__'
            '__type__'
            'bool'
            'constraint'
            'enum'
            'exclusive'
            'expression'
            'int64'
            'max_value'
            'min_value'
            'multirange'
            'one_of'
            'range'
            'regexp'
            'str')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# Comment'
    'CreatE CONSTRAINT std::regexp EXTENDING std::constraint {'
    '    SET errmessage := '#39'invalid {subject}'#39';'
    '    SET expr := re_test(subject, $0);'
    '};'
    ''
    'SELECT'
    '    test::NamedObject {'
    '        abc,'
    '        defd,'
    '        name: {'
    '            @lang'
    '        }'
    '    }'
    'FILTER'
    '    test::`NamedObject`.name = '#39'Test'#39';')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()'
    'String $'
    'String `')
  Extentions = 'edgeql esdl'
  LexerName = 'EdgeQL-ESDL'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
