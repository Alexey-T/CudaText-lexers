object SyntAnal17: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String alt'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id standard'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Bracket bg'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftBackGround
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end
    item
      DisplayName = 'Tag bracket'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag name'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag param'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Tag param bad'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BorderTypeBottom = blWavyLine
      BorderColorBottom = clRed
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '#handle comment before </script>'#13#10'//.*? (?=<[/\w]) |'#13#10'//.* '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)" (\\\\|\\"|.)*? ("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String2'
      StyleName = 'String'
      TokenType = 4
      Expression = #39' (\\\\|\\'#39'|.)*? ('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String ticks'
      StyleName = 'String alt'
      TokenType = 4
      Expression = '`.+?`'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String regex'
      StyleName = 'String alt'
      TokenType = 4
      Expression = 
        '#before / must be some char'#13#10'(?<=[=\(&!]\s*) / (\\/|\\\\|.)*? (/' +
        '[gim]*|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag name'
      StyleName = 'Tag name'
      StatesAdd = 2
      StatesRemove = 1
      StatesPresent = 1
      TokenType = 8
      Expression = '\w+[\w\.\:]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag param bad'
      StyleName = 'Tag param bad'
      StatesPresent = 2
      StatesAbsent = 8
      TokenType = 7
      Expression = '\w*[\#\?\.:]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag param bad ='
      StyleName = 'Tag param bad'
      StatesPresent = 2
      StatesAbsent = 8
      TokenType = 7
      Expression = '[=/]\s* [\w\-\$]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Tag param'
      StyleName = 'Tag param'
      StatesPresent = 2
      StatesAbsent = 8
      TokenType = 7
      Expression = '[\w\$][\w\-]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_\$]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ (\.\d+)? e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '<'
      StyleName = 'Tag bracket'
      StatesAdd = 1
      StatesRemove = 8
      TokenType = 6
      Expression = '(</) | (?<!\w\x20*) <'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '>'
      StyleName = 'Tag bracket'
      StatesRemove = 3
      TokenType = 6
      Expression = '/?>'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '{'
      StyleName = 'Symbol'
      StatesAdd = 8
      TokenType = 3
      Expression = '\{'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '}'
      StyleName = 'Symbol'
      StatesRemove = 8
      TokenType = 3
      Expression = '\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.\?`@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^\$~!%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'arguments'
            'await'
            'boolean'
            'break'
            'byte'
            'case'
            'catch'
            'char'
            'class'
            'const'
            'continue'
            'debugger'
            'default'
            'delete'
            'do'
            'double'
            'else'
            'enum'
            'eval'
            'export'
            'extends'
            'false'
            'final'
            'finally'
            'float'
            'for'
            'from'
            'function'
            'goto'
            'if'
            'implements'
            'import'
            'in'
            'instanceof'
            'int'
            'interface'
            'let'
            'long'
            'native'
            'new'
            'null'
            'package'
            'private'
            'protected'
            'public'
            'return'
            'short'
            'static'
            'super'
            'switch'
            'synchronized'
            'this'
            'throw'
            'throws'
            'transient'
            'true'
            'try'
            'typeof'
            'var'
            'void'
            'volatile'
            'while'
            'with'
            'yield')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id standard'
      StyleName = 'Id standard'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Array'
            'Date'
            'hasOwnProperty'
            'Infinity'
            'isFinite'
            'isNaN'
            'isPrototypeOf'
            'length'
            'Math'
            'name'
            'NaN'
            'Number'
            'Object'
            'prototype'
            'String'
            'toString'
            'undefined'
            'valueOf')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'for/if'
      Enabled = False
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            'for'
            'if')
          TokenTypes = 4
        end>
      NotCollapsed = True
      DisplayInTree = False
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Bracket bg'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      NameFmt = '{ ... }'
      DynHighlight = dhBound
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'name: function'
      ConditionList = <
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            ':')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      NameFmt = 'function %s0'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'function %s0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function'
      ConditionList = <
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
        end>
      BlockEnd = 'function end'
      EndOfTextClose = True
      NameFmt = '%s0~s[)]'
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '%s0~s[)]'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function end'
      BlockName = 'function'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'var'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'var')
          TokenTypes = 4
        end>
      NotCollapsed = True
      DisplayInTree = False
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    ''
    '  render() {'
    '    var {email} = this.state;'
    '    return ('
    '      <div {...this.props}>'
    '        <input'
    '          value={email}'
    '          required />'
    '      </div>'
    '    );'
    '  }'
    ''
    '<div /* comment */ onClick={this.onClick}>'
    '  <Emoji.stuck_out_tongue />'
    '  <StyledForms.Input'
    '    $parent={this}'
    '    has_emoji={true}'
    '    /* here'#39's another comment */'
    '    className='#39'styled-input'#39'>'
    '  </StyledForms.Input>'
    '</div>'
    '        '
    '//not tag  '
    'var a = b<cat()'
    'var a = b < cat()'
    'var a = b <cat[1]'
    'var a = b < cat[1]'
    ''
    '//'
    '// GOOD JSX'
    '//'
    '<div className key>'
    '<div /*cats*/ className /*dogs*/ key>'
    '<div /*cats*/className/*dogs*/ key>'
    '<div'
    '  /*cats*/className // dogs'
    '  // more cats'
    '  />'
    '<div className='#39'MyClass'#39' key>'
    '<div className='#39'MyClass'#39' key={1} >'
    '<div className='#39'MyClass'#39' key={1} />'
    '<div className = '#39'MyClass'#39' key={1} />'
    '<div className = '#39'MyClass'#39' key={() => this.setState({})} />'
    '<div class-Name= '#39'MyClass'#39' key />'
    '<div className= '#39'MyClass'#39' key =  '#39#39' />'
    '<div className = '#39'MyClass'#39
    '  key={1} />'
    '<div'
    '  className = '#39'MyClass'#39
    '  key={1} />'
    '<div className'
    '  = '#39'MyClass'#39' key={1} />'
    '<div className'
    '  ='
    '  '#39'MyClass'#39' key={1} />'
    '<div className/*cats*/= '#39'MyClass'#39' key />'
    '<div className=/*dogs*/'#39'MyClass'#39' key />'
    '<div className/*cats*/=/*dogs*/'#39'MyClass'#39' key />'
    ''
    '//'
    '// BAD JSX'
    '//'
    '<div className='#39'MyClass'#39' key / x>'
    '<div className? />'
    '<div className? = '#39'MyClass'#39' key={1} />'
    '<div .className= '#39'MyClass'#39' key={1} />'
    '<div clas#sName= '#39'MyClass'#39' key />'
    '<div class:Name ='#39'MyClass'#39' key />'
    '<div className '#39'MyClass'#39' key />'
    '<div'
    '  key'
    '  {1} />'
    '<div className= '#39'MyClass'#39' key=cats />'
    '<div className= '#39'MyClass'#39' key==cats />'
    '<div className= '#39'MyClass'#39' key== cats />'
    '<div className= '#39'MyClass'#39' key='
    'cats />'
    '<div className='#39'MyClass'#39' = '#39'cats'#39' key= >'
    '<div = key= >'
    '<div'
    '  ='
    '  key= >'
    '<div'
    '  key'
    '  = >'
    '<div'
    '  '#39'asdasd'#39'>'
    '<div < >'
    '< >'
    '<div className '#39'MyClass'#39' key=cats />'
    '<div className= '#39'MyClass'#39' key=cats')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'TagBracket'
    'TagParam'
    'TagName')
  Extentions = 'jsx babel es6'
  LexerName = 'JavaScript Babel'
  Notes.Strings = (
    'Alexey (Synwrite)'
    ''
    'Uses parser-states (to hilite tag attribs):'
    ' 1: set by "<", reset by ">"'
    ' 2: set by tagname after "<"'
    ' 8: set by "{", reset by "}"'
    ''
    'Test jsx files: https://github.com/babel/babel-sublime')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
