object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id keyword2'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      Expression = '\$\{.+?\}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      EndOfTextClose = True
      DisplayInTree = False
      RefToCondEnd = True
      HighlightPos = cpBound
      CollapseFmt = '...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment'
      RefToCondEnd = True
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Keyw'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'add_custom_command'
            'add_custom_target'
            'add_definitions'
            'add_dependencies'
            'add_executable'
            'add_library'
            'add_subdirectory'
            'add_test'
            'aux_source_directory'
            'build_command'
            'build_name'
            'cmake_minimum_required'
            'configure_file'
            'create_test_sourcelist'
            'else'
            'elseif'
            'enable_language'
            'enable_testing'
            'endforeach'
            'endfunction'
            'endif'
            'endmacro'
            'endwhile'
            'exec_program'
            'execute_process'
            'export_library_dependencies'
            'file'
            'find_file'
            'find_library'
            'find_package'
            'find_path'
            'find_program'
            'fltk_wrap_ui'
            'foreach'
            'function'
            'get_cmake_property'
            'get_directory_property'
            'get_filename_component'
            'get_source_file_property'
            'get_target_property'
            'get_test_property'
            'if'
            'include'
            'include_directories'
            'include_external_msproject'
            'include_regular_expression'
            'install'
            'install_files'
            'install_programs'
            'install_targets'
            'link_directories'
            'link_libraries'
            'list'
            'load_cache'
            'load_command'
            'macro'
            'make_directory'
            'mark_as_advanced'
            'math'
            'message'
            'option'
            'output_required_files'
            'project'
            'qt_wrap_cpp'
            'qt_wrap_ui'
            'remove'
            'remove_definitions'
            'separate_arguments'
            'set'
            'set_directory_properties'
            'set_source_files_properties'
            'set_target_properties'
            'set_tests_properties'
            'site_name'
            'source_group'
            'string'
            'subdir_depends'
            'subdirs'
            'target_link_libraries'
            'try_compile'
            'try_run'
            'use_mangled_mesa'
            'utility_source'
            'variable_requires'
            'vtk_make_instantiator'
            'vtk_wrap_java'
            'vtk_wrap_python'
            'vtk_wrap_tcl'
            'while'
            'write_file')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Keyw 2'
      StyleName = 'Id keyword2'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ABSOLUTE'
            'ABSTRACT'
            'ADDITIONAL_MAKE_CLEAN_FILES'
            'ALL'
            'AND'
            'APPEND'
            'APPLE'
            'ARGS'
            'ASCII'
            'BEFORE'
            'BORLAND'
            'CACHE'
            'CACHE_VARIABLES'
            'CLEAR'
            'CMAKE_COMPILER_2005'
            'COMMAND'
            'COMMAND_NAME'
            'COMMANDS'
            'COMMENT'
            'COMPARE'
            'COMPILE_FLAGS'
            'COPYONLY'
            'CYGWIN'
            'DEFINE_SYMBOL'
            'DEFINED'
            'DEPENDS'
            'DOC'
            'EQUAL'
            'ESCAPE_QUOTES'
            'EXCLUDE'
            'EXCLUDE_FROM_ALL'
            'EXISTS'
            'EXPORT_MACRO'
            'EXT'
            'EXTRA_INCLUDE'
            'FATAL_ERROR'
            'FILE'
            'FILES'
            'FORCE'
            'GENERATED'
            'GLOB'
            'GLOB_RECURSE'
            'GREATER'
            'GROUP_SIZE'
            'HEADER_FILE_ONLY'
            'HEADER_LOCATION'
            'IMMEDIATE'
            'INCLUDE_DIRECTORIES'
            'INCLUDE_INTERNALS'
            'INCLUDE_REGULAR_EXPRESSION'
            'INCLUDES'
            'LESS'
            'LINK_DIRECTORIES'
            'LINK_FLAGS'
            'LOCATION'
            'MACOSX_BUNDLE'
            'MACROS'
            'MAIN_DEPENDENCY'
            'MAKE_DIRECTORY'
            'MATCH'
            'MATCHALL'
            'MATCHES'
            'MINGW'
            'MODULE'
            'MSVC'
            'MSVC_IDE'
            'MSVC60'
            'MSVC70'
            'MSVC71'
            'MSVC80'
            'MSYS'
            'NAME'
            'NAME_WE'
            'NO_SYSTEM_PATH'
            'NOT'
            'NOTEQUAL'
            'OBJECT_DEPENDS'
            'OFF'
            'ON'
            'OPTIONAL'
            'OR'
            'OUTPUT'
            'OUTPUT_VARIABLE'
            'PATH'
            'PATHS'
            'POST_BUILD'
            'POST_INSTALL_SCRIPT'
            'PRE_BUILD'
            'PRE_INSTALL_SCRIPT'
            'PRE_LINK'
            'PREFIX'
            'PREORDER'
            'PROGRAM'
            'PROGRAM_ARGS'
            'PROPERTIES'
            'QUIET'
            'RANGE'
            'READ'
            'REGEX'
            'REGULAR_EXPRESSION'
            'REPLACE'
            'REQUIRED'
            'RETURN_VALUE'
            'RUNTIME_DIRECTORY'
            'SEND_ERROR'
            'SHARED'
            'SOURCES'
            'STATIC'
            'STATUS'
            'STREQUAL'
            'STRGREATER'
            'STRLESS'
            'SUFFIX'
            'TARGET'
            'TOLOWER'
            'TOUPPER'
            'VAR'
            'VARIABLES'
            'VERSION'
            'WATCOM'
            'WIN32'
            'WRAP_EXCLUDE'
            'WRITE')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'macro'
      ConditionList = <
        item
          TagList.Strings = (
            'macro')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'macro end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'macro end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endmacro')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach'
      ConditionList = <
        item
          TagList.Strings = (
            'foreach')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'foreach end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endforeach')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            'function')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'func end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endfunction')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while'
      ConditionList = <
        item
          TagList.Strings = (
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'while end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'while end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endwhile')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#Text'
    '#Text'
    'function(verify_app)'
    '  exec_program(${CMAKE_COMPILER}'
    '    ARGS -dumpversion)'
    '  if(NOT verified)'
    '    message(FATAL_ERROR "error: verify_app failed")'
    '  endif(NOT verified)'
    'endfunction(verify_app)')
  TokenTypeNames.Strings = (
    'Var'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer')
  Extentions = 'cmake /CMakeLists.txt'
  LexerName = 'CMake'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)'
    'Test: CMake distributive')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
