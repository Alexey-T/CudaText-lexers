object SyntAnal10: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '" .*? ("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^\*.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w-]*\w'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 6
      Expression = ':\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!%\?~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ABSTRACT'
            'ADD'
            'ADD-CORRESPONDING'
            'ADJACENT'
            'ALIASES'
            'ALL'
            'AND'
            'APPEND'
            'AS'
            'ASCENDING'
            'ASSIGN'
            'ASSIGNED'
            'ASSIGNING'
            'AT'
            'AUTHORITY-CHECK'
            'BACK'
            'BEGIN'
            'BETWEEN'
            'BINARY'
            'BIT'
            'BLOCK'
            'BREAK-POINT'
            'BUFFER'
            'BY'
            'BYTE'
            'CA'
            'CALL'
            'CASE'
            'CATCH'
            'CHANGE'
            'CHANGING'
            'CHECK'
            'CHECKBOX'
            'CLASS'
            'CLASS-DATA'
            'CLASS-EVENTS'
            'CLASS-METHODS'
            'CLEANUP'
            'CLEAR'
            'CLIENT'
            'CLOSE'
            'CN'
            'CO'
            'COLLECT'
            'COMMENT'
            'COMMIT'
            'COMMUNICATION'
            'COMPUTE'
            'CONCATENATE'
            'CONDENSE'
            'CONSTANTS'
            'CONTEXTS'
            'CONTINUE'
            'CONTROLS'
            'CONVERT'
            'CP'
            'CREATE'
            'CS'
            'DATA'
            'DATABASE'
            'DATASET'
            'DEFAULT'
            'DEFERRED'
            'DEFINE'
            'DEFINITION'
            'DELETE'
            'DEMAND'
            'DESCENDING'
            'DESCRIBE'
            'DISPLAY'
            'DISTINCT'
            'DIVIDE'
            'DIVIDE-CORRESPONDING'
            'DO'
            'DUPLICATE'
            'DUPLICATES'
            'EDITOR-CALL'
            'ELSE'
            'ELSEIF'
            'END'
            'END-OF-DEFINITION'
            'END-OF-PAGE'
            'END-OF-SELECTION'
            'ENDAT'
            'ENDCASE'
            'ENDCATCH'
            'ENDCLASS'
            'ENDDO'
            'ENDEXEC'
            'ENDFORM'
            'ENDFUNCTION'
            'ENDIF'
            'ENDINTERFACE'
            'ENDLOOP'
            'ENDMETHOD'
            'ENDMODULE'
            'ENDON'
            'ENDPROVIDE'
            'ENDSELECT'
            'ENDTRY'
            'ENDWHILE'
            'ENTRIES'
            'EQ'
            'ERRORS'
            'EVENT'
            'EVENTS'
            'EXCEPTIONS'
            'EXEC'
            'EXIT'
            'EXPORT'
            'EXPORTING'
            'EXTRACT'
            'FETCH'
            'FIELD'
            'FIELD-GROUPS'
            'FIELD-SYMBOLS'
            'FIELDS'
            'FIND'
            'FIRST'
            'FOR'
            'FORM'
            'FORMAT'
            'FORWARD'
            'FRAME'
            'FREE'
            'FROM'
            'FUNCTION'
            'FUNCTION-POOL'
            'GE'
            'GET'
            'GROUP'
            'GT'
            'HANDLER'
            'HAVING'
            'HEADER'
            'HEADING'
            'HELP-REQUEST'
            'HIDE'
            'ID'
            'IF'
            'IMPLEMENTATION'
            'IMPORT'
            'IMPORTING'
            'IN'
            'INCLUDE'
            'INDEX'
            'INITIAL'
            'INITIALIZATION'
            'INNER'
            'INPUT'
            'INSERT'
            'INTERFACE'
            'INTERFACES'
            'INTO'
            'IS'
            'JOIN'
            'KEY'
            'LAST'
            'LE'
            'LEAVE'
            'LEFT'
            'LENGTH'
            'LIKE'
            'LINE'
            'LINE-SELECTION'
            'LINE-SIZE'
            'LINES'
            'LISTBOX'
            'LOAD-OF-PROGRAM'
            'LOCAL'
            'LOCALE'
            'LOOP'
            'LT'
            'LUW'
            'MATCHCODE'
            'MESSAGE'
            'MESSAGE-ID'
            'METHOD'
            'METHODS'
            'MODE'
            'MODIFY'
            'MODULE'
            'MOVE'
            'MOVE-CORRESPONDING'
            'MULTIPLY'
            'MULTIPLY-CORRESPONDING'
            'NA'
            'NE'
            'NEW'
            'NEW-LINE'
            'NEW-PAGE'
            'NO'
            'NO-GAPS'
            'NODES'
            'NON-UNIQUE'
            'NOT'
            'NP'
            'NP'
            'NS'
            'NUMBER'
            'OBJECT'
            'OBLIGATORY'
            'OCCURRENCE'
            'OCCURS'
            'OF'
            'OFFSET'
            'ON'
            'OPEN'
            'OR'
            'ORDER'
            'OUTER'
            'OUTPUT'
            'OVERLAY'
            'PACK'
            'PAGE'
            'PARAMETER'
            'PARAMETERS'
            'PERFORM'
            'PF-STATUS'
            'PLACES'
            'POSITION'
            'PRIMARY'
            'PRINT-CONTROL'
            'PRIVATE'
            'PROGRAM'
            'PROPERTY'
            'PROTECTED'
            'PROVIDE'
            'PUBLIC'
            'PUSHBUTTON'
            'PUT'
            'QUICKINFO'
            'RADIOBUTTON'
            'RAISE'
            'RANGE'
            'RANGES'
            'READ'
            'RECEIVE'
            'REF'
            'REFRESH'
            'REJECT'
            'REPLACE'
            'REPLACEMENT'
            'REPORT'
            'RESERVE'
            'RESOLUTION'
            'RETURN'
            'RIGHT'
            'ROLLBACK'
            'ROWS'
            'RUN'
            'SAP'
            'SCREEN'
            'SCROLL'
            'SEARCH'
            'SECTION'
            'SELECT'
            'SELECT-OPTIONS'
            'SELECTION'
            'SELECTION-SCREEN'
            'SELECTIONS'
            'SEPARATED'
            'SET'
            'SHIFT'
            'SINGLE'
            'SKIP'
            'SORT'
            'SORTED'
            'SPA'
            'SPECIFIED'
            'SPLIT'
            'STANDARD'
            'START-OF-SELECTION'
            'STATICS'
            'STOP'
            'SUBMIT'
            'SUBSCREEN'
            'SUBTRACT'
            'SUBTRACT-CORRESPONDING'
            'SUM'
            'SUPPLY'
            'SUPPRESS'
            'SY-FDPOS'
            'TABBED'
            'TABLE'
            'TABLES'
            'TIME'
            'TITLE'
            'TITLEBAR'
            'TO'
            'TOP-OF-PAGE'
            'TRANSACTION'
            'TRANSFER'
            'TRANSLATE'
            'TRANSPORTING'
            'TRY'
            'TYPE'
            'TYPE-POOL'
            'TYPE-POOLS'
            'TYPES'
            'ULINE'
            'UNASSIGN'
            'UNIQUE'
            'UNPACK'
            'UP'
            'UPDATE'
            'UPPER'
            'USER-COMMAND'
            'USING'
            'VALUE'
            'VALUE-REQUEST'
            'VISIBLE'
            'WHEN'
            'WHERE'
            'WHILE'
            'WINDOW'
            'WITH'
            'WORK'
            'WRITE'
          )
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'do'
      ConditionList = <
        item
          TagList.Strings = (
            'do')
          TokenTypes = 4
        end>
      BlockEnd = 'enddo'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'enddo'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'enddo')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'form'
      ConditionList = <
        item
          TagList.Strings = (
            'form')
          TokenTypes = 4
        end>
      BlockEnd = 'endform'
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endform'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endform')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'try'
      ConditionList = <
        item
          TagList.Strings = (
            'try')
          TokenTypes = 4
        end>
      BlockEnd = 'endtry'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endtry'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endtry')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'endif'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endif'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class'
      ConditionList = <
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = 'endclass'
      NameFmt = '%s0 %s-1 %s-2'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endclass'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endclass')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'method'
      ConditionList = <
        item
          TagList.Strings = (
            'method')
          TokenTypes = 4
        end>
      BlockEnd = 'endmethod'
      NameFmt = '%s0 %s-1 '
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'endmethod'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endmethod')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '"From github'
    
      'form format_columns changing alv_table type ref to cl_salv_table' +
      ' raising cx_salv_msg.'
    ''
    '  if ( alv_table is not bound ).'
    '    return.'
    '  endif.'
    ''
    '  data alv_columns type ref to cl_salv_columns_table.'
    '  data alv_column type ref to cl_salv_column.'
    ''
    
      '  " The reference for alv_columns should be equal to the referen' +
      'ce in the ALV table object.'
    '  alv_columns = alv_table->get_columns( ).'
    ''
    '  try.'
    '    alv_column = alv_columns->get_column( columnname = '#39'ID'#39' ).'
    '    alv_column->set_short_text( '#39'ID #'#39' ).'
    '    alv_column->set_medium_text( '#39'ID Num'#39').'
    '    alv_column->set_long_text( '#39'ID Number'#39' ).'
    '  catch cx_salv_not_found.'
    '  endtry.'
    ''
    'endform.')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Var')
  Extentions = 'abap'
  LexerName = 'ABAP'
  Notes.Strings = (
    'Author: Alexey (Synwrite) & Fabien Wang (fwhcat)'
    'Source code: https://github.com/fwhcat/CudaText-lexer.ABAP'
    'Examples https://github.com/abramsba/AbapExamples'
    'Keywords http://sapbrainsonline.com/abap-tutorial/syntax')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
