object SyntAnal25: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Command'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id unit'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id component'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^[\x20\x09]*(\*|//).*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment inline'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '[;\$].*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|").*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Command'
      StyleName = 'Command'
      Expression = '^[\x20\x09]*\.[a-z_]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\]\.,:;\-\+=/\\\$\^\|@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id device'
      StyleName = 'Id component'
      TokenType = 2
      Expression = '^[\x20\x09]*[axcdjklmnopqrstuwyz][\w@]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id source'
      StyleName = 'Id component'
      TokenType = 2
      Expression = '^[\x20\x09]*[befghvi][\w@]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id unit'
      StyleName = 'Id unit'
      TokenType = 6
      Expression = '(?<=\d+)[npumftgk][smf]?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w@]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b\d+(\.\d+)?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id funcs'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'acos'
            'asin'
            'atan'
            'cos'
            'cosh'
            'db'
            'dc'
            'exp'
            'int'
            'log'
            'log10'
            'lv'
            'lx'
            'max'
            'min'
            'pow'
            'pulse'
            'pwl'
            'pwr'
            'sgn'
            'sign'
            'sin'
            'sinh'
            'sqrt'
            'tan'
            'tanh')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'deriv'
            'find'
            'params'
            'targ'
            'tran'
            'trig'
            'when')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'VIN input 0 DC 10'
    'F1 0 output VMEAS 0.5'
    '  * Comment'
    '  R5 output 0 50K $ Inline comment'
    '  .OP'
    '.TF V(output,0) VIN'
    '.DC VIN 0 20 2'
    '        '
    'Vsrc terminal 0 pulse (0 supply pulse_delay rise_time \'
    '                         fall_time high_time period)'
    '.TRAN step=0.5p stop='#39'pulse_delay+2*period'#39
    '.TRAN 10ns 1us SWEEP load POI 3 1pf 5pf 10pf')
  TokenTypeNames.Strings = (
    'Command'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Unit')
  Extentions = 'sp hsp cdl mdl cir'
  LexerName = 'SPICE'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '*'
  Charset = DEFAULT_CHARSET
end
