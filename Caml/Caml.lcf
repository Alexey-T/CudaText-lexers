object SyntAnal29: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Std id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s) \(\* .*? (\*\) | \Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s) " (\\"|.)*? ("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Identifier'
      TokenType = 2
      Expression = '[a-z_][\w'#39']*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f][\da-f_]* |'#13#10'0o[0-7][0-7_]* |'#13#10'0b[01][01_]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+ [\d_]* (\.[\d_]*)? (e [\+\-]? \d[\d_]*)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = 
        #39'[^\\"'#39']'#39' |'#13#10#39'\\ [\\"'#39'ntbr]'#39' |'#13#10#39'\\ \d\d\d'#39' |'#13#10#39'\\x [\da-f][\da-' +
        'f]'#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preproc'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '^\#\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?\$%'#39']+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keyw'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'as'
            'asr'
            'assert'
            'begin'
            'class'
            'constraint'
            'do'
            'done'
            'downto'
            'else'
            'end'
            'exception'
            'external'
            'false'
            'for'
            'fun'
            'function'
            'functor'
            'if'
            'in'
            'include'
            'inherit'
            'initializer'
            'land'
            'lazy'
            'let'
            'lor'
            'lsl'
            'lsr'
            'lxor'
            'match'
            'method'
            'mod'
            'module'
            'mutable'
            'new'
            'object'
            'of'
            'open'
            'or'
            'parser'
            'private'
            'rec'
            'sig'
            'struct'
            'then'
            'to'
            'true'
            'try'
            'type'
            'val'
            'virtual'
            'when'
            'while'
            'with')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'KeywId'
      StyleName = 'Std id'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'abs_float'
            'acos'
            'array'
            'asin'
            'asr'
            'at_exit'
            'atan'
            'atan2'
            'bool'
            'bool_of_string'
            'ceil'
            'char'
            'char_of_int'
            'classify_float'
            'close_in'
            'close_in_noerr'
            'close_out'
            'close_out_noerr'
            'compare'
            'cos'
            'cosh'
            'decr'
            'do_at_exit'
            'epsilon_float'
            'exit'
            'exp'
            'expm1'
            'failwith'
            'float'
            'float_of_int'
            'float_of_string'
            'floor'
            'flush'
            'flush_all'
            'format'
            'format_of_string'
            'format4'
            'FP_infinite'
            'FP_nan'
            'FP_normal'
            'FP_subnormal'
            'FP_zero'
            'fpclass'
            'frexp'
            'fst'
            'ignore'
            'in_channel'
            'in_channel_length'
            'incr'
            'infinity'
            'input'
            'input_binary_int'
            'input_byte'
            'input_char'
            'input_line'
            'input_value'
            'int'
            'int_of_char'
            'int_of_float'
            'int_of_string'
            'int32'
            'int64'
            'invalid_arg'
            'land'
            'LargeFile'
            'lazy_t'
            'ldexp'
            'list'
            'lnot'
            'log'
            'log10'
            'log1p'
            'lor'
            'lsl'
            'lsr'
            'lxor'
            'max'
            'max_float'
            'max_int'
            'min'
            'min_float'
            'min_int'
            'mod'
            'mod_float'
            'modf'
            'nan'
            'nativeint'
            'neg_infinity'
            'None'
            'not'
            'Open_append'
            'Open_binary'
            'Open_creat'
            'open_flag'
            'open_in'
            'open_in_bin'
            'open_in_gen'
            'Open_nonblock'
            'open_out'
            'open_out_bin'
            'open_out_gen'
            'Open_rdonly'
            'Open_text'
            'Open_trunc'
            'Open_wronly'
            'option'
            'or'
            'Oupen_excl'
            'out_channel'
            'out_channel_length'
            'output'
            'output_binary_int'
            'output_byte'
            'output_char'
            'output_string'
            'output_value'
            'pos_in'
            'pos_out'
            'pred'
            'prerr_char'
            'prerr_endline'
            'prerr_float'
            'prerr_int'
            'prerr_newline'
            'prerr_string'
            'print_char'
            'print_endline'
            'print_float'
            'print_int'
            'print_newline'
            'print_string'
            'raise'
            'read_float'
            'read_int'
            'read_line'
            'really_input'
            'ref'
            'seek_in'
            'seek_out'
            'set_binary_mode_in'
            'set_binary_mode_out'
            'sin'
            'sinh'
            'snd'
            'Some'
            'sqrt'
            'stderr'
            'stdin'
            'stdout'
            'string'
            'string_of_bool'
            'string_of_float'
            'string_of_format'
            'string_of_int'
            'succ'
            'tan'
            'tanh'
            'truncate'
            'unit'
            'unsafe_really_input'
            'valid_float_lexem')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      EndOfTextClose = True
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '(* ... *)'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
        end
        item
          TokenTypes = 2
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      ConditionList = <
        item
          TagList.Strings = (
            'begin')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '1._2 + 1.2e+0_3 + '
    '0b11_00 + 0o12_ + 0xFF_AA'
    #39'a'#39' + '#39'\n'#39' + '#39'\'#39#39' + '#39'\"'#39' + '#39'\123'#39' + '#39'\xAB'#39
    '(*...........*)'
    '(*...........*)'
    '#load "test.txt";;'
    'let answer = input_line stdin in'
    'print_string ("Hello " ^ answer);'
    'print_string ", nice to meet you!\n";'
    'exit 0;;'
    '(*...........'
    '...........*)')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor')
  Extentions = 'ml mli sml thy'
  LexerName = 'Caml'
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Ref:'
    'http://caml.inria.fr'
    'Test:'
    'http://caml.inria.fr/pub/old_caml_site/Examples/')
  Charset = DEFAULT_CHARSET
end
