<<<<<<< HEAD
object SyntAnal15: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id special'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String '#39#39#39
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)'#39#39#39'.+?'#39#39#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'(\\.|.)*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol []'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '<=|>=|==|<|>|\!=|\+=|=|\+|\-|\*|%|/|\.|,|:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b([1-9]+[0-9]*\.[0-9]*)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b(0x[0-9a-f]+)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b([1-9]+[0-9]*|0)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'elif'
            'else'
            'endforeach'
            'endif'
            'foreach'
            'if'
            'not'
            'or')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'false'
            'true')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id special'
      StyleName = 'Id special'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'build_machine'
            'host_machine'
            'meson'
            'target_machine')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id func'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'add_global_arguments'
            'add_global_link_arguments'
            'add_languages'
            'add_project_arguments'
            'add_project_link_arguments'
            'add_test_setup'
            'alias_target'
            'assert'
            'benchmark'
            'both_libraries'
            'build_target'
            'configuration_data'
            'configure_file'
            'custom_target'
            'declare_dependency'
            'dependency'
            'disabler'
            'environment'
            'error'
            'executable'
            'files'
            'find_library'
            'find_program'
            'generator'
            'get_option'
            'get_variable'
            'gettext'
            'import'
            'include_directories'
            'install_data'
            'install_headers'
            'install_man'
            'install_subdir'
            'is_disabler'
            'is_variable'
            'jar'
            'join_paths'
            'library'
            'message'
            'option'
            'project'
            'run_command'
            'run_target'
            'set_variable'
            'shared_library'
            'shared_module'
            'static_library'
            'subdir'
            'subdir_done'
            'subproject'
            'summary'
            'test'
            'vcs_tag'
            'warning')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach'
      ConditionList = <
        item
          TagList.Strings = (
            'foreach')
          TokenTypes = 4
        end>
      BlockEnd = 'foreach end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endforeach')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# Comment'
    'inc = [include_directories('#39'include'#39')]'
    'subdir('#39'src'#39')'
    'sample_cpp_project_bin_deps = ['
    
      '  meson.get_compiler('#39'cpp'#39').find_library('#39'fizz'#39', required : true' +
      ', dirs : library_path)'
    ']'
    '12, 12.34, 0xFF00'
    'foreach ...'
    'endforeach'
    'if get_option('#39'enable-tests'#39')'
    '  subdir('#39'tests'#39')'
    'endif')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ()'
    'Symbol []')
  Extentions = '/meson.build /meson_options.txt'
  LexerName = 'Meson'
  Notes.Strings = (
    'Alexey (CudaText)')
  RestartFromLineStart = True
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
=======
object SyntAnal15: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id special'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String '#39#39#39
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)'#39#39#39'.+?'#39#39#39
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = #39'(\\.|.)*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol []'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\[\]]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '<=|>=|==|<|>|\!=|\+=|=|\+|\-|\*|%|/|\.|,|:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b([1-9]+[0-9]*\.[0-9]*)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b(0x[0-9a-f]+)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b([1-9]+[0-9]*|0)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'elif'
            'else'
            'endforeach'
            'endif'
            'foreach'
            'if'
            'not'
            'or')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'false'
            'true')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id special'
      StyleName = 'Id special'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'build_machine'
            'host_machine'
            'meson'
            'target_machine')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id func'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'add_global_arguments'
            'add_global_link_arguments'
            'add_languages'
            'add_project_arguments'
            'add_project_link_arguments'
            'add_test_setup'
            'alias_target'
            'assert'
            'benchmark'
            'both_libraries'
            'build_target'
            'configuration_data'
            'configure_file'
            'custom_target'
            'declare_dependency'
            'dependency'
            'disabler'
            'environment'
            'error'
            'executable'
            'files'
            'find_library'
            'find_program'
            'generator'
            'get_option'
            'get_variable'
            'gettext'
            'import'
            'include_directories'
            'install_data'
            'install_headers'
            'install_man'
            'install_subdir'
            'is_disabler'
            'is_variable'
            'jar'
            'join_paths'
            'library'
            'message'
            'option'
            'project'
            'run_command'
            'run_target'
            'set_variable'
            'shared_library'
            'shared_module'
            'static_library'
            'subdir'
            'subdir_done'
            'subproject'
            'summary'
            'test'
            'vcs_tag'
            'warning')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end>
      BlockEnd = 'if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endif')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach'
      ConditionList = <
        item
          TagList.Strings = (
            'foreach')
          TokenTypes = 4
        end>
      BlockEnd = 'foreach end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'foreach end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endforeach')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '# Comment'
    'inc = [include_directories('#39'include'#39')]'
    'subdir('#39'src'#39')'
    'sample_cpp_project_bin_deps = ['
    
      '  meson.get_compiler('#39'cpp'#39').find_library('#39'fizz'#39', required : true' +
      ', dirs : library_path)'
    ']'
    '12, 12.34, 0xFF00'
    'foreach ...'
    'endforeach'
    'if get_option('#39'enable-tests'#39')'
    '  subdir('#39'tests'#39')'
    'endif')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ()'
    'Symbol []')
  Extentions = '/meson.build /meson_options.txt'
  LexerName = 'Meson'
  Notes.Strings = (
    'Alexey (CudaText)')
  RestartFromLineStart = True
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
>>>>>>> 365bc49aeb82c74197c95e30788a802e83f01c15
