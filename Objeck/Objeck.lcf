object SyntAnal15: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\#~.*?(~\#|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39')(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b((0x\h+)|((\d+\.?\d*)|(\.\d+))(e(\+|-)?\d+)?)\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Var'
      StyleName = 'Var'
      TokenType = 9
      Expression = '@[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ;'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = ';'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '\[|\]|\.+|,|\?|:+=?|\->|<>|'#13#10'[\+\-\*/&\|\^!<>=~%]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'alias'
            'and'
            'break'
            'bundle'
            'class'
            'consts'
            'continue'
            'critical'
            'do'
            'each'
            'else'
            'enum'
            'for'
            'from'
            'function'
            'if'
            'implements'
            'interface'
            'label'
            'leaving'
            'method'
            'or'
            'other'
            'Parent'
            'return'
            'reverse'
            'select'
            'static'
            'use'
            'virtual'
            'while'
            'xor')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id modifier'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'native'
            'private'
            'public')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'As'
            'Bool'
            'Byte'
            'Char'
            'false'
            'Float'
            'Int'
            'Nil'
            'String'
            'true')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Class'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 62
        end
        item
          TagList.Strings = (
            'bundle'
            'class'
            'enum')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s0~s[{]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end
        item
          CondType = tcSkip
          TokenTypes = 318
        end
        item
          TagList.Strings = (
            'function'
            'method')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-2~s[(]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 128
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 128
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#Comment'
    '#~'
    'comment ~#'
    'class FooBar {'
    #9'New() {'
    #9#9
    #9'}'
    '}'
    ''
    'enum Fie {'
    #9'ONE, TWO, THREE'
    '}'
    ''
    'class ValueHolder {'
    #9'@value : Int;'
    ''
    #9'New(value : Int) {'
    #9#9'@value := GetValue(3);'
    #9'}'
    ''
    #9'method : public : GetValue(a : Int) ~ Int {'
    #9#9'return @value / a;'
    #9'}'
    '}'
    ''
    'enum Foo {'
    #9'A, B, C'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol ;'
    'Symbol {}'
    'Symbol ()'
    'Var')
  Extentions = 'obs'
  LexerName = 'Objeck'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)')
  RestartFromLineStart = True
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
