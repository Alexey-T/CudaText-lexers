object SyntAnal14: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Match braces'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
      VertAlignment = vaTop
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      VertAlignment = vaTop
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      VertAlignment = vaTop
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = []
      VertAlignment = vaTop
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      VertAlignment = vaTop
    end
    item
      DisplayName = 'Memory attribute'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = []
      VertAlignment = vaTop
      FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden, ffVertAlign]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
      VertAlignment = vaTop
      FormatType = ftColor
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
      VertAlignment = vaTop
    end
    item
      DisplayName = 'User keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -14
      Font.Name = 'Courier New'
      Font.Style = []
      VertAlignment = vaTop
    end>
  TokenRules = <
    item
      DisplayName = 'Comment start'
      StyleName = 'Comment'
      TokenType = 14
      Expression = '/\*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment end'
      StyleName = 'Comment'
      TokenType = 15
      Expression = '\*/'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'In block comment'
      StyleName = 'Comment'
      BlockName = 'Comment start'
      TokenType = 1
      Expression = '[^\*/]+|\*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'In block comment 2'
      Enabled = False
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 1'
      Enabled = False
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single inline asm end'
      StyleName = 'Preprocessor'
      TokenType = 11
      Expression = '"\s*\)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single inline asm start'
      StyleName = 'Preprocessor'
      TokenType = 10
      Expression = '\#[\x20\t]*asm\s*\(\s*"'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Inline asm start'
      StyleName = 'Preprocessor'
      TokenType = 12
      Expression = '\#[\x20\t]*asm\s'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Inline asm end'
      StyleName = 'Preprocessor'
      TokenType = 13
      Expression = '\#[\x20\t]*endasm'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(.|\\")*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Any name'
      TokenType = 2
      Expression = '\~?[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Binary'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0b[01]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'HEX'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
        'ut exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor command'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = 
        '\#[\x20\t]*(define|include|warning|error|message|if|ifdef|ifndef' +
        '|elif|else|endif|undef)\s'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '#pragma +/-'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = 
        '^\#[\x20\t]*pragma[\x20\t]+(8bit_enums|asm_function|dstack_warn|' +
        'keep|gen_elpm|glbdef|savereg|opt|optsize|promotechar|regalloc|uc' +
        'har|used|warn)(+|-)\s'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '#pragma library'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '^\#[\x20\t]*pragma[\x20\t]+library\s'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '#pragma vector'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '^\#[\x20\t]*pragma[\x20\t]+vector[\x20\t=]*?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^\.]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 8
      Expression = #39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Comment start'
      ConditionList = <
        item
          TokenTypes = 16384
        end>
      BlockEnd = 'Comment end'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Comment end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 32768
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'User keyword'
      Enabled = False
      StyleName = 'User keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Key words'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__interrupt'
            'auto'
            'bit'
            'bool'
            'break'
            'case'
            'char'
            'const'
            'continue'
            'default'
            'do'
            'double'
            'else'
            'enum'
            'extern'
            'false'
            'float'
            'for'
            'goto'
            'if'
            'inline'
            'int'
            'interrupt'
            'long'
            'register'
            'return'
            'sfrb'
            'sfrw'
            'short'
            'signed'
            'sizeof'
            'static'
            'struct'
            'switch'
            'true'
            'typedef'
            'union'
            'unsigned'
            'void'
            'volatile'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Mem attributes'
      StyleName = 'Memory attribute'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__eeprom'
            '__flash'
            'eeprom'
            'flash')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '#if'
      ConditionList = <
        item
          TagList.Strings = (
            '#if')
          CondType = tcMask
          TokenTypes = 512
        end>
      BlockEnd = '#endif'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '%s0'
      IgnoreAsParent = False
    end
    item
      DisplayName = '#endif'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '#endif')
          TokenTypes = 512
        end>
      BlockEnd = '#if'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function begin'
      BlockName = 'Begin'
      NotParent = True
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end
        item
          CondType = tcSkip
          TokenTypes = 12
        end
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end
        item
          TokenTypes = 4
        end>
      IdentIndex = -1
      BlockEnd = 'function end'
      NameFmt = '%s0~s[)]'
      GroupFmt = 'Functions'
      RefToCondEnd = True
      HighlightPos = cpAny
      CollapseFmt = '%s0 {...}'
      TreeItemImage = 7
      TreeGroupImage = 6
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Begin'
      StyleName = 'Match braces'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      IdentIndex = 1
      BlockEnd = 'End'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTag
      DrawStaple = True
      CollapseFmt = '{...}'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'End'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      BlockEnd = 'Begin'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'function end'
      BlockName = 'function begin'
      StrictParent = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      BlockEnd = 'function begin'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Single inline asm start'
      StyleName = 'Preprocessor'
      ConditionList = <
        item
          TokenTypes = 1024
        end>
      BlockEnd = 'Single inline asm end'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Single inline asm end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 2048
        end>
      BlockEnd = 'Single inline asm start'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Inline asm start'
      StyleName = 'Preprocessor'
      ConditionList = <
        item
          TokenTypes = 4096
        end>
      BlockEnd = 'Inline asm end'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpAny
      DynSelectMin = True
      CollapseFmt = 'Inline assembly ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Inline asm end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 8192
        end>
      BlockEnd = 'Inline asm start'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '( start'
      StyleName = 'Match braces'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 8
        end>
      BlockEnd = ') end'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTag
      IgnoreAsParent = False
    end
    item
      DisplayName = ') end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 8
        end>
      BlockEnd = '( start'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '[ start'
      StyleName = 'Match braces'
      ConditionList = <
        item
          TagList.Strings = (
            '[')
          TokenTypes = 8
        end>
      BlockEnd = '] end'
      NotCollapsed = True
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpBoundTag
      IgnoreAsParent = False
    end
    item
      DisplayName = '] end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ']')
          TokenTypes = 8
        end>
      BlockEnd = '[ start'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <
    item
      DisplayName = 'Inline asm 1'
      StyleName = 'Preprocessor'
      StartExpression = '\#[\x20\t]*asm\s*\(\s*"'
      EndExpression = '"\s*\)'
      SyntAnalyzer = SyntAnal6
    end
    item
      DisplayName = 'Inline asm 2'
      StyleName = 'Preprocessor'
      StartExpression = '\#[\x20\t]*asm\s'
      EndExpression = '\#[\x20\t]*endasm'
      SyntAnalyzer = SyntAnal6
    end>
  SampleText.Strings = (
    'int k; /* begin  comment'
    '/* middle'
    '*/'
    'end */'
    ''
    '#include "test.c"'
    '10, 0x20, 1.2e-3, "test str", eeprom, flash'
    ''
    'void foo()'
    '{'
    ' int a;'
    '}'
    ''
    ' '
    '             '
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor'
    'Single inline asm'
    'Single inline asm end'
    'Token Inline asm'
    'Token Inline asm end'
    'BlCmtStart'
    'BlCmtEnd')
  Extentions = 'c h'
  LexerName = 'CodeVisionAVR'
  RestartFromLineStart = True
  LineComment = '//'
  Charset = DEFAULT_CHARSET
  Left = 144
  Top = 184
end
