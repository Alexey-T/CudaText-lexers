object SyntAnal10: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id std'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Code BG'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clWindowText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clMoneyGreen
      FormatType = ftBackGround
    end>
  TokenRules = <
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s) \{ .*? \}'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '-- .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\.!%]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keyword'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'after'
            'and'
            'any'
            'as'
            'associate'
            'at'
            'before'
            'call'
            'case'
            'clear'
            'close'
            'code'
            'command'
            'continue'
            'database'
            'declare'
            'define'
            'display'
            'else'
            'end'
            'endcode'
            'error'
            'exit'
            'fetch'
            'file'
            'finish'
            'for'
            'foreach'
            'from'
            'function'
            'globals'
            'group'
            'hide'
            'if'
            'import'
            'in'
            'initialize'
            'input'
            'into'
            'is'
            'isolation'
            'let'
            'locate'
            'main'
            'menu'
            'menuhandler'
            'message'
            'mod'
            'not'
            'notfound'
            'null'
            'of'
            'on'
            'open'
            'option'
            'options'
            'or'
            'otherwise'
            'output'
            'pageno'
            'password'
            'print'
            'program'
            'prompt'
            'read'
            'record'
            'report'
            'return'
            'returning'
            'select'
            'session'
            'set'
            'show'
            'skip'
            'sleep'
            'start'
            'status'
            'then'
            'to'
            'today'
            'true'
            'update'
            'user'
            'using'
            'wait'
            'whenever'
            'where'
            'while'
            'window'
            'with')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id std'
      StyleName = 'Id std'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'array'
            'attribute'
            'char'
            'date'
            'day'
            'decimal'
            'false'
            'float'
            'integer'
            'length'
            'month'
            'p_close'
            'p_open'
            'smallint'
            'true'
            'year')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      BlockEnd = 'Block comment end'
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'item begin'
      ConditionList = <
        item
          TagList.Strings = (
            'case'
            'for'
            'foreach'
            'function'
            'if'
            'input'
            'main'
            'menu'
            'menuhandler'
            'prompt'
            'record'
            'report'
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'before'
            'end'
            'exit'
            'wait')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'item end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      CollapseFmt = '%sz0 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'item end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'case'
            'for'
            'foreach'
            'function'
            'if'
            'input'
            'main'
            'menu'
            'menuhandler'
            'prompt'
            'record'
            'report'
            'while')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
          IgnoreCase = True
        end>
      SameIdent = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'code'
      StyleName = 'Code BG'
      ConditionList = <
        item
          TagList.Strings = (
            'code')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'code end'
      DynHighlight = dhRangeNoBound
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'code end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endcode')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'define lv_rate ASSOCIATE CHAR(3) WITH ARRAY[2000] OF '
    'RECORD'
    #9#9'lv_name CHAR(20),'
    #9#9'lv_rates float'
    'end record'
    ''
    '#'
    '# Data correct on 19/04/2002'
    '#'
    'main'
    'DEFINE i FLOAT'
    'define cur char(3)'
    '# Use USD as base'
    #9'LET lv_rate<<"USD">>.lv_name="US Dollars"'
    #9'LET lv_rate<<"USD">>.lv_rates=1.0'
    'LET i=5'
    'clear screen'
    ''
    'CALL banner(" ",1)'
    ''
    'options prompt line last'
    'while true'
    'PROMPT "Enter short code : " for cur'
    'DISPLAY "" at 5,1'
    'end while'
    'sleep 2'
    ''
    'end main'
    ''
    'FUNCTION banner(s,n)'
    'DEFINE s CHAR(80)'
    'DEFINE n INTEGER'
    'LET l=(80-length(s))/2'
    'DISPLAY new_string at n,1 attribute(reverse)'
    'END FUNCTION'
    ''
    'code'
    '  while(1) {'
    '    test'
    '  }'
    'endcode')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = '4gl'
  LexerName = 'Informix 4GL'
  Notes.Strings = (
    'Alex (Synwrite)'
    'Test: https://sourceforge.net/projects/aubit4gl/'
    '  (Linux pack, but 4gl files inside)')
  LineComment = '#'
  Charset = DEFAULT_CHARSET
end
