object SyntAnal50: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Default'
      Font.Charset = ANSI_CHARSET
      Font.Color = clWindowText
      Font.Height = -15
      Font.Name = 'DejaVu Sans Mono'
      Font.Style = []
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'Boolean'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 33023
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'ProcedureCall'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'ProcedureIdentifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Test'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsUnderline]
    end
    item
      DisplayName = 'Identifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'ReservedWord'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'SetProcedureTo'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 16744576
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Database'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -17
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '&&.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)NOTE'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^[\x20\x09]*\*.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '^[\x20\x09]*\#.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      AlwaysEnabled = True
      TokenType = 4
      Expression = '(["'#39']).*?\1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Boolean'
      StyleName = 'Boolean'
      TokenType = 10
      Expression = '\.([tfTF]|and|or|not)\.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;\(\)=<>\+\-\[\]\$\#\?]|\:\:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'SetProcedureTo'
      StyleName = 'SetProcedureTo'
      TokenType = 11
      Expression = '\s*set\s+proc.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'CloseProcedure'
      StyleName = 'SetProcedureTo'
      TokenType = 11
      Expression = 'close?\s+proc.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Database'
      StyleName = 'Database'
      TokenType = 2
      Expression = '\:\w+\:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'DoCase'
      StyleName = 'ReservedWord'
      TokenType = 13
      Expression = 'do\x20+case'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'DoWhile'
      StyleName = 'ReservedWord'
      TokenType = 12
      Expression = 'do\x20+while?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'ProcedureCall'
      StyleName = 'ProcedureCall'
      AlwaysEnabled = True
      TokenType = 11
      Expression = 
        '(?!(else)?if|while|case)[0-9a-z_:.]+\s*\(.*?\)+ |'#13#10'do\x20+(?!(ca' +
        'se|while?))((class|super|[a-z_0-9]+)\:\:)?[a-z_0-9]+(\x20+with.*' +
        ')?'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'ProcedureIdentifier'
      StyleName = 'ProcedureIdentifier'
      TokenType = 2
      Expression = '(class|super|\w+)\:\:\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Identifier'
      StyleName = 'Identifier'
      AlwaysEnabled = True
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'GoTopBottom'
      StyleName = 'ReservedWord'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'go\x20+(top|bottom?)')
          CondType = tcMask
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Properties'
      AlwaysEnabled = True
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'alias'
            'alignment'
            'append'
            'border'
            'bottom'
            'colorhighlight'
            'colornormal'
            'cuatab'
            'datalink'
            'delete'
            'designview'
            'enabled'
            'fields'
            'follow'
            'fontbold'
            'fontname'
            'fontsize'
            'group'
            'height'
            'hidden'
            'left'
            'maximize'
            'maxlength'
            'mdi'
            'minimize'
            'moveable'
            'onclick'
            'onclose'
            'onnavigate'
            'onopen'
            'picture'
            'showdeleted'
            'showrecno'
            'sizeable'
            'tabstop'
            'text'
            'toggle'
            'top'
            'valid'
            'validerrormsg'
            'value'
            'view'
            'visible'
            'width')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Keywords'
      StyleName = 'ReservedWord'
      AlwaysEnabled = True
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'addi'
            'additive'
            'appe'
            'appen'
            'append'
            'case'
            'class'
            'clos'
            'close'
            'continue'
            'data'
            'database'
            'declare'
            'define'
            'do'
            'else'
            'elseif'
            'end'
            'endc'
            'endcase'
            'endclass'
            'endd'
            'enddo'
            'endi'
            'endif'
            'ends'
            'endscan'
            'exit'
            'for'
            'form'
            'from'
            'function'
            'go'
            'if'
            'in'
            'init'
            'loca'
            'local'
            'locate'
            'new'
            'next'
            'note'
            'nul'
            'of'
            'off'
            'on'
            'otherwise'
            'para'
            'parameter'
            'parameters'
            'private'
            'proc'
            'procedure'
            'property'
            'protect'
            'protected'
            'public'
            'recover'
            'rele'
            'release'
            'request'
            'retu'
            'return'
            'scan'
            'sele'
            'selec'
            'select'
            'set'
            'static'
            'step'
            'super'
            'table'
            'tables'
            'this'
            'to'
            'until'
            'use'
            'while'
            'with')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Class'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'EndClass'
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      DynSelectMin = True
      CollapseFmt = '%s0 %s-1'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndClass'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endclass')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'Class'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Define'
      ConditionList = <
        item
          TagList.Strings = (
            'DEFINE')
          TokenTypes = 4
        end>
      NameFmt = '%s0 %s-1 %s-2'
      GroupFmt = 'Defines'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Procedure'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'proc'
            'procedure')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'clos'
            'close'
            'set'
            'to')
          CondType = tcNotEqual
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'EndProcedure'
      EndOfTextClose = True
      NameFmt = '%s0 %s-1'
      HighlightPos = cpAny
      CollapseFmt = '%s0 %s-1'
      SelfClose = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndProcedure'
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'class'
            'endclass')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'For'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'for')
          TokenTypes = 4
          IgnoreCase = True
        end
        item
          TagList.Strings = (
            'loca'
            'locate')
          CondType = tcNotEqual
          TokenTypes = 4
        end>
      BlockEnd = 'Next'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Next'
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endf'
            'next')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'For'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndIf'
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'else'
            'elseif'
            'endi'
            'endif')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'If'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'If'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'else'
            'elseif'
            'if')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'EndIf'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'DoCase'
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 8192
        end>
      BlockEnd = 'EndDoCase'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndDoCase'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endcase')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'DoCase'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'DoWhile'
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 4096
        end>
      BlockEnd = 'EndDo'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndDo'
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endd'
            'enddo')
          TokenTypes = 4
        end>
      BlockEnd = 'DoWhile'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Scan'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'scan')
          TokenTypes = 4
        end>
      BlockEnd = 'EndScan'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndScan'
      AlwaysEnabled = True
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'ends'
            'endscan')
          TokenTypes = 4
        end>
      BlockEnd = 'Scan'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'DoUntil'
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            '^do$')
          CondType = tcMask
          IgnoreCase = True
        end>
      BlockEnd = 'EndDoUntil'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0 ... %ez0'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'EndDoUntil'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'until')
          TokenTypes = 4
          IgnoreCase = True
        end>
      BlockEnd = 'DoUntil'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '  * Test'
    '&& Test'
    '#preproc'
    '  '
    ':dbase:  "string"  .and.  '#39'str'#39
    'CLASS ClasePrueba'
    '  set procedure to todbot.cc'
    '  this.p=class::aaa'
    '  close proc'
    '  '
    '  PROCEDURE  aaa(b)'
    '    for n=1 to 10'
    '      ? n'
    '    next'
    '    if b<10'
    '      return nil'
    '    endif'
    '    b++'
    '  return .t.'
    '  '
    '  PROC  aaa2(b)'
    '    local a'
    '    a=0'
    '    do while .t.'
    '      a=a+1  '
    '        if condicion'
    '          b=2'
    '        endif'
    '    enddo'
    '    b++'
    '    return nil'
    '    '
    'ENDCLASS')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor'
    'Boolean const'
    'Expression'
    'DoWhile'
    'DoCase'
    'DoWith'
    'ClassDecl'
    'Append')
  Extentions = 'wfm prg qbe cc mnu'
  LexerName = 'Visual dBase'
  SkipSpaces = False
  Notes.Strings = (
    'Author: Senen (senen@electrodh.com)'
    'Version: 4.x')
  ParseEndOfLine = True
  LineComment = '&&'
  Charset = OEM_CHARSET
end
