#chars '-!#$%&()*,./:;?@[\\]_{|}~+<=>

operator - |( x1 x2 -- x1-x2 ) Оставляет на стеке разность двух чисел лежащих на вершине стека. *Operator
operator * |( x1 x2 -- x1*x2 ) Перемножает два верхних числа стека и оставляет на стеке произведение. *Operator
operator */ |( x1 x2 x3 -- x4 ) Перемножает два числа x1 x2 стека и получается произведение d, которое потом делится на x3 и на стеке оставляет частное x4. *Operator
operator */MOD |( x1 x2 x3 -- x4 x5 ) Умножает x1 на x2, при этом получается промежуточное двойное число d, которое далее делится на x3, и на стеке остаток x4 и частное x5. *Operator
operator / |( x1 x2 -- x1/x2 ) Делит x1 на x2 и оставляет на стеке частное. *Operator
operator /MOD |( x1 x2 -- x3 x4 ) Делит x1 на x2 и оставляет на стеке остаток от деления x3 и частное x4. *Operator
operator ?UM/MOD |( ud1 u1 -- u2 u3 ? ) *Operator
operator + |( x1 x2 -- x1+x2 ) Складывает два верхних числа стека и оставляет на стеке сумму. *Operator
operator < |( x1 x2 -- flag ) Сравнивает два числа и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда x1 меньше x2. *Operator
operator <> |( x1 x2 -- flag ) Сравнивает два числа и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда x1 побитно не равен x2. *Operator
operator = |( x1 x2 -- flag ) Сравнивает два числа и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда x1 побитно равен x2. *Operator
operator > |( x1 x2 -- flag ) Сравнивает два числа и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда x1 больше x2. *Operator
operator 0< |( x1 -- flag ) Сравнивает число с нулём и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда число меньше 0. *Operator
operator 0<> |( x1 -- flag ) Сравнивает число с нулём и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда число НЕ равно 0. *Operator
operator 0= |( x1 -- flag ) Сравнивает число с нулём и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда число равно 0. *Operator
operator 0> |( x1 -- flag ) Сравнивает число с нулём и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда число больше 0. *Operator
operator 1- |( n1 -- n2 ) Subtracts 1 *Operator
operator 1+ |( x -- x+1 ) Прибавляет 1 (единицу) к числу лежащему на вершине стека данных. *Operator
operator 2- |( x -- x-2 ) Вычитает 2 (двойку) от числа лежащего на вершине стека данных. *Operator
operator 2* |( x -- x*2 ) Умножает число (на два). *Operator
operator 2/ |( x -- x/2 ) Делит число пополам (на два). *Operator
operator 2+ |( x -- x+2 ) Прибавляет 2 (двойку) к числу лежащему на вершине стека данных. *Operator
operator ABS |( x -- x1 ) Возвращает абсолютное число. *Operator
operator AND |( x1 x2 -- x3 ) Выполняет логическую операцию "И". *Operator
operator CHAR= |*Operator
operator COMPARE |( a1 u1 a2 u2 -- flag ) Сравнивает строку a1 u1, со строкой a2 u2, возвpащает 0, если сpавнение истинно. *Operator
operator COMPARE-PATH |( a1 u1 a2 u2 -- ? ) Сравнение имени (пути) файла (только файла!) a1 с папкой или файлом a2. В a2 можно использовать подстановочные знаки. Регистр не имеет значения. [Extwords2.spf] *Operator
operator D- |*Operator
operator D+ |( |x1 x2| |x3 x4| --|x3 x4|+|x1 x2| ) Складывает две верхние пары чисел и осталяет их сумму на стеке. *Operator
operator D< |( D1(x x) D2(x x) -- flag ) Сравнивает два числа двойной длинны и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда D1 меньше D2. *Operator
operator D<> |*Operator
operator D= |*Operator
operator D> |( D1(x x) D2(x x) -- flag ) Сравнивает два числа двойной длинны и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда D2 меньше D1. [lists.spf] *Operator
operator D0< |*Operator
operator D0<> |*Operator
operator D0= |( D(x x) -- flag ) Сравнивает число двойной длины с нулём и оставляет на стеке flag "истина"(-1) тогда и только тогда, когда число равно 0. *Operator
operator D2* |*Operator
operator D2/ |*Operator
operator DABS |( D(x x)-- D(x1 x1) ) Возвращает абсолютное число двойной длины. *Operator
operator DNEGATE |( x x -- x1 x1 ) Меняет знак числа двойной длины на противоположный. *Operator
operator FALSE |( -- 0 ) Возвращает число ноль. *Operator
operator FM/MOD |Делит D на x1, получаются знаковые округленное вниз частное x3 и остаток x2. *Operator
operator ICOMPARE |( a1 u1 a2 u2 -- n ) Возвpащает 0, если стpоки pавны (без учета pегистpа). *Operator
operator INVERT |( x1 -- x3 ) Выполняет логическую операцию "NOT". *Operator
operator M* |( x1 x2 -- D(x1*x2) ) Перемножает два верхних числа стека и оставляет на стеке произведение двойной длинны. *Operator
operator M+ |*Operator
operator MAX |( x1 x2 -- x3 ) Сравнивает два числа и оставляет на стеке большее из них. *Operator
operator MD/ |*Operator
operator MD/MOD |*Operator
operator MIN |( x1 x2 -- x3 ) Сравнивает два числа и оставляет на стеке меньшее из них. *Operator
operator MOD |( x1 x2 -- x3 ) Делит x1 на x2 и оставляет на стеке остаток от деления. *Operator
operator MU/MOD |( ul n -- n.rem ul.quot ) Divides longword by normal giving normal remainder and long quotient. *Operator
operator NEGATE |( x1 -- x3 ) Меняет знак числа на противоположный. *Operator
operator NOT |( x -- flag ) Логическое отрицание (ЛОЖЬ заменяется на ИСТИНУ и наоборот). *Operator
operator OR |( x1 x2 -- x3 ) Выполняет логическую операцию "ИЛИ". *Operator
operator S= |( ca1 u1 ca2 u2 -- ? ) *Operator
operator SM/REM |( D(x x) x1 -- x2 x3 ) Делит D на x1, получаются знаковые симметричное частное x3 и остаток x2. *Operator
operator TRUE |( -- -1 ) Возвращает минус единицу. *Operator
operator U/ |( ux1 ux2 -- ux1/ux2 ) Делит беззнаково ux1 на ux2 и оставляет на стеке частное. *Operator
operator U< |( x1 x2 -- ior ) Сравнивает два положительных числа и оставляет на стеке flag "истина"(-1) когда x1 меньше x2. Числа рассматриваются как числа без знака. *Operator
operator U> |( x1 x2 -- ior ) Сравнивает два положительных числа и оставляет на стеке flag "истина"(-1) когда x1 больше x2. Числа рассматриваются как числа без знака. *Operator
operator UM* |( ux1 ux2 -- D(ux1*ux2) ) Перемножает два верхних положительных числа стека и оставляет на стеке произведение двойной длинны. *Operator
operator UM/MOD |( D(ux ux) ux1 -- ux2 ux3 ) Делит двойное число D(ux ux) на ux1, оставляя на стеке частное ux3 и остаток ux2. *Operator
operator UMOD |( ux1 ux2 -- ux3 ) Делит ux1 на ux2 и оставляет на стеке остаток от деления. *Operator
operator VAL= |( value1 value2 -- ? ) Сравнить два значения. Только внутри цикла LIST( )LIST. [lists.spf] *Operator
operator VAL>+ |( value1 value2 list -- value3 ) Сложить два значения списка list. [lists.spf] *Operator
operator VAL>< |( value1 value2 list -- ? ) Сравнить два значения списка list. [lists.spf] *Operator
operator VAL>= |( value1 value2 list -- ? ) Сравнить два значения списка list. [lists.spf] *Operator
operator VAL>> |( value1 value2 list -- ? ) Сравнить два значения списка list. [lists.spf] *Operator
operator W+ |( a1 u1 a2 u2 -- a3 u3 ) *Operator
operator WC-COMPARE |( a1 u1 a2 u2 -- ? ) TRUE, если строки сопоставились. В a2 u2 можно использовать подстановочные знаки ? и *. Регистронезависимо. *Operator
operator WCOMPARE |( c-a1 u1 c-a2 u2 -- n ) Сравнить строку c-a1 u1, со строкой c-a2 u2. *Operator
operator XOR |( x1 x2 -- x3 ) Выполняет логическую операцию "НЕ-И-ИЛИ". *Operator
operator XY+ |( x1 y1 x2 y2 -- x3 y3 ) *Operator
stack-d ?DUP |( x -- 0 | x x ) Дублирует верхнее число стека, если оно не равно 0. *Stack-D
stack-d 2DROP |( x1 x2 -- ) Удаляет два верхних числа со стека. *Stack-D
stack-d 2DUP |( x1 x2 -- x1 x2 x11 x22 ) Дублирует два верхних числа стека. *Stack-D
stack-d 2FLIP |( d1 d2 d3 -- d3 d2 d1 ) *Stack-D
stack-d 2OVER |( x4 x3 x2 x1 -- x4 x3 x2 x1 x44 x33 ) Создаёт на вершине стека копию пары вторых чисел. *Stack-D
stack-d 2ROT |( d1 d2 d3 -- d2 d3 d1 ) Аналог слова ROT для чисел двойной длины. *Stack-D
stack-d 2SWAP |( x1 x2 x3 x4-- x3 x4 x1 x2 ) Меняет местами две верхние пары чисел на стеке. *Stack-D
stack-d DROP |( x -- ) Удаляет верхнее число со стека. *Stack-D
stack-d DUP |( x -- x x1 ) Дублирует верхнее число стека. *Stack-D
stack-d NIP |( x2 x1 -- x1 ) Удаляет второе число со стека. *Stack-D
stack-d OVER |( x2 x1 -- x2 x1 x22 ) Создаёт на вершине стека копию второго числа. *Stack-D
stack-d PICK |( n -- un ) Копирует на вершину стека N-е сверху число. 0 PICK аналогично DUP. *Stack-D
stack-d ROLL |( un … u0 n -- u(n-1) u0 un ) Вращает N верхних чисел стека. 1 ROLL аналогично SWAP. *Stack-D
stack-d ROT |( x3 x2 x1 -- x2 x1 x3 ) Перемещает третье число на вершину стека. *Stack-D
stack-d -ROT |( x3 x2 x1 -- x1 x3 x2 ) Shuffles top 3 stack items. [extwords.spf] *Stack-D
stack-d SP! |( addr -- ) Устанавливает новый указатель стека. *Stack-D
stack-d SP@ |( -- addr ) Возвращает указатель стека. *Stack-D
stack-d SWAP |( x1 x2 -- x2 x1 ) Меняет местами два верхних числа на стеке. *Stack-D
stack-d TUCK |( x1 x2 -- x2 x1 x2 ) Копирует верхнее число на третью сверху позицию. *Stack-D
stack-d VAL-DROP |( value -- ) Удалить значение со стека. Только внутри цикла LIST( )LIST. [lists.spf] *Stack-D
stack-d VAL-DUP |( value -- value ) Дублировать значение на стеке. Только внутри цикла LIST( )LIST. [lists.spf] *Stack-D
stack-d VAL-DUP> |( value list -- value value ) Дублировать значение списка list. [lists.spf] *Stack-D
stack-r >R |( x1 -- ) Перемещает число со стека данных на вершину стека возвратов. *Stack-R
stack-r 2>R |( x2 x1 -- ) Перемещает пару чисел со стека данных на вершину стека возвратов. *Stack-R
stack-r 2R@ |*Stack-R
stack-r 2R> |( -- x22 x11 ) Перемещает пару чисел со стека возвратов на вершину стека данных. *Stack-R
stack-r R@ |( -- x11 ) Копирует число со стека возвратов на вершину стека данных. *Stack-R
stack-r R> |( -- x11 ) Перемещает число со стека возвратов на вершину стека данных. *Stack-R
stack-r RDROP |( -- ) Удаляет число с вершины стека возвратов. *Stack-R
stack-r RP! |( addr -- ) Устанавливает новый указатель стека возвратов. *Stack-R
stack-r RP@ |( -- addr ) Возвращает указатель стека возвратов. *Stack-R
stack-r RP+ |*Stack-R
stack-r RP+! |*Stack-R
stack-r RP+@ |*Stack-R
memory ! |( x addr -- ) Записывает по адресу addr число x. *Memory
memory ", |( adr len -- ) Places a string at the top of the dictionary. *Memory
memory , |( x -- ) Выделяет 1 ячейку пространства данных HERE форт-системы и записывает туда x. *Memory
memory /SpadAlloc |( -- ) Выделить для SPAD /SPAD байт. [strings.spf] *Memory
memory ?V$RESIZE |( n V$ -- ) *Memory
memory @ |( addr -- x ) Выбирает по адресу addr число и кладёт его на вершину стека. *Memory
memory _ISLIT |[strings.spf] *Memory
memory _IZLIT |[strings.spf] *Memory
memory +! |( x addr -- ) Прибавляет число x к одинарному числу по адресу addr. *Memory
memory +CSP |*Memory
memory +PLACE |( a u addr -- ) Добавляет стpоку к указанной стpоке. *Memory
memory +PLACE0 |( A -- ) *Memory
memory +TO |[extwords.spf] *Memory
memory +WORDPLACE0 |( a u -- false ) *Memory
memory +WZPLACE |( a u buf -- ) *Memory
memory +ZPLACE |( a u buf -- ) *Memory
memory => |*Memory
memory 0! |( addr -- ) Обнуляет значение записанное по адресу addr. *Memory
memory 0ALLOT |( len -- ) Выделение памяти без мусора. [extwords.spf] *Memory
memory 1+! |( addr -- ) Увеличивает значение записанное по адресу addr на 1 (единицу). *Memory
memory 2! |( x x addr -- ) Записывает по адресу addr пару чисел. *Memory
memory 2@ |( addr -- x x ) Выбирает по адресу addr пару чисел и кладёт их на вершину стека. *Memory
memory 2CELL |*Memory
memory ALIGN |( -- ) Makes sure the dictionary pointer is on a machine word boundary. *Memory
memory ALIGNED |( adr1 -- adr2 ) Adjusts an address to a machine word boundary. *Memory
memory ALLOCATE |( u -- addr ior ) *Memory
memory ALLOCATE9x |( n -- addr ior ) *Memory
memory ALLOT |( x -- ) Резервирует или освобождает x байт пространства данных форт-системы в зависимомти от знака x. *Memory
memory BLANK |*Memory
memory C! |( 1x addr -- ) Записывает по адресу addr одно-байтовое число. *Memory
memory C", |( -- addr ) *Memory
memory C, |( x -- ) Выделяет 1 байт пространства данных HERE форт-системы и записывает туда x. *Memory
memory C@ |( addr -- 1x ) Выкладывет на вершину стека одно-байтовое число, которое хранится по адресу addr. *Memory
memory C+! |( n addr -- ) *Memory
memory CELL |*Memory
memory CELL- |( addr -- addr' ) *Memory
memory CELL+ |( addr -- addr1 ) Прибавляет размер ячейки к addr и получить addr1. *Memory
memory CELLS |( x -- x*4 ) Возвращает размер ячеек x. *Memory
memory CHAR- |( c1 c2 -- ) *Memory
memory CHAR+ |( x -- x+1 ) Прибавляет 1 (единицу) к числу или адресу лежащему на вершине стека данных. *Memory
memory CHARS |*Memory
memory CMOVE |( a1 a2 u -- ) Копирует u последовательных символов из пространства данных начиная с адреса a1 в a2, символ за символом, начиная с младших адресов к старшим (с конца). *Memory
memory CMOVE> |( a1 a2 u -- ) Копирует u последовательных символов из пространства данных начиная с адреса a1 в a2, символ за символом, начиная со старших адресов к младшим (с начала). *Memory
memory CREATE-HEAP |*Memory
memory D+! |*Memory
memory DCELL |*Memory
memory DESTROY-HEAP |*Memory
memory ERASE |( addr u -- ) Очищает u байт начиная с адреса addr, записывая в эту область символ 0. *Memory
memory FILL |( addr u char -- ) Заполняет начиная с адреса addr u байт символом char. *Memory
memory FREE |( a-addr -- ior ) *Memory
memory GLOBAL |( -- ) *Memory
memory GLOBAL-ALLOCATE |( bytes -- addr ior ) *Memory
memory GLOBAL-FREE |( addr - ior ) *Memory
memory HEAP-COPY |*Memory
memory HERE |( -- addr ) Возвращает текущий свободный указатель области данных. *Memory
memory LOCAL |( -- ) *Memory
memory LSHIFT |( x1 x2 -- x3 ) Сдвигает x1 на x2 бит влево. *Memory
memory MEM_RESERVE |*Memory
memory MOVE |( addr1 addr2 u -- ) Копирует содержимое u байт из addr1 в addr2. После MOVE в u байтах по адресу addr2 содержится в точности то же, что было в u байтах по адресу addr1 до копирования. *Memory
memory PAD |( -- adr ) The address of a scratch area used to temporary storage. *Memory
memory PLACE |( addr len dest -- ) Помещает стpоку в указанное место. *Memory
memory RALLOT |*Memory
memory REFILL |*Memory
memory RESIZE |*Memory
memory RFREE |*Memory
memory RSHIFT |( x1 x2 -- x3 ) Сдвигает x1 на x2 бит вправо. *Memory
memory S+ |( a1 u1 a2 u2 -- a3 u3 ) *Memory
memory S>TEMP |( a u - a1 u ) *Memory
memory S>ZALLOC |( a u -- az ) Выделяет память и записывает туда a u строку с нулем в конце, возвращает адрес новой строки. *Memory
memory S>ZTEMP |( a u - a1 ) *Memory
memory S-FREE |( -- ) Освобождает память по адресу, запомненному ранее словом S-MEM. [Extwords2.spf] *Memory
memory S-MEM |( a u -- a u ) Запоминает адрес строки в user-переменную для последующго освобождения памяти словом S-FREE. [Extwords2.spf] *Memory
memory SPAD! |( a u -- ) Записать строку в буфер SPAD. [strings.spf] *Memory
memory SPAD!+ |( a1 u1 a2 u2 -- ) Сложить две стркои в буфере SPAD. [strings.spf] *Memory
memory SPAD@ |( -- a u ) Получить строку из буфера SPAD. [strings.spf] *Memory
memory SPAD+ |( a u -- ) Добавить строку в буфер SPAD. [strings.spf] *Memory
memory SPAD-FREE |( -- ) [strings.spf] *Memory
memory ST1- |( -- ) Очистить буфер ST1. После этого слова при выполнении ST1@ будет выдаваться пустая строка. [Extwords2.spf] *Memory
memory ST1! |( a u -- ) Записать строку в буфер ST1. [Extwords2.spf] *Memory
memory ST1@ |( -- a u ) Получить строку из буфера ST1. [Extwords2.spf] *Memory
memory ST1+ |( a u -- ) Добавить строку со стека в конец буфера ST1. [Extwords2.spf] *Memory
memory ST1+! |( a1 u1 a2 u2 -- ) Сложить две строки и поместить в буфер ST1. [Extwords2.spf] *Memory
memory ST1+@ |( a u -- a1 u1 ) Добавить строку со стека в конец буфера ST1 и выложить строку из буфера на стек. [Extwords2.spf] *Memory
memory ST1+s |( a u -- ) Добавить строку со стека в начало буфера ST1. [Extwords2.spf] *Memory
memory ST2- |( -- ) Очистить буфер ST2. После этого слова при выполнении ST2@ будет выдаваться пустая строка. [Extwords2.spf] *Memory
memory ST2! |( a u -- ) Записать строку в буфер ST2. [Extwords2.spf] *Memory
memory ST2@ |( -- a u ) Получить строку из буфера ST2. [Extwords2.spf] *Memory
memory ST2+ |( a u -- ) Добавить строку со стека в конец буфера ST2. [Extwords2.spf] *Memory
memory ST2+! |( a1 u1 a2 u2 -- ) Сложить две строки и поместить в буфер ST2. [Extwords2.spf] *Memory
memory ST2+@ |( a u -- a1 u1 ) Добавить строку со стека в конец буфера ST2 и выложить строку из буфера на стек. [Extwords2.spf] *Memory
memory ST2+s |( a u -- ) Добавить строку со стека в начало буфера ST2. [Extwords2.spf] *Memory
memory STR& |( a1 u1 a2 u2 -- a u ) Конкатенация (сложение двух строк). [Extwords2.spf] *Memory
memory STR&& |( a1 u1 a2 u2 a3 u3 -- a u ) Конкатенация (сложение трёх строк) [Extwords2.spf] *Memory
memory STRINGS>HERE |( -- ) Переместить буфер со строковыми литералами в область HERE. Необходимо для сохранения литералов в скопилированном исполнимом файле. [strings.spf] *Memory
memory TEMP-ALLOC |( u -- a ) *Memory
memory TO |*Memory
memory USER-ALLOT |( var_name n -- ) Выделить нужное количество памяти в области User. *Memory
memory V$! |( ca u V$ -- ) *Memory
memory V$@ |( V$ -- a u ) *Memory
memory V$+! |( ca u V$ -- ) *Memory
memory V$> |( V$ -- a ) *Memory
memory V$0! |( V$ -- ) *Memory
memory V$CREATE |( n -- a ) *Memory
memory V$FREE |( V$ -- ) *Memory
memory V$RESIZE |( n V$ -- ) *Memory
memory VC$+! |( c V$ -- ) *Memory
memory W! |( 2x addr -- ) Записывает по адресу addr двух-байтовое число. *Memory
memory W, |( x -- ) Выделяет половину ячейки пространства данных HERE форт-системы и записывает туда x. *Memory
memory W@ |( addr -- 2x ) Выкладывет на вершину стека двух-байтовое число, которое хранится по адресу addr. *Memory
memory W>ZALLOC |( wa wu -- waz ) *Memory
memory WALLOCATE |( u -- ) *Memory
memory ZPLACE |( a u buf -- ) *Memory
definer -- |*Definer
definer #( |*TASK begin
definer #) |*Definer
definer #define |*Definer
definer %> |*Definition end
definer )# |*TASK end
definer : |( -- ^name^ ) Начинает создание нового слова. *WORD begin
definer :NONAME |*THREAD begin
definer :TASK |*TASK begin
definer ; |( -- ) Завершает создание нового слова. *Definer
definer ;) |*Definer
definer ;CEZ |*Definition end
definer ;CIF |*Definition end
definer ;MODULE |*Definition end
definer [ |Устанавливает состояние исполнения (имеет признак IMMEDIATE). *Definer
definer ['] |( -- adr ) Compiles the compilation address of a word. *Definer
definer [COMPILE] |( -- ) Compiles the next word even if it's immediate. *Definer
definer [NONAME |*NONAME begin
definer ] |Устанавливает состояние компиляции (поскольку выполняется из состояния исполнения, признак IMMEDIATE ему не требуется. *Definer
definer { |Начало определения локальных переменных. *Definer
definer } |( -- ) Завершение определения локальных переменных. *Definer
definer +SWORD |*Definer
definer +WORD |*Definer
definer <% |*Definition begin
definer </JScript> |Завершение использования скриптового языка JScript. *Script end
definer </SCRIPT> |Завершение использования скриптового языка VBScript и Jscript. *Script end
definer </script> |Завершение использования скриптового языка VBScript и JScript. *Script end
definer </VBScript> |Завершение использования скриптового языка VBScript. *Script end
definer <JScript> |( -- ) Использование скриптового языка JScript. *Script begin
definer <VBScript> |( -- ) Использование скриптового языка VBScript. *Script begin
definer ->VARIABLE |( x -- name ) Ссоздаёт переменную. *Definer
definer ->VECT |( xt -- name ) Создаёт слово, семантику выполнения которого можно менять, записывая в него новый xt по TO. *Definer
definer 2CONSTANT |*Definer
definer 2VARIABLE |*Definer
definer ALSO |( -- ) Преобразует поиск слов. *Definer
definer ARRAY |( size -- name ) Создать массив размером size байт и иницировать все его ячейки нулем. [extwords.spf] *Definer
definer BASE |( -- adr ) Variable containing number base. *Definer
definer CEZ: |*Definition begin
definer CIF: |*Definition begin
definer CLASS: |< -- class_name > Начало определения класса. *CLASS begin
definer CONSTANT |( x -- name ) Создаёт константу. *Definer
definer CONSTR: |< -- constructor_name > Конструктор класса или подкласса. *In-CLASS begin
definer CREATE |( name -- ) Создаёт массив. *Definer
definer DECIMAL |Устанавливает десятичную систему счисления. *Definer
definer DEFINITIONS |( -- ) Устанавливает список компиляции на тот же список слов, что и первый список в порядке поиска. *Definer
definer DESTR: |< -- destructor_name > Деструктор класса. *In-CLASS begin
definer DLIST |< -- name > Создать список для чисел двойной длины. Список можно уничтожить. [lists.spf] *Definer
definer DLIST: |< -- name > Создать список для чисел двойной длины. Список можно освободить, но нельзя уничтожить. VALUE-переменная. Добавлять и читать значения следует в разделе Action:, не раньше. [lists.spf] *Definer
definer DOES> |( -- ) Определяет конец действий периода компиляции и начало операции периода выполнения. *Definer
definer EXCLUDE |*Definer
definer EXPORT |( old-current -- old-current ) *Definer
definer FORTH |( -- ) Устанавливает поиск в основном форт-словаре. *Definer
definer fVAR |( -- name ) Создаёт файловую переменную. *Definer
definer GLOBAL-DLIST |< -- name > Создать глобальный список для чисел двойной длины. Список можно уничтожить. Доступен для всех потоков. Добавлять и читать значения можно сразу же после создания. [lists.spf] *Definer
definer GLOBAL-DLIST: |< -- name > Создать глобальный список для чисел двойной длины. Список можно освободить, но нельзя уничтожить. Доступен для всех потоков. VALUE-переменная. Добавлять и читать значения можно сразу же после создания. [lists.spf] *Definer
definer GLOBAL-LIST |< -- name > Создать глобальный список. Список можно уничтожить. Доступен для всех потоков. Добавлять и читать значения можно сразу же после создания. [lists.spf] *Definer
definer GLOBAL-LIST: |< -- name > Создать глобальный список. Список можно освободить, но нельзя уничтожить. Доступен для всех потоков. VALUE-переменная. Добавлять и читать значения из глобального списка можно сразу же после создания. [lists.spf] *Definer
definer GLOBAL-STRING-LIST |< -- name > Создать глобальный строковый список. Список можно уничтожить. Доступен для всех потоков. Динамически выделяет и освобождает для строк память. Добавлять и читать значения можно сразу же после создания. [lists.spf] *Definer
definer GLOBAL-STRING-LIST: |< -- name > Создать глобальный строковый список. Список можно освободить, но нельзя уничтожить. Доступен для всех потоков. VALUE-переменная. Добавлять и читать значения можно сразу же после создания. [lists.spf] *Definer
definer HEX |Устанавливает шестнадцатеричную систему счисления. *Definer
definer HTTP |VOCABULARY *Definer
definer ICONS: |( -- ) Заменяет стандартные файлы иконок на ваши для дальнейшего использования в программе. *Definer
definer IMMEDIATE |( -- ) Marks the last word as immediate. *Definer
definer INTERPRET |( -- ) Interprets the input stream. *Definer
definer KERN: |( .. a u -- ior ) *Definer
definer LIST |< -- name > Создать список. Список можно уничтожить. [lists.spf] *Definer
definer LIST: |< -- name > Создать список. Список можно освободить, но нельзя уничтожить. VALUE-переменная. Добавлять и читать значения следует в разделе Action:, не раньше. [lists.spf] *Definer
definer LITERAL |( -- n ) Compiles a number. *Definer
definer M: |< -- method_name > Метод класса или подкласса. *In-CLASS begin
definer macro |Usage: macro <name> <char> <words> <char> *Definer
definer main |*Definer
definer MARKER |*Definer
definer MODULE: |( "name" -- old-current ) *Definition begin
definer NEW |< 0 VALUE <p-obj> <class_name> -- TO <p-obj> > Создание динамического объекта. *Definer
definer NEWHERE |( class -- object ) *Definer
definer NONAME] |*NONAME end
definer OBJECT: |< class_name -- object_name > Создание статического объекта. *Definer
definer ONLY |( -- ) Устанавливает минимальный поиск слов. *Definer
definer OOP |*Definer
definer POINTER |( class -- ) *Definer
definer POSTPONE |*Definer
definer PREVIOUS |( -- ) Устанавливает поиск слов в следующем словаре за основным. *Definer
definer QUAN |( -- name ) 0 VALUE [extwords.spf] *Definer
definer QWNDPROC: |( xt | "name" -- ) *Definer
definer RECORD: |< -- struct_name > Определение структур класса. *In-CLASS begin
definer regVAR |( -- name) Создаёт реестровую переменную. *Definer
definer REOPEN |( class_name -- ) Доопределение класса. *CLASS begin
definer REQUIRE |*Definer
definer RESOURCES: |( ->eol; -- ) *Definer
definer SET-CURRENT |( wid -- ) Устанавливает текущий компилируемый словарь. *Definer
definer SET-ORDER |( widn ... wid1 n -- ) Устанавливает порядок поиска слов в списках слов. *Definer
definer STATE |( -- adr ) Variable that is nonzero in compile state. *Definer
definer STRING-LIST |< -- name > Создать строковый список. Список можно уничтожить. Работает исколючительно со строками. Динамически выделяет и освобождает для строк память. [lists.spf] *Definer
definer STRING-LIST: |< -- name > Создать строковый список. Список можно освободить, но нельзя уничтожить. VALUE-переменная. Добавлять и читать значения следует в разделе Action:, не раньше. [lists.spf] *Definer
definer SUBCLASS: |< class_name -- subclass_name > Определение подкласса. *CLASS begin
definer TASK: |( xt -- name ) Создать поток. *Definer
definer TASK; |*TASK end
definer USER |( offset -- name ) Defines a variable at the given offset in the User area. *Definer
definer USER-ARRAY |( size -- name ) Создать массив размером size байт и иницировать все его ячейки нулем. [extwords.spf] *Definer
definer USER-CREATE |*Definer
definer USER-EXIT |*Definer
definer USER-HERE |*Definer
definer USER-INIT |*Definer
definer USER-OFFS |*Definer
definer USER-VALUE |*Definer
definer USER-VECT |*Definer
definer VALUE |( x -- name ) Создаёт числовую переменную. *Definer
definer VARIABLE |( -- name ) Создаёт переменную. *Definer
definer VECT |( -- name ) Создаёт слово, семантику выполнения которого можно менять, записывая в него новый xt по TO. *Definer
definer VM: |< -- method_name > Виртуальный метод класса или подкласса. *In-CLASS begin
definer VOCABULARY |( -- name ) Создаёт список слов с именем name. Выполнение name заменит первый список в порядке поиска на список с именем name *Definer
definer W: |*In-CLASS begin
definer WINAPI: |< -- function_name dll_name > Позволяет "импортировать" в nnCron win32-функции из внешних DLL. *Definer
definer WNDPROC: |*Definer
iterator )LIST |( -- ) Закончить описание кода, начатого словом LIST(. Только для режима компиляции. [lists.spf] *Iterator end
iterator ;FOR-CHILD-WINDOWS |Завершение обработки группы дочерних окон, чей заголовок подпадает под указанную маску. *Iterator end
iterator ;FOR-FILES |Завершение обработки группы файлов и каталогов, подпавших под указанную маску. *Iterator end
iterator ;FOR-NEW-EVENTS |*Iterator end
iterator ;FOR-PROCS |Завершение обработки группы процессов, подпавших под указанную маску. *Iterator end
iterator ;FOR-WINDOWS |Завершение обработки группы окон, подпавших под указанную маску. *Iterator end
iterator ;GET-BY-LINE |( -- ) Конец цикла чтения параметров из файла. [Extwords2.spf] *Iterator end
iterator ;READ-BY-LINE |Завершение цикла по строкам файла. [string_manipulation.spf] *Iterator end
iterator ;RE-ALL |Завершение цикла по всем найденным совпадениям с регулярным выражением. *Iterator end
iterator ;TXT-BY-LINE |Конец цикла чтения текста построчно. [Extwords2.spf] *Iterator end
iterator ;WTS-FOR-PROCS |*Iterator end
iterator ;XMLPARSER |*Iterator end
iterator ?DO |( w1 w2 -- ) Begins a ?DO .. LOOP to be executed 0 or more times. *Iterator begin
iterator +LOOP |В цикле DO…+LOOP инкрементирует индекс на произвольное число. *Iterator end
iterator AGAIN |*Iterator end
iterator BEGIN |( -- ) Begins a BEGIN .. WHILE .. REPEAT loop *Iterator begin
iterator DO |( n1 n2 -- ) Begins a DO .. LOOP. *Iterator begin
iterator FF-EXIT |*In-Iterator
iterator FOR-CHILD-WINDOWS |( S" win_pattern" -- ) Обработка группы дочерних окон, чей заголовок подпадает под указанную маску. *Iterator begin
iterator FOR-CHILD-WINDOWS: |< -- "win_pattern" > Обработка группы дочерних окон, чей заголовок подпадает под указанную маску. *Iterator begin
iterator FOR-FILES |( S" path\\mask" -- ) Обработка группы файлов и каталогов, подпавших под указанную маску. *Iterator begin
iterator FOR-FILES: |< -- "path\\mask" > Обработка группы файлов и каталогов, подпавших под указанную маску. *Iterator begin
iterator FOR-NEW-EVENTS |"проход" по списку новых событий после срабатывания слова WatchEventLog:. *Iterator begin
iterator FOR-PROCS |( S" proc_pattern" -- ) Обработка групп процессов, подпавших под указанную маску. *Iterator begin
iterator FOR-PROCS: |< -- "proc_pattern" > Обработка групп процессов, подпавших под указанную маску. *Iterator begin
iterator FOR-WINDOWS |( S" win_pattern" -- ) Обработка группы окон, подпавших под указанную маску. *Iterator begin
iterator FOR-WINDOWS: |< -- "win_pattern" > Обработка группы окон, подпавших под указанную маску. *Iterator begin
iterator GBL-EXIT |( -- ) Выйти из цикла GET-BY-LINE. [Extwords2.spf] *In-Iterator
iterator GET-BY-LINE |( a u -- ) Чтение параметров из файла. Начало цикла. a u - Полное имя (путь+имя+расширение) файла с параметрами. [Extwords2.spf] *Iterator begin
iterator GET-BY-LINE: |< -- "filename" > Чтение параметров из файла. Начало цикла. filename - Полное имя (путь+имя+расширение) файла с параметрами. [Extwords2.spf] *Iterator begin
iterator I |( -- u ) Значение индекса в цикле DO…LOOP. *In-Iterator
iterator J |( -- u ) Значение индекса в родительском цикле DO…LOOP. *In-Iterator
iterator LEAVE |( -- ) Exit from DO .. LOOP. *In-Iterator
iterator LIST( |( list -- ) Выполнить для каждого узла списка list код, ограниченный словом )LIST. Допускает вложенность. Только для режима компиляции. [lists.spf] *Iterator begin
iterator LIST-EXIT |( -- ) Закончить просмотр списка. [lists.spf] *In-Iterator
iterator LOOP |( -- ) End of DO .. LOOP. *Iterator end
Iterator RBL-EXIT |( -- ) Выйти из цикла READ-BY-LINE. [string_manipulation.spf] *In-Iterator
iterator READ-BY-LINE |( "filename" -- ) Цикл по строкам файла. [string_manipulation.spf] *Iterator begin
iterator READ-BY-LINE: |< -- "filename" > Цикл по строкам файла. [string_manipulation.spf] *Iterator begin
iterator RE-ALL |( S" text" S" /regexp/" -- ) Цикл по всем найденным совпадениям с регулярным выражением. *Iterator begin
iterator RE-ALL: |< -- "text" "/regexp/" > Цикл по всем найденным совпадениям с регулярным выражением. *Iterator begin
iterator REPEAT |( -- ) Ends a BEGIN .. WHILE .. REPEAT loop. *Iterator end
iterator TBL-EXIT |( -- ) Выйти из цикла TXT-BY-LINE. [Extwords2.spf] *In-Iterator
iterator TXT-BY-LINE |( a u -- ) Чтение текста построчно. Начало цикла. [Extwords2.spf] *Iterator begin
iterator TXT-BY-LINE: |< -- "text" > Чтение текста построчно. Начало цикла. [Extwords2.spf] *Iterator begin
iterator UNLOOP |Выход из цикла DO…LOOP. *In-Iterator
iterator UNTIL |( flag -- ) Цикл выполняется хотя бы один pаз и пpодолжается до тех поp, пока условие не станет истинным. *Iterator end
iterator UNTILNOT |( flag -- ) Цикл выполняется хотя бы один pаз и пpодолжается до тех поp, пока условие не станет ложным. [extwords.spf] *Iterator end
iterator WHILE |( ior --) Цикл выполнится, если условие TRUE. *Sub-Iterator
iterator WHILENOT |( ior --) Цикл выполнится, если условие FALSE. [extwords.spf] *Sub-Iterator
iterator WTS-FOR-PROCS |*Iterator begin
iterator XMLPARSER: |*Iterator begin
condition [ELSE] |*Sub-Condition
condition [else] |*Sub-Condition
condition [IF] |*Condition begin
condition [if] |*Condition begin
condition [THEN] |*Condition end
condition CASE |( selector -- selector ) Begins a CASE ... ENDCASE conditional. *Condition begin
condition ELSE |( -- ) Executes the following code if IF failed. *Sub-Condition
condition ENDCASE |( selector -- ) Terminates a CASE ... ENDCASE conditional. *Condition end
condition ENDOF |( -- ) Terminates an OF ... ENDOF clause within a CASE ... ENDCASE conditional. *Sub-Condition end
condition ENDWITH |*Condition end
condition IF |( flag -- ) Executes following code if flag is true. *Condition begin
condition IFNOT |( flag -- ) *Condition begin
condition OF |( selector test-value -- ) Begins an OF ... ENDOF clause within a CASE ... ENDCASE conditional. *Sub-Condition begin
condition THEN |( -- ) Terminates an IF ... ELSE ... THEN. *Condition end
condition WITH |< -- class_name > Установка контекста класса и всех его родителей. *Condition begin
conditional CATCH |( i*x xt -- j*x 0 | i*x n ) Обрабатывает ошибки форт ядра. *Conditional
conditional DONE |*Conditional
conditional EXIT |Выход из текущего слова. *Conditional
conditional THROW |( k*x n -- k*x | i*x n ) Обрабатывает ошибки форт ядра. *Conditional
convert # |Пpеобpазует одну цифpу в заданной системе счисления в строку. *Convert
convert #> |Конец форматирования преобразования числа в строку. *Convert
convert #>c |( a u -- c ) Convert hex or decimal digits to char. *Convert
convert #00 |S>D <# # # #> *Convert
convert #0000 |S>D <# # # # # #> *Convert
convert #S |Пpеобpазует сразу все число в заданной системе счисления в строку. *Convert
convert (>UNICODE) |( a u cp -- wa wu ) Преобразование строки заданной a u в уникоды. cp задаёт кодовую сраницу исходной строки. *Convert
convert (UNICODE>) |( wa wu cp -- a u ) Преобразование unicode строки заданной wa wu в заданную кодовую страницу. cp задаёт кодовую сраницу результирующей строки. *Convert
convert ?TIME>NUMB |( a u -- a1 u1 num ) *Convert
convert @AZ |*Convert
convert @WAZ |*Convert
convert <# |Начало форматирования преобразования числа в строку. *Convert
convert >NUMBER |( ud1 c-addr1 u1 -- ud2 c-addr2 u2 ) *Convert
convert ANSI><OEM |*Convert
convert ANSI>OEM |*Convert
convert ASCIIZ> |( addr -- addr u ) Подсчитывает длинну строки, которая заканчивается нулевым байтом и разделяет адрес нуль-строки на адрес и счетчик. *Convert
convert AZ>UNI |( a -- addr2 ) [sendinput.spf] *Convert
convert AZ>UNICODE |( az -- wz ) *Convert
convert CIF>BE |*Convert
convert COUNT |( addr -- caddr u ) Преобразует строку символов из строки со счетчиком addr. Строка addr не изменяется. *Convert
convert D>H |*Convert
convert D>Kb |*Convert
convert D>S |( x x -- x ) Преобразует число двойной длины в число одинарной длины с тем же числовым значением. *Convert
convert D>XS |*Convert
convert DATE>S |( u -- a u ) Преобразует дату в формате DATE в строку "DD-MM-YYYY". *Convert
convert DATE>YMD |( d -- ymd ) Конвертирует дату из формата DATE в формат YMD. *Convert
convert DIGIT |( c n1 -- n2 ior ) Attempt to convert c to its numerical value in base n1. Return the value and TRUE if successful, FALSE otherwise. *Convert
convert DOES>A |*Convert
convert DOUBLE>S |( d - a u) *Convert
convert EKEY>CHAR |*Convert
convert EKEY>SCAN |*Convert
convert FT>DATE |( ft -- d ) Конвертирует дату из формата FILETIME в формат DATE. *Convert
convert FT>DAY |( ft -- d ) Конвертирует дату и время в формате FILETIME в количество дней. *Convert
convert FT>DD.MM.YYYY/hh:mm:ss |( d - a u) Конвертирует дату и время в формате FILETIME в строку "DD.MM.YYYY/hh:mm:ss". *Convert
convert FT>HOUR |( ft -- h) Конвертирует дату и время в формате FILETIME в количество часов. *Convert
convert FT>MIN |(ft -- m ) Конвертирует дату и время в формате FILETIME в количество минут. *Convert
convert FT>MS |( ft -- ms ) Конвертирует дату и время в формате FILETIME в миллисекунды. Возвращает число двойной длины. *Convert
convert FT>SEC |( ft -- s ) Конвертирует дату и время в формате FILETIME в секунды. Возвращает число двойной длины. *Convert
convert FT>YMDHMS |( ft -- d ) Конвертирует дату из формата FILETIME в формат YMDHMS. *Convert
convert FT-CUR |( -- ft ) Конвертирует текущие дату и время в формат FILETIME. *Convert
convert HANDLE>OBJ |( handle -- obj ) *Convert
convert HLD |*Convert
convert IP>S |( addr u -- IP ) *Convert
convert KOI8>UNICODE |*Convert
convert N>H |( u -- a u ) Выводит стpоковое пpедставление числа в 16-pичном виде. *Convert
convert N>S |( u -- addr u) Пpеобpазовать число в стpоку. *Convert
convert NAME>C |*Convert
convert NAME>F |*Convert
convert NAME>L |*Convert
convert NB>S |( n base -- a u ) *Convert
convert OEM>ANSI |*Convert
convert OEM>UNICODE |*Convert
convert OemToCharBuffA |*Convert
convert RGB>BGR |*Convert
convert RGB>INT |( red green blue -- int ) Red Green Blue в число. [Extwords2.spf] *Convert
convert S>D |( x -- x 0 ) Преобразует число в двойное число с тем же числовым значением. *Convert
convert S>DOUBLE |( a u -- d ) *Convert
convert S>MIN |( a u -- u ) *Convert
convert S>MS |( a u -- u ) *Convert
convert S>NUM |( addr u - u1 ) Стpока в число. *Convert
convert S>SZ |( a u -- a1 u ) *Convert
convert S>UNI |( a u -- addr2 u2 ) [sendinput.spf] *Convert
convert S>UNICODE |( a u1 -- wa u2 ) *Convert
convert S>US |( addr u - u1 addr1 u1 ) *Convert
convert S>UTF16B |( a u -- wa1 u1) [strings.spf] *Convert
convert S>UTF16L |( a u -- wa1 u1) [strings.spf] *Convert
convert S>UTF32B |[strings.spf] *Convert
convert S>UTF32L |[strings.spf] *Convert
convert S>UTF8 |[strings.spf] *Convert
convert S>VB |( a u -- ) *Convert
convert SH:M:S>Sec |*Convert
convert SH:M|D>MIN |*Convert
convert SH:M>Min |( addr u -- n ) Принимает в качестве аргумента строку со временем в формате HH:MM и конвертирует в число, содержащее количество минут. *Convert
convert U>D |( x -- x 0 ) Преобразует положительное число в двойное число с тем же числовым значением. *Convert
convert UASCIIZ> |( wa -- wa u ) *Convert
convert UNICODE>KOI8 |*Convert
convert UNICODE>OEM |*Convert
convert UNICODE>S |( a1 u1 -- a2 u2 ) *Convert
convert UNICODE>UTF8 |( a1 u1 -- a2 u2 ) *Convert
convert UTF16>< |( a u -- a u ) a: AABB -> BBAA. [strings.spf] *Convert
convert UTF16B>32B |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF16B>32L |[strings.spf] *Convert
convert UTF16B>8 |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF16B>S |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF16L>32B |[strings.spf] *Convert
convert UTF16L>32L |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF16L>8 |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF16L>S |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF32>< |( a u -- a u ) a: AABBCCDD -> DDCCBBAA. [strings.spf] *Convert
convert UTF32B>16B |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF32B>16L |[strings.spf] *Convert
convert UTF32B>8 |[strings.spf] *Convert
convert UTF32L>16B |[strings.spf] *Convert
convert UTF32L>16L |( wa u -- a1 u1 ) [strings.spf] *Convert
convert UTF32L>8 |[strings.spf] *Convert
convert UTF8>16B |( a u -- wa1 u1 ) [strings.spf] *Convert
convert UTF8>16L |( a u -- wa1 u1 ) [strings.spf] *Convert
convert UTF8>32B |[strings.spf] *Convert
convert UTF8>32L |[strings.spf] *Convert
convert UTF8>S |( a u -- a1 u1 ) [strings.spf] *Convert
convert UTF8>UNICODE |( a u1 -- wa u2 ) *Convert
convert WASCIIZ> |*Convert
convert WS>SZ |( a u -- a1 u ) *Convert
convert YMD>DATE |( ymd -- d ) Конвертирует дату из формата YMD в формат DATE. *Convert
convert YMDHMS>FT |( ymdhms -- ft ) Конвертирует дату из формата YMDHMS в формат FILETIME. *Convert
winapi accept |*WINAPI
winapi AddAccessAllowedAce |*WINAPI
winapi AddAce |*WINAPI
winapi AdjustTokenPrivileges |*WINAPI
winapi AllocateAndInitializeSid |*WINAPI
winapi AllocConsole |*WINAPI
winapi AppendMenuA |*WINAPI
winapi AttachThreadInput |*WINAPI
winapi Beep |*WINAPI
winapi bind |*WINAPI
winapi BlockInput |[extwords.spf] *WINAPI
winapi BringWindowToTop |*WINAPI
winapi ChangeClipboardChain |*WINAPI
winapi CharLowerA |Converts a ASCII character string or a single character to lowercase. *WINAPI
winapi CharLowerBuffA |Converts uppercase ASCII characters in a buffer to lowercase characters. *WINAPI
winapi CharToOemBuffA |*WINAPI
winapi CharUpperA |Converts a ASCII character string or a single character to uppercase. *WINAPI
winapi CharUpperBuffA |Converts lowercase ASCII characters in a buffer to uppercase characters. *WINAPI
winapi CloseClipboard |*WINAPI
winapi CloseDesktop |*WINAPI
winapi CloseEventLog |*WINAPI
winapi CloseHandle |*WINAPI
winapi CloseServiceHandle |*WINAPI
winapi closesocket |*WINAPI
winapi CloseWindowStation |*WINAPI
winapi CompareFileTime |*WINAPI
winapi connect |*WINAPI
winapi ControlService |*WINAPI
winapi ConvertSidToStringSidA |[sid.spf] *WINAPI
winapi CopyFileA |*WINAPI
winapi CountClipboardFormats |*WINAPI
winapi CreateDesktopA |*WINAPI
winapi CreateDirectoryA |*WINAPI
winapi CreateEventA |*WINAPI
winapi CreateFileA |*WINAPI
winapi CreateFontA |[osd.spf] *WINAPI
winapi CreateMenu |*WINAPI
winapi CreateMutexA |*WINAPI
winapi CreatePopupMenu |*WINAPI
winapi CreateProcessA |*WINAPI
winapi CreateProcessAsUserA |*WINAPI
winapi CreateRemoteThread |[process_handling.spf] *WINAPI
winapi CreateSemaphoreA |*WINAPI
winapi CreateServiceA |*WINAPI
winapi CreateThread |*WINAPI
winapi CreateToolhelp32Snapshot |*WINAPI
winapi CreateWaitableTimerA |[wakeup.spf] *WINAPI
winapi CreateWindowExA |*WINAPI
winapi DefWindowProcA |*WINAPI
winapi DeleteAce |*WINAPI
winapi DeleteCriticalSection |*WINAPI
winapi DeleteFileA |*WINAPI
winapi DeleteObject |*WINAPI
winapi DeleteService |*WINAPI
winapi DestroyCursor |*WINAPI
winapi DestroyIcon |*WINAPI
winapi DestroyMenu |*WINAPI
winapi DestroyWindow |*WINAPI
winapi DispatchMessageA |*WINAPI
winapi DuplicateToken |*WINAPI
winapi DuplicateTokenEx |*WINAPI
winapi EmptyClipboard |*WINAPI
winapi EnableWindow |*WINAPI
winapi EnterCriticalSection |*WINAPI
winapi EnumChildWindows |*WINAPI
winapi EnumDesktopWindows |*WINAPI
winapi EnumProcesses |*WINAPI
winapi EnumProcessModules |*WINAPI
winapi EnumThreadWindows |*WINAPI
winapi EnumWindows |*WINAPI
winapi EqualSid |*WINAPI
winapi ExitProcess |*WINAPI
winapi ExitThread |*WINAPI
winapi ExitWindowsEx |*WINAPI
winapi FileTimeToLocalFileTime |*WINAPI
winapi FileTimeToSystemTime |*WINAPI
winapi FindClose |*WINAPI
winapi FindCloseChangeNotification |*WINAPI
winapi FindExecutableA |*WINAPI
winapi FindFirstChangeNotificationA |*WINAPI
winapi FindFirstFileA |*WINAPI
winapi FindNextChangeNotification |*WINAPI
winapi FindNextFileA |*WINAPI
winapi FindWindowA |*WINAPI
winapi FindWindowExA |*WINAPI
winapi FormatMessageA |*WINAPI
winapi FreeConsole |*WINAPI
winapi FreeLibrary |*WINAPI
winapi FreeSid |*WINAPI
winapi GetAce |*WINAPI
winapi GetAclInformation |*WINAPI
winapi GetActiveWindow |( -- hwnd ) Отыскивает описатель окна, которое имеет текущий фокус ввода. *WINAPI
winapi GetChar |*WINAPI
winapi GetClassLongA |[win2tray.spf] *WINAPI
winapi GetClassNameA |*WINAPI
winapi GetClientRect |*WINAPI
winapi GetClipboardData |*WINAPI
winapi GetClipboardOwner |*WINAPI
winapi GetClipboardViewer |*WINAPI
winapi GetCommandLineA |*WINAPI
winapi GetCurrentDirectoryA |*WINAPI
winapi GetCurrentProcess |*WINAPI
winapi GetCurrentProcessId |*WINAPI
winapi GetCurrentThread |*WINAPI
winapi GetCurrentThreadId |*WINAPI
winapi GetCursorPos |*WINAPI
winapi GetDesktopWindow |[osd.spf] *WINAPI
winapi GetDialogBaseUnits |*WINAPI
winapi GetDiskFreeSpaceA |*WINAPI
winapi GetDiskFreeSpaceExA |*WINAPI
winapi GetDoubleClickTime |( -- u ) Возвращает миллисекунды паузы между нажатиями кнопки мышы в течение которой детектируется двойное нажатие. [Extwords2.spf] *WINAPI
winapi GetEnvironmentVariableA |*WINAPI
winapi GetExitCodeProcess |*WINAPI
winapi GetExitCodeThread |*WINAPI
winapi GetFileAttributesA |*WINAPI
winapi GetFileSecurityA |*WINAPI
winapi GetFileSize |*WINAPI
winapi GetFocus |( -- hwnd ) Считывает окно, которое в данный момент имеет фокус ввода. *WINAPI
winapi GetForegroundWindow |( -- hwnd ) Возвращает window-handle активного окна. *WINAPI
winapi GetFullPathNameA |*WINAPI
winapi gethostbyaddr |*WINAPI
winapi gethostbyname |*WINAPI
winapi gethostname |*WINAPI
winapi GetIdleTime |( -- ms ) Счетчик idle time (время простоя компьютера) в миллисекундах. *WINAPI
winapi GetKeyboardLayout |*WINAPI
winapi GetKeyState |( -- u ) [keystate.spf] *WINAPI
winapi GetLastInputInfo |*WINAPI
winapi GetLengthSid |*WINAPI
winapi GetLocalTime |*WINAPI
winapi GetMessageA |*WINAPI
winapi GetMessageExtraInfo |*WINAPI
winapi GetModuleBaseNameA |*WINAPI
winapi GetModuleFileNameA |*WINAPI
winapi GetModuleFileNameExA |*WINAPI
winapi GetModuleHandleA |*WINAPI
winapi GetNamedSecurityInfoA |*WINAPI
winapi GetNumberOfConsoleInputEvents |*WINAPI
winapi GetNumberOfEventLogRecords |*WINAPI
winapi GetOldestEventLogRecord |*WINAPI
winapi GetOpenClipboardWindow |*WINAPI
winapi GetParent |[extwords.spf] *WINAPI
winapi getpeername |*WINAPI
winapi GetPrivateProfileStringA |[ini.spf] *WINAPI
winapi GetProcAddress |*WINAPI
winapi GetProcessHeap |*WINAPI
winapi GetProcessMemoryInfo |[process_handling.spf] *WINAPI
winapi GetProcessTimes |*WINAPI
winapi GetProcessWindowStation |*WINAPI
winapi GetSecurityDescriptorDacl |*WINAPI
winapi GetShellWindow |( -- hwnd ) Хэндл окна оболочки винды, если оболочка - Explorer, то имя окна - "Progman". [Extwords2.spf] *WINAPI
winapi GetStdHandle |*WINAPI
winapi GetSystemTime |*WINAPI
winapi GetThreadDesktop |*WINAPI
winapi GetThreadTimes |*WINAPI
winapi GetTickCount |( -- ms ) Кладет на стек количество миллисекунд, прошедших с момента старта операционной системы. *WINAPI
winapi GetTimeZoneInformation |*WINAPI
winapi GetTokenInformation |*WINAPI
winapi GetUserNameA |*WINAPI
winapi GetUserObjectInformationA |*WINAPI
winapi GetUserObjectSecurity |*WINAPI
winapi GetVersionExA |*WINAPI
winapi GetVolumeInformationA |[system.spf] *WINAPI
winapi GetWindowDC |[osd.spf] *WINAPI
winapi GetWindowLongA |[windows.spf] *WINAPI
winapi GetWindowRect |*WINAPI
winapi GetWindowTextA |*WINAPI
winapi GetWindowTextLengthA |*WINAPI
winapi GetWindowThreadProcessId |[procwin.spf] *WINAPI
winapi GlobalAlloc |*WINAPI
winapi GlobalFree |*WINAPI
winapi GlobalLock |*WINAPI
winapi GlobalMemoryStatus |[system.spf] *WINAPI
winapi GlobalUnlock |*WINAPI
winapi HeapAlloc |*WINAPI
winapi HeapCreate |*WINAPI
winapi HeapDestroy |*WINAPI
winapi HeapFree |*WINAPI
winapi HeapReAlloc |*WINAPI
winapi HeapSize |*WINAPI
winapi IcmpCloseHandle |*WINAPI
winapi IcmpCreateFile |*WINAPI
winapi IcmpSendEcho |*WINAPI
winapi ImpersonateLoggedOnUser |*WINAPI
winapi inet_addr |*WINAPI
winapi inet_ntoa |*WINAPI
winapi InitializeAcl |*WINAPI
winapi InitializeCriticalSection |*WINAPI
winapi InitializeSecurityDescriptor |*WINAPI
winapi ioctlsocket |*WINAPI
winapi IsClipboardFormatAvailable |*WINAPI
winapi IsDialogMessage |*WINAPI
winapi IsHungAppWindow |[windows.spf] *WINAPI
winapi IsIconic |[windows.spf] *WINAPI
winapi IsSystemResumeAutomatic |[rstimer.spf] *WINAPI
winapi IsWindow |*WINAPI
winapi IsWindowVisible |[windows.spf] *WINAPI
winapi keybd_event |*WINAPI
winapi KillTimer |*WINAPI
winapi LeaveCriticalSection |*WINAPI
winapi listen |*WINAPI
winapi LoadIconA |[win2tray.spf] *WINAPI
winapi LoadImageA |[win2tray.spf] *WINAPI
winapi LoadKeyboardLayoutA |*WINAPI
winapi LoadLibraryA |*WINAPI
winapi loadUserProfile |*WINAPI
winapi LocalFileTimeToFileTime |*WINAPI
winapi LocalFree |[sid.spf] *WINAPI
winapi LockWorkstation |*WINAPI
winapi LockWorkStation |( -- ) [lock_workstation.spf] *WINAPI
winapi LogonUserA |*WINAPI
winapi LookupAccountNameA |[sid.spf] *WINAPI
winapi LookupAccountSidA |*WINAPI
winapi LookupPrivilegeValueA |*WINAPI
winapi MapVirtualKeyExA |*WINAPI
winapi mciSendStringA |*WINAPI
winapi MD5Final |( digest MD5context -- ) *WINAPI
winapi MD5Full |( digest a u -- ) *WINAPI
winapi MD5Init |( -- MD5context ) *WINAPI
winapi MD5Update |( a u MD5Context -- ) *WINAPI
winapi MessageBoxA |*WINAPI
winapi Module32First |*WINAPI
winapi Module32Next |*WINAPI
winapi MoveFileA |*WINAPI
winapi MultiByteToWideChar |[strings.spf] *WINAPI
winapi NetApiBufferFree |[net.spf] *WINAPI
winapi NetSessionEnum |[net.spf] *WINAPI
winapi NetWkstaUserEnum |[net.spf] *WINAPI
winapi NotifyChangeEventLog |*WINAPI
winapi NtQueryInformationProcess |*WINAPI
winapi NtQuerySystemInformation |*WINAPI
winapi OpenClipboard |*WINAPI
winapi OpenDesktopA |*WINAPI
winapi OpenEventLogA |*WINAPI
winapi OpenProcess |*WINAPI
winapi OpenProcessToken |*WINAPI
winapi OpenSCManagerA |*WINAPI
winapi OpenServiceA |*WINAPI
winapi OpenThread |*WINAPI
winapi OpenThreadToken |*WINAPI
winapi PlaySound |*WINAPI
winapi PostMessageA |*WINAPI
winapi PostQuitMessage |*WINAPI
winapi Process32First |*WINAPI
winapi Process32Next |*WINAPI
winapi ProcessIdToSessionId |*WINAPI
winapi QueryPerformanceCounter |[signature.spf, time.spf] *WINAPI
winapi QueryPerformanceFrequency |[signature.spf, time.spf] *WINAPI
winapi RasConnectionNotificationA |*WINAPI
winapi RasDialA |*WINAPI
winapi RasDialDlgA |[ras.spf] *WINAPI
winapi RasEnumConnectionsA |*WINAPI
winapi RasGetConnectStatusA |*WINAPI
winapi RasGetErrorStringA |*WINAPI
winapi RasHangUpA |*WINAPI
winapi ReadConsoleInputA |*WINAPI
winapi ReadEventLogA |*WINAPI
winapi ReadFile |*WINAPI
winapi ReadProcessMemory |[process_handling.spf] *WINAPI
winapi recv |*WINAPI
winapi recvfrom |*WINAPI
winapi RedrawWindow |[osd.spf] *WINAPI
winapi RegCloseKey |*WINAPI
winapi RegCreateKeyExA |*WINAPI
winapi RegDeleteValueA |*WINAPI
winapi RegisterHotKey |*WINAPI
winapi RegisterServiceCtrlHandlerA |*WINAPI
winapi RegisterServiceProcess |*WINAPI
winapi RegNotifyChangeKeyValue |*WINAPI
winapi RegOpenKeyA |*WINAPI
winapi RegOpenKeyExA |*WINAPI
winapi RegQueryValueExA |*WINAPI
winapi RegSetValueExA |*WINAPI
winapi ReleaseDC |[osd.spf] *WINAPI
winapi ReleaseMutex |*WINAPI
winapi ReleaseSemaphore |*WINAPI
winapi RemoveDirectoryA |*WINAPI
winapi ResetEvent |*WINAPI
winapi Restricted |*WINAPI
winapi ResumeThread |*WINAPI
winapi RevertToSelf |*WINAPI
winapi SelectObject |[osd.spf] *WINAPI
winapi send |*WINAPI
winapi SendInput |[sendinput.spf] *WINAPI
winapi SendMessageA |( u u u u -- u ) Посылка любому окну специального управляющего сообщения (Windows Messages). *WINAPI
winapi sendto |*WINAPI
winapi SetActiveWindow |*WINAPI
winapi SetBkMode |[osd.spf] *WINAPI
winapi SetClipboardData |*WINAPI
winapi SetClipboardViewer |*WINAPI
winapi SetConsoleCtrlHandler |*WINAPI
winapi SetConsoleTitleA |*WINAPI
winapi SetCurrentDirectoryA |*WINAPI
winapi SetCursorPos |*WINAPI
winapi SetEndOfFile |*WINAPI
winapi SetEnvironmentVariableA |*WINAPI
winapi SetErrorMode |*WINAPI
winapi SetFileAttributesA |*WINAPI
winapi SetFilePointer |*WINAPI
winapi SetFileSecurityA |*WINAPI
winapi SetFocus |*WINAPI
winapi SetForegroundWindow |( hwnd -- ? ) *WINAPI
winapi SetLastError |*WINAPI
winapi SetLayeredWindowAttributes |[windows.spf] *WINAPI
winapi SetMenuDefaultItem |*WINAPI
winapi SetPriorityClass |[process.spf] *WINAPI
winapi SetProcessAffinityMask |[process.spf] *WINAPI
winapi SetProcessShutdownParameters |*WINAPI
winapi SetProcessWorkingSetSize |*WINAPI
winapi SetSecurityDescriptorDacl |*WINAPI
winapi SetSecurityInfo |*WINAPI
winapi SetServiceStatus |*WINAPI
winapi setsockopt |*WINAPI
winapi SetSystemPowerState |*WINAPI
winapi SetSystemTime |[timesync.spf] *WINAPI
winapi SetTextColor |[osd.spf] *WINAPI
winapi SetThreadDesktop |*WINAPI
winapi SetThreadExecutionState |[rstimer.spf] *WINAPI
winapi SetThreadToken |*WINAPI
winapi SetTimer |*WINAPI
winapi SetWaitableTimer |[wakeup.spf] *WINAPI
winapi SetWindowLongA |[windows.spf] *WINAPI
winapi SetWindowPos |*WINAPI
winapi SetWindowTextA |*WINAPI
winapi SHDeleteKeyA |*WINAPI
winapi ShellExecuteA |*WINAPI
winapi ShellExecuteEx |*WINAPI
winapi SHFileOperationA |*WINAPI
winapi SHGetMalloc |*WINAPI
winapi SHGetPathFromIDListA |*WINAPI
winapi SHGetSpecialFolderLocation |*WINAPI
winapi ShowWindow |*WINAPI
winapi shutdown |*WINAPI
winapi Sleep |*WINAPI
winapi SleepEx |[wakeup.spf] *WINAPI
winapi socket |*WINAPI
winapi StartServiceCtrlDispatcherA |*WINAPI
winapi SuspendThread |*WINAPI
winapi SwitchDesktop |*WINAPI
winapi SystemParametersInfoA |*WINAPI
winapi SystemTimeToFileTime |*WINAPI
winapi TerminateProcess |*WINAPI
winapi TerminateThread |*WINAPI
winapi TextOutA |[osd.spf] *WINAPI
winapi TlsAlloc |*WINAPI
winapi TlsFree |*WINAPI
winapi TlsGetValue |*WINAPI
winapi TlsSetValue |*WINAPI
winapi TrackPopupMenuEx |*WINAPI
winapi TranslateMessage |*WINAPI
winapi TryEnterCriticalSection |*WINAPI
winapi UnregisterHotKey |*WINAPI
winapi VirtualAlloc |*WINAPI
winapi VirtualAllocEx |[process_handling.spf] *WINAPI
winapi VirtualFreeEx |[process_handling.spf] *WINAPI
winapi VirtualProtect |*WINAPI
winapi VirtualQuery |*WINAPI
winapi VkKeyScanA |*WINAPI
winapi VkKeyScanExA |*WINAPI
winapi WaitForInputIdle |*WINAPI
winapi WaitForMultipleObjects |*WINAPI
winapi WaitForSingleObject |*WINAPI
winapi WideCharToMultiByte |[strings.spf] *WINAPI
winapi WindowFromPoint |( -- hwnd ) Получить хэндл окна под курсором. [extwords.spf] *WINAPI
winapi WriteFile |*WINAPI
winapi WritePrivateProfileStringA |[ini.spf] *WINAPI
winapi WriteProcessMemory |[process_handling.spf] *WINAPI
winapi WSACleanup |*WINAPI
winapi WSAGetLastError |*WINAPI
winapi WSASetLastError |*WINAPI
winapi WSAStartup |*WINAPI
winapi WTSCloseServer |[process_handling.spf] *WINAPI
winapi WTSDisconnectSession |[process_handling.spf] *WINAPI
winapi WTSEnumerateProcessesA |*WINAPI
winapi WTSEnumerateSessionsA |*WINAPI
winapi WTSFreeMemory |*WINAPI
winapi WTSGetActiveConsoleSessionId |*WINAPI
winapi WTSLogoffSession |[process_handling.spf] *WINAPI
winapi WTSOpenServerA |[process_handling.spf] *WINAPI
winapi WTSQueryUserToken |*WINAPI
winapi WTSRegisterSessionNotification |*WINAPI
winapi WTSWaitSystemEvent |*WINAPI
word ' |( -- acf ) Finds a word in the dictionary. *WORD
word !CSP |( -- ) Remembers the stack pointer. *WORD
word !LIST |( value list -- ) Добавить в начало списка значение value. [lists.spf] *WORD
word " |( " any text" -> az u ) Строковый литерал az u. [strings.spf] *String
word "" |( -- adr ) Collects a word from the input stream. *WORD
word "CLASSIC" |S" CLASSIC-TASK-#-" *WORD
word "CLIP" |( a1 n1 -- a1 n1 ) *WORD
word #!LIST |( val_1 ... val_n n list -- ) Добавить поочередно n значений со стека в начало списка list. Значения добавляются начиная с вершины стека в начало списка в порядке очереди. [lists.spf] *WORD
word #DIAL |( u1 addr2 u2 -- ) *WORD
word #DIAL: |< -- u1 addr2 u2 > *WORD
word $0 |( -- a u ) Вся найденная последовательность, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $1 |( -- a u ) Первая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $10 |( -- a u ) Десятая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $11 |( -- a u ) Одиннадцатая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $12 |( -- a u ) Двеннадцатая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $13 |( -- a u ) Тринадцатая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $14 |( -- a u ) Четырнадцатая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $15 |( -- a u ) Пятнадцатая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $2 |( -- a u ) Вторая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $3 |( -- a u ) Третья группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $4 |( -- a u ) Четвёртая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $5 |( -- a u ) Пятая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $6 |( -- a u ) Шестая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $7 |( -- a u ) Седьмая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $8 |( -- a u ) Восьмая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word $9 |( -- a u ) Девятая группа, совпавшая с регулярным выражением при использовании RE-MATCH и RE-ALL. *WORD
word &entity |( ca u -- ca1 u1 ca2 u2 ca u3 ? ) Decode standard XML entities: <>'"& Return: remaining ca1 u1, entity ca2 u2, preceding ca u3, flag. *WORD
word (.") |( -- ) Run-time word compiled by ." *WORD
word (CPU-USAGE) |( ms -- % ) Мониторит загрузку процессора в течение ms миллисекунд, результат измерений в процентах. *WORD
word (PROC-CPU-USAGE) |( a u ms -- % ) Мониторит загрузку процессора указанным процессом в течение ms миллисекунд, результат измерений в процентах. *WORD
word )> |Syntax Restriction ON. *WORD
word )Alt |[sendinput.spf] *WORD
word )Ctrl |[sendinput.spf] *WORD
word )LeftAlt |[sendinput.spf] *WORD
word )LeftCtrl |[sendinput.spf] *WORD
word )LeftShift |[sendinput.spf] *WORD
word )RightAlt |[sendinput.spf] *WORD
word )RightCtrl |[sendinput.spf] *WORD
word )RightShift |[sendinput.spf] *WORD
word )Shift |[sendinput.spf] *WORD
word )Win |[sendinput.spf] *WORD
word *.* |S" *.*" *WORD
word . |( u -- ) Печатает верхнее число со стека данных. *WORD
word ." |( -- ) Compiles a string for later display. *String
word .( |( -- ) Displays a string immediately. *WORD
word .B |( num -- ) Распечатать число со стека в бинарной системе счисления. [extwords.spf] *WORD
word .D |( num -- ) Распечатать число со стека в десятичной системе счисления. [extwords.spf] *WORD
word .H |( num -- ) Распечатать число со стека в шестнадцатиричной системе счисления. [extwords.spf] *WORD
word .R |( n +n -- ) Displays a number in a fixed width field. *WORD
word .S |( -- ) Displays the contents of the data stack. *WORD
word .SN |( n -- ) Распечатать n верхних элементов стека. [extwords.spf] *WORD
word .WTSState |( state -- ) *WORD
word /? |*WORD
word /H |*WORD
word /h |*WORD
word /help |*WORD
word /STRING |( a n k - a+k n-k ) Укоpачивает a u строку на k символов слева. *WORD
word ? |( adr  -- ) Displays the contents of a variable. *WORD
word -? |*WORD
word ?COMP |( -- ) Aborts if not compiling. *WORD
word ?CRON-LOG |*WORD
word ?CSP |( -- ) Checks stack pointer against value saved by !CSP *WORD
word ?dst-is-dir |( a1 u1 a2 u2 -- a1 u1 a3 u3 ) *WORD
word ?ERR" |*String
word ?EXEC |( -- ) Aborts if not interpreting. *WORD
word ?EXECUTE |*WORD
word ?FREE |*WORD
word ?FREE2 |*WORD
word ?LOG-ERROR |( ior #msg -- ) *WORD
word ?LOG-SERROR |( ior a u -- ) *WORD
word ?MsgBox |*WORD
word ?SLITERAL |*WORD
word ?STACK |( -- ) Aborts if the stack pointer is out of range. *WORD
word ?THROW" |*String
word @RECT |( addr -- bottom right top left ) *WORD
word [CHAR] |( -- a -> n ) Возвращает код символа, следующего за словом. *WORD
word [DEFINED] |( -- f ) "name". [extwords.spf] *WORD
word [end] |S" " *WORD
word [UNDEFINED] |( -- f ) "name". [extwords.spf] *WORD
word \ |( -- ) Skips the rest of the line. *WORD
word \EOF |( -- ) Конец файла. Завершение чтения файла компилятором. *WORD
word ]LIST |( list-handle list-pos x*i -- ) Закончить добавление значений в список. Слово вычисляет число значений, оказавшихся на стеке после слова LIST[ и добавляет их все в начало списка по порядку. [lists.spf] *WORD
word {{ |( "name" -- ) Кладет в ORDER wordlist, к-ый даст "name" или vocabulary если "name" - vocabulary. *WORD
word }} |( addr -- addr ) *WORD
word +' |( ' any text' -> ) Дописать в строковый буфер строку с выключенными эскейп-последовательностями. [strings.spf] *String
word +" |( " any text" -> ) Добавить строку в буфер SPAD. [strings.spf] *String
word +ModuleDirName |*WORD
word +ORDER |( wid -- ) *WORD
word <( |Syntax Restriction OFF. *WORD
word <?xml |( -- ) *WORD
word <EOF> |*WORD
word <MARK |( -- adr ) Remembers target of backward branch. *WORD
word >bl |( a u -- a u ) Convert control characters to spaces. *WORD
word >BODY |( acf -- apf ) Finds the parameter field address from the compilation address. *WORD
word ->CLASS |< <p-obj> -- <class_name> [<field_name> @ | method_name] > Обращение к полю или методу объекта. *WORD
word >IN |( -- adr ) Variable containing input stream offset; Implemented in BLOCK.FTH *WORD
word >MARK |( -- adr ) Remembers the location of forward branch. *WORD
word >NAME |( acf -- anf ) Finds name field address from compilation address. *WORD
word >RESOLVE |( adr -- ) Finishes a forward branch. *WORD
word ->WM |( mess_id oid c ) Послать заданное сообщение объекту. *WORD
word 2CRLF |*WORD
word 9x? |*WORD
word 9xUSERNAME |*WORD
word ABORT |( i*x -- ) ( R: j*x -- ) Выполняет функцию -1 THROW. *WORD
word ABORT" |( flag -- ) Conditional abort with message. *String
word about |( -- ) Открыть диалоговое окно nnCron "О программе". *WORD
word AboveNormalPriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word ACCEPT |( a n -- n? ) Принимает с клавиатуры строку не более чем из N символов, размещая их с адреса A1. Число реально введенных символов будет оставлено на стеке. *WORD
word ACCESS-DATE |( -- n ) Дата доступа (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word Action: |*WORD
word ActivateConsole |( -- ? ) *WORD
word ACTIVE-PROC-NAME |*WORD
word ACTIVE-PROC-PID |*WORD
word ACTIVE-WINDOW |( -- a u ) Заголовок активного окна. *WORD
word ACTIVE-WINDOW-CLASS |( -- a u ) *WORD
word Add |[sendinput.spf] *WORD
word ADD-CRON-MENU-ITEM |( cron-node id -- ) *WORD
word ADD-HOST |( a u -- ) Добавляет в системный трей иконку, которая отображает доступен ли сейчас указанный интернет-сайт. [win2tray.spf] *WORD
word ADD-MASK |( a u list -- ) *WORD
word AddNode |( value list -- ) Добавить элемент (с указанным значением) в начало списка. *WORD
word AddPair |( n1 n2 list -- ) *WORD
word ADD-TI |( a u hicon -- id ) Добавить в системный трей произвольную иконку и указать текст, который должен появляться при наведении курсора мыши на эту иконку. [win2tray.spf] *WORD
word AfterControlWindowCreating |*WORD
word AfterCrontabLoading |*WORD
word AfterWatchStart |*WORD
word AHEAD |*WORD
word AKEY |( VK -- ) Однократно нажать ANSI клавишу. [sendinput.spf] *WORD
word AKEYDN |( VK -- ) Нажать ANSI клавишу. [sendinput.spf] *WORD
word AKEYS |( a u -- ) Однократно нажать все ANSI клавиши в строке, при этом будут отправлены именно те символы, что указаны в строке. [sendinput.spf] *WORD
word AKEYUP |( VK -- ) Отпустить ANSI клавишу. [sendinput.spf] *WORD
word AL@ |*WORD
word AL64 |( n -- char ) *WORD
word -AL64 |( char -- n flag ) *WORD
word ALIGN-BYTES |*WORD
word ALL |Модификатор "оконных" команд предписывает соответствующей команде выполнится для всех окон, заголовки которых совпадают с заданной маской. *WORD
word ALL>ENV |*WORD
word AllAllowedSA |*WORD
word AllAllowedSD |( -- sd ) *WORD
word Also |( -- ) Объединяет спецификаторы Time: и Watch* логическим "ИЛИ" (по умолчанию они объединены логическим "И"). <Опция задачи> *WORD
word Alt |[sendinput.spf] *WORD
word Alt( |[sendinput.spf] *WORD
word AND? |*WORD
word API-CALL |*WORD
word apiUPPER |( a u -- ) Converts lowercase ASCII characters in a buffer to uppercase characters. *WORD
word apiUPPER-CHAR |( c1 -- c2 ) Converts a ASCII character string or a single character to uppercase. *WORD
word App |[sendinput.spf] *WORD
word AppendNode |( value list -- ) Добавить элемент (с указанным значением) в конец списка. *WORD
word AppendPair |( n1 n2 list -- ) *WORD
word app-quote |*WORD
word AppRest |[win2tray.spf] *WORD
word ASCII-STRINGS |Режим кодировки. [strings.spf] *WORD
word AsLoggedUser |( -- ) Предписывает выполнять задачу "от имени" текущего авторизовавшегося пользователя системы. <Опция задачи> *WORD
word AT-PROCESS-FINISHING |*WORD
word AT-PROCESS-STARTING |*WORD
word AT-THREAD-FINISHING |*WORD
word AT-THREAD-STARTING |*WORD
word AUTOSPAD-OFF |( -- ) Выключить автоизменение размера SPAD. [strings.spf] *WORD
word AUTOSPAD-ON |( -- ) Включить автоизменение размера SPAD. [strings.spf] *WORD
word az, |*WORD
word BACK-ISEARCH |( a u a1 u1 -- a2 u2 ? ) Поиск с конца (без учёта регистра). [Extwords2.spf] *WORD
word BACK-SEARCH |( a u a1 u1 -- a2 u2 ? ) Поиск с конца. [extwords.spf] *WORD
word Backspace |[sendinput.spf] *WORD
word BackupPath: |< -- "folder_name" > Задает каталог, куда nnCron помещает резервные копии кронтабов и ини-файлов при их изменении. <Опция nncron.ini> *WORD
word BALLOON |( a-title u1 a-text u2 -- ) Выводит на экран небольшую подсказку с заданным заголовком и текстом возле иконки nnCron в системном трее. *WORD
word BALLOON: |< -- "balloon_title" "balloon_text" > Выводит на экран небольшую подсказку с заданным заголовком и текстом возле иконки nnCron в системном трее. *WORD
word base64 |( addr u dest -- addr1 u1 ) *WORD
word BEEP |( <длительность_в_мс> <частота_гц> -- ) Подает звуковой сигнал через встроенный динамик. *WORD
word BEEP: |< -- <длительность_в_мс> <частота_гц> > Подает звуковой сигнал через встроенный динамик. *WORD
word BEEP95 |( Duration-ms Freq-Hz -- ) *WORD
word BeforeCrontabLoading |*WORD
word BeforeStop |*WORD
word BEHAVIOR |*WORD
word BelowNormalPriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word BindSocket |( port s -- ior ) *WORD
word BKSP |[sendinput.spf] *WORD
word BL |( -- 32 ) Возвращает код символа пробел (32). *WORD
word BLANK-LINE? |*WORD
word BLK |( -- adr ) Variable containing input block number; Implemented in BLOCK.FTH *WORD
word BlockTheInput |( -- ) Блокировать ввод с клавиатуры и мыши. [extwords.spf] *WORD
word BRANCH, |*WORD
word Break |[sendinput.spf] *WORD
word Browser_back |[sendinput.spf] *WORD
word Browser_favorites |[sendinput.spf] *WORD
word Browser_forward |[sendinput.spf] *WORD
word Browser_home |[sendinput.spf] *WORD
word Browser_refresh |[sendinput.spf] *WORD
word Browser_search |[sendinput.spf] *WORD
word Browser_stop |[sendinput.spf] *WORD
word BS |[sendinput.spf] *WORD
word Buf |*WORD
word buy |( -- ) Открыть страницу регистрации программы nnCron. *WORD
word BYE |( -- ) Exits from Forth. *WORD
word bye |( -- ) Exits from Forth. *WORD
word C" |( -- a ) Строка со счетчиком (ac-строка). *String
word C-?DO |*WORD
word C-+LOOP |*WORD
word CalcMenuYX |( -- y x ) *WORD
word CALL_DIAL |( -- ) Инициируют дозвон используя EServ. *WORD
word CALL_HANGUP |( -- ) Прерывает соединение используя EServ. *WORD
word CapsLock |[sendinput.spf] *WORD
word CAPSLOCK-SWITCH |( -- ) Переключение состояния "Caps Lock". [Extwords2.spf] *WORD
word -cBuff |*WORD
word cBuff@ |*WORD
word C-DO |*WORD
word CDR |*WORD
word CD-TRAY-CLOSE |( letter -- ior ) Закрыть лоток указанного CD-ROM драйва. *WORD
word CD-TRAY-CLOSE: |< -- drv_letter > Закрыть лоток указанного CD-ROM драйва. *WORD
word CD-TRAY-EJECT |( letter -- ior ) Oткрыть лоток указанного CD-ROM драйва. *WORD
word CD-TRAY-EJECT: |< -- drv_letter > Oткрыть лоток указанного CD-ROM драйва. *WORD
word CF-ACTIVE? |Проверка активности задачи изнутри самой задачи. *WORD
word CF-ALSO? |*WORD
word CF-ASLOGGED? |*WORD
word CF-ATSTART? |*WORD
word CF-ATSTOP? |*WORD
word CF-DAILY? |*WORD
word CF-ERROR? |*WORD
word CF-HOURLY? |*WORD
word CF-HYPER? |*WORD
word CFL |*WORD
word CF-LOAD-PROFILE? |*WORD
word CF-LOGGING? |*WORD
word CF-LY? |*WORD
word CF-MONTHLY? |*WORD
word CF-NODEL? |*WORD
word CF-ONCE? |*WORD
word CF-PROFILE? |*WORD
word CF-RUN-MISSED? |*WORD
word CF-SINGLE? |*WORD
word CF-WEEKLY? |*WORD
word CHAR |*WORD
word CharAddr |*WORD
word charKey |( c -- ) *WORD
word CharReplace |( a u char1 char2 -- a u ) Заменить в строке символ 1 на символ 2 и оставить строку на стеке. [extwords.spf] *WORD
word CHECK-NETWORK-CONNECTION |( S" LocalHostNameOrIP" -- ) [CheckNetworkConnection.spf] *WORD
word CHECK-NETWORK-CONNECTION: |< -- "LocalHostNameOrIP" > [CheckNetworkConnection.spf] *WORD
word CHG |*WORD
word CHG: |*WORD
word C-I |*WORD
word CLASS@ |*WORD
word CLASS-FIND |( addr class -- xt ? ) *WORD
word C-LEAVE |*WORD
word CLIPBOARD |( -- a u ) Текущее содержимое буфера обмена. *WORD
word CLIPBOARD! |( S" text" -- ) Помещает text в буфер обмена. *WORD
word CLIPBOARD: |< -- "text" > Помещает text в буфер обмена. *WORD
word CLITERAL |*WORD
word C-LOOP |*WORD
word CloseConsole |*WORD
word CLOSE-FILE |( field -- ior ) Закрывает файл, заданный на стеке идентификатором. Возвращает на стеке код результата операции, сообщенный операционной системой. *WORD
word COMPILE, |*WORD
word CompleteTaskTimeout: |< -- <time_in_ms> > Определяет паузу (в миллисекундах), в течение которой nnCron будет ожидать завершения запущенных задач при перечитывании кронтабов. <Опция nncron.ini> *WORD
word CONNECTION |( -- a u ) Список всех активных интернет соединений (conn1, conn2, ...). *WORD
word cons |( n1 n2 -- a ) *WORD
word CONTINUE-SHUTDOWN |( -- ) Возобновляет процесс выключения компьютера, который был прерван с помощью слова INTERCEPT-SHUTDOWN. *WORD
word CPU-USAGE |( -- % ) Мониторит загрузку процессора в течение одной секунды, результат измерений в процентах. *WORD
word CpuUsageIndex |*WORD
word CR |( -- ) Terminates a line on the display and goes to the next line. *WORD
word CREATE-FILE |( addr u fam -- field ior ) Создает и открывает файл, заданный адресом первого байта имени addr, длиной строки u и атрибутами fam (file access method). Возвращает на стеке идентификатор файла и код результата операции. *WORD
word CREATE-FILE-SHARED |*WORD
word CREATE-MUTEX |*WORD
word CreateWindow |( ... -- hwnd ) *WORD
word CREATION-DATE |( -- n ) Дата создания найденного файла (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word CRIT-DELETE |( a -- ? ) *WORD
word CRIT-ENTER |( a -- ) *WORD
word CRITICAL-SECTION |*WORD
word CRIT-LEAVE |( a -- ) *WORD
word CRIT-TRY |( a -- ? ) *WORD
word crlf |( -- u ) Возврат каретки и перевод строки. *WORD
word CRLF |( -- u ) Возврат каретки и перевод строки. *WORD
word cron.log |*WORD
word CronDir |*WORD
word CronINI |*WORD
word CRON-LOG |( S" message" -- ) Выводит сообщение в общий лог nnCron. *WORD
word Cronlog: |< -- "filename" > Задает имя лог-файла nnCron. <Опция nncron.ini> *WORD
word CRONLOG-TIME |( -- addr u ) *WORD
word CronOUT |*WORD
word Crontab: |< -- "filename" > Используется для подключения кронтабов. <Опция nncron.ini> *WORD
word CRONTAB-ERROR |Слово вызывается каждый раз, когда в кронтабе обнаружена синтаксическая ошибка. <Опция nncron.ini> *WORD
word CRON-TASK-NAME |*WORD
word CropAfterString |( a u a1 u1 -- a2 u2 ) Обрезать строку 1 после строки 2. [extwords.spf] *WORD
word CropAfterStringEnd |( a u a1 u1 -- a2 u2 ) Обрезать строку 1 после строки 2 для первого совпадения с конца строки. [extwords.spf] *WORD
word CropFromString |( a1 u1 a2 u2 -- a3 u3 ) Обрезать строку 1 начиная со строки 2. [extwords.spf] *WORD
word CropFromStringEnd |( a1 u1 a2 u2 -- a3 u3 ) Обрезать строку 1 начиная со строки 2 для первого совпадения с конца строки. [extwords.spf] *WORD
word -CSP |*WORD
word CSP@ |*WORD
word Ctrl |[sendinput.spf] *WORD
word Ctrl( |[sendinput.spf] *WORD
word CUR-DATE |( -- u ) Кладет на стек значение текущей даты в формате DATE. *WORD
word CUR-DATE-OLD |*WORD
word CURFILE |*WORD
word CUR-FLAG? |( mask -- ? ) *WORD
word CUR-FTIME |( -- d ) Current time as filetime format. [time.spf] *WORD
word CUR-NAME |*WORD
word CURSOR-MOVE |( x y -- ) Перемещает курсор в указанные координаты. [sendinput.spf] *WORD
word CURSOR-POS |( -- HWND n ) Определение положения курсора мыши. Кладёт на стек хэндл активного окна и число, соответствующее элементу окна или десктопа. [Extwords2.spf] *WORD
word CURSTR |*WORD
word CUR-TASK-NAME |( -- a u ) Получить имя задачи изнутри самой задачи. *WORD
word D. |*WORD
word D: |*WORD
word DATE- |( u1 u2 -- u ) Возвращает разницу в днях между двумя датами в формате DATE. *WORD
word DATE-INTERVAL |( first last period -- ? ) Возвращает флаг TRUE (-1), если текущая дата попадает в указанный интервал. *WORD
word DATE-INTERVAL: |< -- dd1.mm1.yyyy1-dd2.mm2.yyyy2[/days] > Возвращает флаг TRUE (-1), если текущая дата попадает в указанный интервал. *WORD
word DATE-VALUE |( -- addr len ) *WORD
word Day@ |( -- d ) Кладёт на стек текущее значение дня. *WORD
word DAY+ |( y m d days -- y1 m1 d1 ) "добавляет" или "отнимает" произвольное количество дней у даты, указанной в формате YMD. Результат в этом же формате, с учетом количества дней в месяце и количества месяцев в году. *WORD
word DAYS |( y m d -- days ) Кладет на стек количество дней, прошедших от начала летоисчисления по григорианскому календарю до указанной даты. В качестве аргумента принимает дату в формате YMD. *WORD
word Days: |< -- <dd> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word Days@ |( -- n ) Кладет на стек количество дней, прошедших от начала летоисчисления по григорианскому календарю до текущей даты. *WORD
word DBG( |*WORD
word DD |( -- a u ) День (01-31). *WORD
word debase64 |( addr u dest -- addr1 u1 ) *WORD
word -debug |*WORD
word DEBUGLOG |( a u -- ) Запись в файл log\\DEBUGLOG.txt [Extwords2.spf] *WORD
word DEBUGLOGList |( list -- ) Запись значений строкового списка в файл log\\DEBUGLOG.txt [Extwords2.spf] *WORD
word Decimal |[sendinput.spf] *WORD
word DecP |( a u -- a1 u1 ) *WORD
word DefaultDomain: |< -- "domain_name" > Параметр авторизации (домен) для запуска всех задач от имени конкретного пользователя. <Опция nncron.ini> *WORD
word DefaultLogonType: |< -- logon_type > Определяет тип логона по умолчанию. <Опция nncron.ini> *WORD
word DefaultOpenMode: |< -- mode > Задает режим по умолчанию, в котором nnCron будет запускать приложения. <Опция nncron.ini> *WORD
word DefaultPassword: |< -- "sec_password" > Параметр авторизации (пароль) для запуска всех задач от имени конкретного пользователя. <Опция nncron.ini> *WORD
word DefaultPriority: |< -- priority > Задает приоритет по умолчанию, с которым nnCron будет запускать приложения. <Опция nncron.ini> *WORD
word DefaultRunMissedTime: |< -- <hh:mm|days> > Управляет запуском "просроченных" задач: устанавливает максимальное время ожидания (в часах и минутах или в днях), которое может пройти с момента просроченного (запланированного) старта задачи. <Опция nncron.ini> *WORD
word DefaultUser: |< -- "username" > Параметр авторизации (логин) для запуска всех задач от имени конкретного пользователя. <Опция nncron.ini> *WORD
word DEF-CRONTAB-FILENAME |*WORD
word Delete |[sendinput.spf] *WORD
word DELETE |( p-obj -- ) Удаление динамического объекта. *WORD
word DELETE-FILE |( c-addr u -- ior ) Удаляет указанный файл. Возвращает код ошибки. *WORD
word DEL-HOST-ICONS |( -- ) Удаляет из системного трея все иконки доступности/недоступности сайтов, добавленные с помощью слова ADD-HOST. [win2tray.spf] *WORD
word DelNode |( value list -- ) Удалить элемент списка, который содержит указанное значение. *WORD
word DEL-TI |( id -- ) Удалить созданную предварительно иконку из системного трея. В качестве аргумента используется ID иконки, получаемый при ее создании. [win2tray.spf] *WORD
word DEL-TREE |( a u -- ior ) *WORD
word DEPTH |( -- u ) Возвращает глубину стека – количество чисел на нем до выполнения слова DEPTH. *WORD
word DESKTOP |( a u -- ) *WORD
word DESKTOP-HEIGHT |( -- u ) [Extwords2.spf] *WORD
word DESKTOP-WIDTH |( -- u ) [Extwords2.spf] *WORD
word DIAL |*WORD
word DIAL: |< -- "ras-entry" <кол-во попыток> <пауза в сек между попытками> > Инициирует дозвон, использующий указаное RAS-соедиение. *WORD
word DINVERT |( d -- d ) *WORD
word DIR-COPY |( a1 u1 a2 u2 -- ) Копирует директорию a1 u1 в a2 u2. Если имя конечной директории не совпадает с исходной, то в директории-приемнике будет создана директория с именем исходной. [Extwords2.spf] *WORD
word DIR-COPY: |< -- "source" "dest" > Копирует директорию a1 u1 в a2 u2. Если имя конечной директории не совпадает с исходной, то в директории-приемнике будет создана директория с именем исходной. [Extwords2.spf] *WORD
word DIR-CREATE |( a u -- ) Создает указанный каталог и все промежуточные подкаталоги, если это необходимо. *WORD
word DIR-CREATE: |< -- "path" > Создает указанный каталог и все промежуточные подкаталоги, если это необходимо. *WORD
word DIR-DEL-EMPTY |( a u -- ) Удаление пустых каталогов и подкаталогов из каталога a u. [Extwords2.spf] *WORD
word DIR-DEL-EMPTY: |< -- "path" > Удаление пустых каталогов и подкаталогов из каталога a u. [Extwords2.spf] *WORD
word DIR-DELETE |( a u -- ) Удаляет указанный каталог или дерево каталогов. *WORD
word DIR-DELETE: |< -- "path" > Удаляет указанный каталог или дерево каталогов. *WORD
word DIR-EMPTY: |< -- "path" > Возвращает TRUE если указанный каталог пуст и FALSE если в нем есть хоть один файл или подкаталог. *WORD
word DIR-EMPTY? |( S" path" -- ) Возвращает TRUE если указанный каталог пуст и FALSE если в нем есть хоть один файл или подкаталог. *WORD
word DIR-MOVE |( a1 u1 a2 u2 -- ) Перемещает директорию a1 u1 в a2 u2. Если имя конечной директории не совпадает с исходной, то в директории-приемнике будет создана директория с именем исходной. [Extwords2.spf] *WORD
word DIR-MOVE: |< -- "source" "dest" > Перемещает директорию a1 u1 в a2 u2. Если имя конечной директории не совпадает с исходной, то в директории-приемнике будет создана директория с именем исходной. [Extwords2.spf] *WORD
word DIR-SIZE |( a u -- D ) Возвращает суммарный размер файлов, хранящихся в каталоге (число двойной длины). *WORD
word DIR-SIZE: |< -- "path" > Возвращает суммарный размер файлов, хранящихся в каталоге (число двойной длины). *WORD
word DISABLE-CRON |( -- ) Переводит nnCron в режим остановки. *WORD
word DISABLE-CRON? |( -- ior ) Возвращает флаг TRUE (-1) если nnCron находится в режиме остановки и флаг FALSE (0), если nnCron находится в нормальном рабочем режиме. *WORD
word DISCONNECT-SESSION |( session-id srv_name -- ior ) Дисконектится от сессии номер session-id на сервере srv-name. [process_handling.spf] *WORD
word Divide |[sendinput.spf] *WORD
word DLCLICK |( -- ) Двойной клик левой кнопкой мыши. [sendinput.spf] *WORD
word DllGetVersion |( a u -- major minor build ) Кладет на стек три значения (major, minor and build), с помощью которых можно узнать полную версию указанной библиотеки (dll), если она поддерживает такую возможность. *WORD
word doCreateService |( addr u -- ) *WORD
word doDeleteService |( addr u -- ior ) *WORD
word DoList |( xt list -- ) Выполнить xt для каждого элемента. xt - это адрес слова, которое должно быть выполнено. *WORD
word DoListEXIT |*WORD
word Domain: |Домен пользователя при авторизации задачи. <Опция задачи> *WORD
word doStartService |( addr u -- flag ) *WORD
word DoStopService |( a u -- ) *WORD
word DOUBLE-CLICK? |( VK_Keycode -- 1|0 ) Флаг двойного нажатия кнопки. [Extwords2.spf] *WORD
word Down |[sendinput.spf] *WORD
word DOWNLOAD-NEW-BUILD |( -- ) [updates.spf] *WORD
word DRIVE-LETTER |( -- u ) Содержит букву подключенного/отключенного съемного диска. Заполняется после применения WatchDrive:/WatchDriveRemove:. *WORD
word DROP-EXC-HANDLER |*WORD
word DROP-RIGHT-DIR |( a u -- a u1 true | -- false ) *WORD
word DS* |*WORD
word DUMP |( adr len -- ) Displays len bytes of memory starting at adr. *WORD
word DXOR |( d d -- d ) *WORD
word edit-file |( a u -- ) *WORD
word Editor: |< -- "filename" > Определяет текстовой редактор, который будет запускаться при выборе пункта меню "Просмотреть лог-файл" и при нажатии кнопки nncron.ini в диалоговом окне "Параметры". <Опция nncron.ini> *WORD
word EMIT |( char -- ) Displays the character. *WORD
word EMPTY-TREE |*WORD
word ENABLE-CRON |( -- ) Восстанавливает нормальный режим работы nnCron. *WORD
word EncP |( a u -- a1 u1 ) *WORD
word END-MENU |*WORD
word END-POPUP |( c-addr u -- ) *WORD
word Enter |[sendinput.spf] *WORD
word ENV |( a u -- a1 u1 ) Получить значение переменной окружения. *WORD
word ERR |*WORD
word ERR>STR |( n -- a u ) Преобразование номера ошибки nnCron в строку сообщения "ERROR # ...". Требует наличия файла SPF.ERR. [Extwords2.spf] *WORD
word ERR-EXIT |*WORD
word ERR-MSG: |< -- "msg_text" > Отображает сообщение с иконкой "Ошибка". *WORD
word ErrMsgBox |( a u -- ) *WORD
word Esc |[sendinput.spf] *WORD
word esPICK |( n1 -- n2 ) %n esPICK% - вставка n-го числа со стека *WORD
word esPICKS |( n -- a u ) %n esPICKS% - вставка строки со стека, адрес которой хранится в n-й позиции стека, а счётчик в n-1 *WORD
word EVAL |( a u -- a1 u1 ) [strings.spf] *WORD
word eval-string, |*WORD
word EVAL-SUBST |( a u -- a1 u1 ) *WORD
word EVAL-SUBST/ie |( a u -- a1 u1 ) *WORD
word EVALUATE |*WORD
word evComputername |( a -- a1 ) Имя компьютера (используйте ASCIIZ>, чтобы получить au-строку) (значение из буфера FOUND-EVENT). *WORD
word EVENTLOG-AUDIT-FAILURE |( -- WatchEventLog: ) Отслеживать события Audit Failure (Модификатор WatchEventLog:). *WORD
word EVENTLOG-AUDIT-SUCCESS |( -- WatchEventLog: ) Отслеживать события Audit Success (Модификатор WatchEventLog:). *WORD
word EVENTLOG-ERROR-TYPE |( -- WatchEventLog: ) Отслеживать сообщения об ошибках (Модификатор WatchEventLog:). *WORD
word EVENTLOG-INFORMATION-TYPE |*WORD
word EVENTLOG-WARNING-TYPE |( -- WatchEventLog: ) Отслеживать предупреждения (Модификатор WatchEventLog:). *WORD
word EVLOG-CLOSE |( h -- ior ) *WORD
word EVLOG-NEWEST |( h -- n ior ) *WORD
word EVLOG-OLDEST |( h -- n ior ) *WORD
word EVLOG-OPEN |( a u -- h ior ) *WORD
word EVLOG-READ |( n h -- a ior ) *WORD
word evNString |( a # -- a1 ) Адрес # строки с описанием события. Нумерация строк начинается с 0. (Используйте ASCIIZ>, чтобы получить au-строку) (значение из буфера FOUND-EVENT). *WORD
word evSourceName |( a -- a1 ) Источник информации о событии (используйте ASCIIZ>, чтобы получить au-строку) (значение из буфера FOUND-EVENT). *WORD
word evStrings |( a -- a1 ) Строки с описанием события (используйте ASCIIZ>, чтобы получить au-строку) (значение из буфера FOUND-EVENT). *WORD
word evStrings2String |( a -- a1 u1 ) Объединяет все строки с описанием события, заменяет промежуточные нули пробелами и возвращает строку целиком (значение из буфера FOUND-EVENT). *WORD
word evUserSid |( a -- a1 u1 ) SID (значение из буфера FOUND-EVENT). *WORD
word EXACT |*WORD
word EXEC0-CRON-LOG |( a0 u0 fl -- ) Запись в лог и исполнение. Только для постфиксных слов, в действии нет аргументов. [Extwords2.spf] *WORD
word EXEC0-CRON-LOG: |< -- a0 u0 fl > Запись в лог и исполнение. Только для постфиксных слов, в действии нет аргументов. [Extwords2.spf] *WORD
word EXEC1-CRON-LOG |( a1 u1 a0 u0 fl -- ) Запись в лог и исполнение. Только для постфиксных слов. [Extwords2.spf] *WORD
word EXEC1-CRON-LOG: |< -- a1 u1 a0 u0 fl > Запись в лог и исполнение. Только для постфиксных слов. [Extwords2.spf] *WORD
word EXEC2-CRON-LOG |( a1 u1 a2 u2 a0 u0 fl -- ) Запись в лог и исполнение, только для постфиксных слов, первый аргумент - слово (WITHDIRS, RECURSIVE). [Extwords2.spf] *WORD
word EXEC2-CRON-LOG: |< -- a1 u1 a2 u2 a0 u0 fl > Запись в лог и исполнение, только для постфиксных слов, первый аргумент - слово (WITHDIRS, RECURSIVE). [Extwords2.spf] *WORD
word EXEC3-CRON-LOG |( a1 u1 a2 u2 a0 u0 fl -- ) Запись в лог и исполнение, только для постфиксных слов, в действии два аргумента. [Extwords2.spf] *WORD
word EXEC3-CRON-LOG: |< -- a1 u1 a2 u2 a0 u0 fl > Запись в лог и исполнение, только для постфиксных слов, в действии два аргумента. [Extwords2.spf] *WORD
word EXECUTE |( i*x xt -- j*x ) Выполнить определённое слово. *WORD
word EXIST: |< -- "file_pattern" > Возвращает флаг TRUE (-1), если указанный файл или каталог существует. *WORD
word EXIST? |( S" file_pattern" -- ior ) Возвращает флаг TRUE (-1), если указанный файл или каталог существует. *WORD
word ExplorerExist |( -- hwdn/0 ) *WORD
word FACCESSTIME |( -- D ) Возвращает время последнего доступа к файлув формате FILETIME (число двойной длины) (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FADATE |( S" filename" -- n ) Возвращает дату последнего доступа к файлу в формате DATE. *WORD
word FAPPEND |( S" text" S" filename" -- ) Дописывает новую информацию в конец файла. *WORD
word FARCHIVE? |( -- ? ) Возвращает TRUE, если найден файл или каталог с атрибутом archive (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FATIME |*WORD
word FCDATE |( S" filename" -- n ) Возвращает дату создания файла в формате DATE. *WORD
word F-CHECK |( a u -- ? ) Проверка существования файла. 0 - не существует. 1 - существует файл. -1 - существует директория. [Extwords2.spf] *WORD
word FCH-IS-FILE? |( a u -- ? ) [time.spf] *WORD
word FCH-NAME |( -- a u ) [time.spf] *WORD
word FCH-READ |[time.spf] *WORD
word FCH-TIME |[time.spf] *WORD
word FCH-WRITE |[time.spf] *WORD
word FCH-WRITELN |[time.spf] *WORD
word FCOPY |( S" from_filename" S" to_filename -- ) Копирует указанный файл. Перезаписывает файл в приемном каталоге. *WORD
word F-COPY |( a1 u1 a2 u2 dir? -- ) Копирует файл. dir? = FALSE - приёмник файл, = TRUE - приёмник директория. Приёмный каталог будет создан с промежуточными каталогами. [Extwords2.spf] *WORD
word F-COPY: |< -- "source" "target" dir? > Копирует файл. dir? = FALSE - приёмник файл, = TRUE - приёмник директория. Приёмный каталог будет создан с промежуточными каталогами. [Extwords2.spf] *WORD
word FCREATE |( S" filename" -- ) Создает новый пустой файл с указанным именем. Если это необходимо, создает все промежуточные подкаталоги. *WORD
word FCREATIONTIME |( -- D ) Возвращает время создания файла в формате FILETIME (число двойной длины) (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FCROPkb |( S" filename" <max_size> <size_after_crop> -- ) Удаляет начало указанного файла с таким расчетом, чтобы его размер был не больше значения аргумента size_after_crop. *WORD
word FCTIME |*WORD
word FDELETE |( S" filename" -- ) Удаляет указанный файл. Поддерживает работу с масками имен файлов. *WORD
word FDIR? |( -- ? ) Возвращает TRUE, если найден каталог (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FEX |FIND IF EXECUTE ELSE DROP *WORD
word FEXIST? |( a u -- ? ) Возвращает флаг TRUE (-1), если указанный файл или каталог существует. При использовании маски находит первый файл или каталог подпадающий под маску. После выполнения слова можно получить атрибуты. [Extwords2.spf] *WORD
word FEXIST?: |< -- "file_pattern" > Возвращает флаг TRUE (-1), если указанный файл или каталог существует. При использовании маски находит первый файл или каталог подпадающий под маску. После выполнения слова можно получить атрибуты. [Extwords2.spf] *WORD
word FF-ACCESS-TIME |( -- D ) *WORD
word FF-ATTRIB |*WORD
word FF-ATTRIB? |*WORD
word FF-BEG |( a u -- ? ) *WORD
word FF-CREATION-TIME |( -- D ) *WORD
word FF-SIZE |*WORD
word FF-WRITE-TIME |( -- D ) *WORD
word FHIDDEN? |( -- ? ) Возвращает TRUE, если найден файл/каталог с атрибутом hidden (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FILE |( addr u -- addr1 u1 ) Содержимое файла addr u. *WORD
word FILE: |< -- filename > Содержимое файла filename. *WORD
word FILE-ACCESS-DATE: |< -- "path" > Возвращает дату последнего доступа к файлу в формате DATE. *WORD
word FILE-APPEND: |< -- "filename" "text" > Дописывает новую информацию в конец файла. *WORD
word FILE-ATIME |( S" filename" -- ft ) Определяет время последнего доступа к файлу. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FILE-ATIME: |< -- "filename" > Определяет время последнего доступа к файлу. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FILE-ATTRIBUTES |( buf wa wu -- ? ) Return flag and fill buf with file attributes (see find.f). *WORD
word FILE-CHANGE |( S" file_mask" -- ior ) При первом использовании составляет список файлов, учитывая время последнего изменения, при последующих, сравнивает список с файлами и возвращает TRUE если один или несколько файлов изменились. [time.spf] *WORD
word FILE-CHANGE: |< -- "file_mask" > При первом использовании составляет список файлов, учитывая время последнего изменения, при последующих, сравнивает список с файлами и возвращает TRUE если один или несколько файлов изменились. [time.spf] *WORD
word FILE-COPY: |< -- "from_filename" "to_filename" > Копирует указанный файл. Перезаписывает файл в приемном каталоге. *WORD
word FILE-CREATE: |< -- "filename" > Создает новый пустой файл с указанным именем. Если это необходимо, создает все промежуточные подкаталоги. *WORD
word FILE-CREATION-DATE: |< -- "path" > Возвращает дату создания файла в формате DATE. *WORD
word FILE-CROP: |< -- "filename" <max_size> <size_after_crop> > Удаляет начало указанного файла с таким расчетом, чтобы его размер был не больше значения аргумента size_after_crop. *WORD
word FILE-DATE: |< -- "path" > Возвращает дату создания файла в формате DATE. *WORD
word FILE-DELETE: |< -- "filename" > Удаляет указанный файл. Поддерживает работу с масками имен файлов. *WORD
word FILE-EMPTY |( addr u -- ud ) Возвращает флаг TRUE (-1), если файл пуст или физически отсутствует. *WORD
word FILE-EMPTY: |< -- "file_pattern" > Возвращает флаг TRUE (-1), если файл пуст или физически отсутствует. *WORD
word FILE-EXIST |( a u -- ? ior ) Возвращает флаг TRUE (-1), если указанный файл или каталог существует. *WORD
word FILE-EXIST: |< -- "file_pattern" > Возвращает флаг TRUE (-1), если указанный файл или каталог существует. *WORD
word FILE-MD5 |( a u -- a1 u1 ) [extwords.spf] *WORD
word FILE-MOVE: |< -- "from_filename" "to_filename" > Перемещает указанный файл. *WORD
word FILENAME-FRACT |( a u -- path u1 name u2 ) *WORD
word FILE-POSITION |( field -- ud ior ) Возвращает текущую позицию указателя чтения/записи в файле, заданном идентификатором, и код результата операции. *WORD
word FILE-RENAME: |< -- "old_filename" "new_filename" > Переименовывает указанный файл. *WORD
word FILE-SIZE |( field -- ud ior ) Возвращает размер файла, заданного идентификатором, и код результата операции. *WORD
word FILE-SIZE: |< -- "file_pattern" > Возвращает размер указанного файла (число двойной длины). *WORD
word FILESONLY |( -- S" path\\mask" FOR-FILES )|< -- FOR-FILES: > Выполнять тело цикла только для файлов, не трогая каталоги. *WORD
word FILE-TIME |( S" filename" -- ft ) Определяет время создания файла. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FILE-TIME: |< -- "filename" > Определяет время создания файла. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FileVarPath! |( a u -- ) Задает путь к каталогу, где должны храниться файловые переменные. Обратный слеш (\\) в конце пути обязателен. *WORD
word FILE-WRITE: |< -- "filename" "text" > Записывает аргумент text в указанный файл. Старое содержимое файла при этом удаляется. *WORD
word FILE-WRITE-DATE: |< -- "path" > Возвращает дату записи в файл в формате DATE. *WORD
word FILE-WTIME |( S" filename" -- ft ) Определяет время последней записи в файл. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FILE-WTIME: |< -- "filename" > Определяет время последней записи в файл. Возвращает дату в формате FILETIME. [time.spf] *WORD
word FIND |( c-addr -- c-addr 0 | xt 1 | xt -1 ) Ищет слово в текущем словаре. *WORD
word FMOVE |( S" from_filename" S" to_filename" -- ) Перемещает указанный файл. *WORD
word F-MOVE |( a1 u1 a2 u2 dir? -- ) Перемещает файл. dir? = FALSE - приёмник файл, = TRUE - приёмник директория. Приёмный каталог будет создан с промежуточными каталогами. [Extwords2.spf] *WORD
word F-MOVE: |< -- "source" "target" dir? > Перемещает файл. dir? = FALSE - приёмник файл, = TRUE - приёмник директория. Приёмный каталог будет создан с промежуточными каталогами. [Extwords2.spf] *WORD
word FNAME |( -- a u ) Возвращает имя найденного файла с расширением (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FOLDER-APP-DATA |( -- a u ) Application data folder. *WORD
word FOLDER-COMMON-DESKTOP |( -- a u ) Папка общий для всех пользователей рабочего стола. *WORD
word FOLDER-COMMON-PROGRAMS |( -- a u ) Папка общего меню "Программы". *WORD
word FOLDER-COMMON-STARTMENU |( -- a u ) Папка Общее меню "Пуск". *WORD
word FOLDER-DESKTOP |( -- a u ) Папка Рабочий стол. *WORD
word FOLDER-FAVOURITES |( -- a u ) Папка Избранное. *WORD
word FOLDER-PERSONAL |( -- a u ) Личная папка. *WORD
word FOLDER-PROGRAMS |( -- a u ) Папка меню "Программы". *WORD
word FOLDER-RECENT |( -- a u ) Папка "Документы" (те что в меню "Пуск"). *WORD
word FOLDER-SENDTO |( -- a u ) Папка Меню "Отправить". *WORD
word FOLDER-STARTMENU |( -- a u ) Папка меню "Пуск". *WORD
word FOLDER-STARTUP |( -- a u ) Папка меню "Автозагрузка". *WORD
word FOLDER-SYSTEM |( -- a u ) Системная папка. *WORD
word FOLDER-TEMP |( -- a u ) Папка для временных файлов. *WORD
word FOLDER-TEMPLATES |( -- a u ) Папка образцов документов. *WORD
word FOLDER-WINDOWS |( -- a u ) Папка Windows. *WORD
word FORCE-LOGOFF |( -- ) Завершает сеанс текущего пользователя, игнорирует системные запросы о сохранении изменений и выгружает операционную систему принудительно. *WORD
word FORCE-POWEROFF |( -- ) Завершает работу операционной системы и выключает питание компьютера, игнорирует системные запросы о сохранении изменений и выгружает операционную систему принудительно. *WORD
word FORCE-REBOOT |( -- ) Перезагружает систему, игнорирует системные запросы о сохранении изменений и выгружает операционную систему принудительно. *WORD
word FORCE-SHUTDOWN |( -- ) Завершает работу операционной системы до появления на экране надписи "Теперь питание компьютера можно отключить", игнорирует запросы о сохранении изменений и выгружает операционную систему принудительно. *WORD
word FOR-LIST |( list xt -- ) Для каждого узла списка list выполнить xt. [lists.spf] *WORD
word FORTH-WORDLIST |*WORD
word FOUND-CHILD-WINDOW |( -- a u ) Заголовок найденного дочернего окна (в цикле FOR-CHILD-WINDOWS: ... ;FOR-CHILD-WINDOWS). *WORD
word FOUND-EVENT |( -- a ) Адрес буфера события, содержащего информацию о произошедшем событии (в бинарном виде) в цикле FOR-NEW-EVENTS ... ;FOR-NEW-EVENTS *WORD
word FOUND-FILENAME |( -- a u ) Имя файла, подпавшего под маску (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word FOUND-FULLPATH |( -- a u ) Полное имя файла, подпавшего под маску (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word FOUND-LEVEL |*WORD
word FOUND-LINE |( -- a u ) Найденная строка в цикле READ-BY-LINE. [string_manipulation.spf] *WORD
word FOUND-PID |( -- n ) PID найденного процесса (в цикле FOR-PROCS: ... ;FOR-PROCS). *WORD
word FOUND-PROC |( -- a u ) Имя найденного процесса (в цикле FOR-PROCS: ... ;FOR-PROCS). *WORD
word FOUND-RELPATH |( -- a u ) Полное имя файла, подпавшего под маску, относительно каталога поиска (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word FOUND-SIZE |( -- d ) *WORD
word FOUND-WINDOW |( -- a u ) Заголовок найденного окна после выполнения большинства "оконных" команд. *WORD
word FRA? |( -- ior ) Checking if French (France) keyboard layout is active. [kbd_layout.spf] *WORD
word FREAD |( a u a-filename u-filename -- a u1 ) *WORD
word FREADONLY? |( -- ? ) Возвращает TRUE, если найден файл/каталог с атрибутом read-only (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FREE-<CLIPBOARD> |*WORD
word FREE-CB-MUTEX |*WORD
word FreeList |( list -- ) Очистить список. *WORD
word FreePairList |( list -- ) *WORD
word FREE-SID |( sid -- ) *WORD
word FREE-SPACE |( [CHAR]|%CHAR drive_letter -- u ) Возвращает количество свободного места (в килобайтах) на указанном диске. *WORD
word FREE-SPACE: |< -- drv_letter > Возвращает количество свободного места (в килобайтах) на указанном диске. *WORD
word FRENAME |( S" old_filename" S" new_filename" -- ) Переименовывает указанный файл. *WORD
word FROM |( name -- xt ) Получить значение вектора. [extwords.spf] *WORD
word FromPixels |( x y -- x2 y2 ) *WORD
word FS! |*WORD
word FS@ |*WORD
word FSIZE |( S" filename" -- D ) Возвращает размер указанного файла (число двойной длины). *WORD
word FSIZE2 |( -- D ) Возвращает размер файла в байтах (число двойной длины) (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FSYSTEM? |( -- ? ) Возвращает TRUE, если найден файл/каталог с атрибутом system (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FT- |( d d -- n ) Возвращает разницу между двумя датами в формате FILETIME. *WORD
word FTIME- |( d1 d2 -- sec ) Для сравнения времени создания (последнего доступа, последней записи) двух файлов, а также с текущим временем. Возвращает разницу в секундах. [time.spf] *WORD
word fVAR-FILENAME |( a -- a1 u1 ) *WORD
word fVAR-PATH@ |*WORD
word FWDATE |( S" filename" -- n ) Возвращает дату записи в файл в формате DATE. *WORD
word FWRITE |( S" text" S" filename" -- ) Записывает аргумент text в указанный файл. Старое содержимое файла при этом удаляется. *WORD
word FWRITETIME |( -- D ) Возвращает время последней записи в файл в формате FILETIME (число двойной длины) (после выполнения слова FEXIST?). [Extwords2.spf] *WORD
word FWTIME |*WORD
word Gb |( u -- u1 ) Множитель. [extwords.spf] *WORD
word GBL-LINE |( -- a u ) Найденная строка полностью в цикле GET-BY-LINE. [Extwords2.spf] *WORD
word GBL-NAME |( -- a u ) Имя параметра в цикле GET-BY-LINE. [Extwords2.spf] *WORD
word GBL-VALUE |( -- a u ) Значение параметра в цикле GET-BY-LINE. [Extwords2.spf] *WORD
word GET |( a -- ) Захват семафора для предотвращения одновременного выполнения двух и более экземпляров одной задачи. *WORD
word Get.Host.Name |( addr u -- addr u ior ) *WORD
word GetAliasAdministratorsSID |*WORD
word GetAuthenticatedUsersSID |*WORD
word GetBatchSID |*WORD
word get-boolean |*WORD
word GET-CB-MUTEX |*WORD
word GET-CHAR |( a1 u1 -- a2 u2 c ) *WORD
word GetCpuUsage |( -- n ) *WORD
word GET-CURRENT |( -- wid ) Оставляет на стеке wid текущего компилируемого словаря. *WORD
word GET-CUR-TIME |( -- ) Принудительно "обновляет" значение текущего времени. *WORD
word GetDesktopSize |( -- x y ) Получить размер десктопа. *WORD
word get-double |*WORD
word GetDriveType |( a u -- i ) Возвращает цифру, обозначающую тип диска. Аргумент: буква диска+двоеточие+обратный слеш. [Extwords2.spf] *WORD
word GetEveryoneSID |*WORD
word GET-FILE-COUNT |( a u -- ) Counting the number of the files. [files_pick.spf] *WORD
word GetFileSA |( a u -- sa ) *WORD
word GetFileSD |( a u -- sd ) *WORD
word GET-FULL-PATH |( where addr u -- where u1 ) *WORD
word GetHostIP |( addr u -- IP ior ) *WORD
word GetHostName |( IP -- addr u ior ) *WORD
word GetInteractiveSID |*WORD
word GetLastError |( -- u ) Возвращает номер ошибки только что отработавшей команды, если в процессе ее работы произошел сбой и 0 если ошибки не произошло. *WORD
word GetLocalSID |*WORD
word GetLocalSystemSID |*WORD
word get-number |*WORD
word GET-ORDER |( -- widn ... wid1 n ) Возвращает количество списков слов в порядке поиска - n и идентификаторы widn ... Wid1 *WORD
word GetPeerIP |( s -- IP ior ) *WORD
word GetPeerIP&Port |( s -- IP port ior ) *WORD
word GetPeerName |( s -- addr u ior ) *WORD
word GET-PROC-TOKEN |( pid -- htoken ) *WORD
word GET-PROC-WINDOWS |( list pid -- ) [procwin.spf] *WORD
word GetProp |*WORD
word GetPropS |( a1 u1 l -- a2 u2 ) *WORD
word GetPropZ |( azprop azlist -- value ) *WORD
word get-qstring |( ch -- a u ) *WORD
word GET-RANDOM-FILE |( a u -- a u ) Selects the random file from the specified folder. [files_pick.spf] *WORD
word GET-REG |( buf a u -- ) Получает и записывает указанное значение из реестра в созданный пользователем буфер. *WORD
word GET-REG: |< -- <buffer> -- "registry_path" > Получает и записывает указанное значение из реестра в созданный пользователем буфер. *WORD
word GetServiceSID |*WORD
word get-string |( -- a u ) *WORD
word GET-SUBST |( a0 u0 a1 u1 a2 u2 -- a3 u3 | a0 u0 ) Получить подстроку a3 u3 из строки a0 u0, ограниченную a1 u1 и a2 u2. Если подстрока не найдена - вернуть пустую строку. [extwords.spf] *WORD
word GET-SUBST-ANY |( a0 u0 a1 u1 a2 u2 -- a3 u3 | a0 u0 ) Получить подстроку a3 u3 из строки a0 u0, ограниченную a1 u1 и a2 u2 или a2 u2 и a1 u1 - порядок строк-ограничителей не важен. Если подстрока не найдена - вернуть пустую строку. [extwords.spf] *WORD
word GetTrayToken |( -- h ior ) *WORD
word GetUserObjectDacl |( h cbExtra -- *ACL ) *WORD
word GetUserToken |( -- h ior ) *WORD
word GET-VER |( -- minor major platform ) Кладет на стек три значения, с помощью которых можно узнать полную версию установленной на компьютере операционной системы. *WORD
word GET-WTEXT |( hwnd -- a u ) Получить текст окна по его хэндлу. Работает и для дочерних окон. Максимальный размер текста - 256 байт. [extwords.spf] *WORD
word GUIDomain: |< -- "domain_name" > Параметр авторизации (домен) для запуска GUI nnCron от имени конкретного пользователя. <Опция nncron.ini> *WORD
word GUIPassword: |< -- "sec_password" > Параметр авторизации (пароль) для запуска GUI nnCron от имени конкретного пользователя. <Опция nncron.ini> *WORD
word GUIUser: |< -- "username" > Параметр авторизации (логин) для запуска GUI nnCron от имени конкретного пользователя. <Опция nncron.ini> *WORD
word HALT |*WORD
word HANGUP |( -- ) Прерывает любое RAS-соединение. *WORD
word HANGUP: |< -- "ras-entry" > Прерывает указанное RAS-соединение. *WORD
word HelpFile: |< -- "filename" > Определяет файл помощи, который будет открываться при "клике" мышью на пункте меню "Помощь". <Опция nncron.ini> *WORD
word HEX-LITERAL |*WORD
word HEX-SLITERAL |*WORD
word hh |( -- u ) Текущий час (00-23). *WORD
word -hi |*WORD
word HIDE |( -- ) Makes the most recent word invisible. *WORD
word HighPriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word HINT |( S" hint_text" -- ) Отображает небольшую подсказку и продолжает выполнение задачи вне зависимости от реакции пользователя. *WORD
word HINT: |< -- "hint_text" > Отображает небольшую подсказку и продолжает выполнение задачи вне зависимости от реакции пользователя. *WORD
word HINT2 |( S" hint_text" -- ) Отображает небольшую подсказку и продолжает выполнение задачи вне зависимости от реакции пользователя. [hint-ext.spf] *WORD
word HINT2: |< -- "hint_text" > Отображает небольшую подсказку и продолжает выполнение задачи вне зависимости от реакции пользователя. [hint-ext.spf] *WORD
word HINT-COLOR |( <bgcolor> <fgcolor> -- ) Задаёт цвет фона и текста окна подсказки HINT. *WORD
word HINT-FONT |( S" font name" <font-size> -- ) Задаёт гарнитуру шрифта и его размер в окне подсказки HINT. *WORD
word HINT-OFF |( -- ) "Программно" закрывает подсказку. *WORD
word HINT-POS |( x y -- ) Задаёт положение окна подсказки HINT. *WORD
word HINT-POS: |< -- x y > Задаёт положение окна подсказки HINT. *WORD
word HINT-SIZE |( w h -- ) Задаёт размеры окна подсказки HINT. *WORD
word HINT-SIZE: |< -- w h > Задаёт размеры окна подсказки HINT. *WORD
word HINTW |( S" hint_text" -- ) Отображает небольшую подсказку и приостанавливает выполнение задачи, пока подсказка не будет закрыта. *WORD
word HINTW: |< -- "hint_text" > Отображает небольшую подсказку и приостанавливает выполнение задачи, пока подсказка не будет закрыта. *WORD
word HINTW2 |( S" hint_text" -- ) Отображает небольшую подсказку и приостанавливает выполнение задачи, пока подсказка не будет закрыта. [hint-ext.spf] *WORD
word HINTW2: |< -- "hint_text" > Отображает небольшую подсказку и приостанавливает выполнение задачи, пока подсказка не будет закрыта. [hint-ext.spf] *WORD
word HIWORD |( xxyy -- xx ) *WORD
word HKCU-VALUE |( address S" value" S" path" -- ) *WORD
word HKEY-USER-SID |( a1 u1 -- a2 u2 ) Формирует из имени пользователя ключ реестра "HKEY_USERS\\SID_пользователя" и помещает на стек. [Extwords2.spf] *WORD
word HKEY-USER-SID: |< -- a1 u1 -- a2 u2 > Формирует из имени пользователя ключ реестра "HKEY_USERS\\SID_пользователя" и помещает на стек. [Extwords2.spf] *WORD
word HKLM-VALUE |( address S" value" S" path" -- ) *WORD
word HOLD |Вставляет в текущую позицию любой символ, значение которого (в коде ASCII) находится в стеке. *WORD
word HOLDS |( A # -- ) *WORD
word Home |[sendinput.spf] *WORD
word HOST-EXIST: |< -- "hostname_or_ip_address" > Возвращает флаг TRUE (-1), если указанный сервер доступен (пингуется). Количество попыток - 3. *WORD
word HOST-STATE |( a u -- ) [win2tray.spf] *WORD
word HOST-STATE: |< -- a u > [win2tray.spf] *WORD
word Hour@ |( -- h ) Кладёт на стек текущее значение часа. *WORD
word Hours: |< -- <hh> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word HTTP-CHANGED |( a u -- ? ) Проверяет, не изменился ли ресурс по указанному URL с момента последнего запуска HTTP-CHANGED. [http.spf] *WORD
word HTTP-CHANGED: |< -- a u > Проверяет, не изменился ли ресурс по указанному URL с момента последнего запуска HTTP-CHANGED. [http.spf] *WORD
word HTTP-FIELD |( a u a1 u1 -- a u ior ) Возвращает код возможной ошибки и строку с содержимым заголовка a1 u1, полученную от удаленного http-сервера. [http.spf] *WORD
word HTTP-FIELD: |< -- a u a1 u1 > Возвращает код возможной ошибки и строку с содержимым заголовка a1 u1, полученную от удаленного http-сервера. [http.spf] *WORD
word HTTP-GET |( a u -- a u ior ) Возвращает код возможной ошибки и строку с содержимым удаленного ресурса. [http.spf] *WORD
word HTTP-GET: |< -- a u > Возвращает код возможной ошибки и строку с содержимым удаленного ресурса. [http.spf] *WORD
word HTTP-LM |( a u -- a u ior ) Возвращает код возможной ошибки и строку с содержимым заголовка Last-Modified, полученную от удаленного http-сервера, т. е. время последнего изменения удаленного ресурса. [http.spf] *WORD
word HTTP-LM: |< -- a u > Возвращает код возможной ошибки и строку с содержимым заголовка Last-Modified, полученную от удаленного http-сервера, т. е. время последнего изменения удаленного ресурса. [http.spf] *WORD
word HTTPProxy: |< -- "proxy.provider.ru" > Задает прокси-сервер для использования со словами, определенными в плагине http.spf. [http.spf] *WORD
word HTTPProxy-Authorization: |< -- user:password > Задает логин и пароль для авторизации на прокси-сервере для использования со словами, определенными в плагине http.spf. [http.spf] *WORD
word HTTPProxyPort: |< -- u > Задает номер порта прокси-сервера для использования со словами, определенными в плагине http.spf. [http.spf] *WORD
word HyperActive |( -- ) Предписывает задаче выполняться не только в нормальном режиме, но и в режиме остановки. <Опция задачи> *WORD
word IDLE |( s -- ? ) Возвращает флаг TRUE (-1), если время бездействия компьютера больше или равно указанного числа секунд. *WORD
word IDLE: |< -- seconds > Возвращает флаг TRUE (-1), если время бездействия компьютера больше или равно указанного числа секунд. *WORD
word IdlePriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word INCLUDE |< -- "filename" > "Подключает" указанные плагины. <Опция nncron.ini> *WORD
word INCLUDED |( a u -- … ) Загружает (интерпретирует) файл, заданный адресом первого байта имени и длиной имени. Побочные стековые эффекты зависят от содержимого интерпретируемого файла. *WORD
word INCLUDE-FILE |( field -- … ) Загружает (интерпретирует) файл, заданный идентификатором. Побочные стековые эффекты зависят от содержимого интерпретируемого файла. *WORD
word InDict? |( a -- ? ) *WORD
word -ini |*WORD
word -ini? |*WORD
word INIT-STRUCT |( u -- addr ) *WORD
word InList? |( value list -- node|0 ) Проверить, хранится ли указанное значение в списке. Возвращает адрес элемента, в котором хранится значение или 0, если значение не обнаружено. *WORD
word INP |*WORD
word Insert |[sendinput.spf] *WORD
word -install |*WORD
word -install95 |*WORD
word Interactive? |*WORD
word INTERCEPT-SHUTDOWN |( -- ) Прерывает начинающийся процесс выключения компьютера, который был "перехвачен" с помощью слова WatchQueryShutdown. *WORD
word INTERVAL |( first-time-in-min last-time-in-min period-in-min -- ? ) Возвращает флаг TRUE (-1), если текущее время попадает в указанный интервал. *WORD
word INTERVAL: |< -- hh1:mm1-hh2:mm2[/hh3:mm3] > Возвращает флаг TRUE (-1), если текущее время попадает в указанный интервал. *WORD
word IN-TRAY? |( hwnd -- ? ) Позволяет узнать - свернуто ли указанное окно в системный трей. [win2tray.spf] *WORD
word IS-/OR\? |( c -- ? ) *WORD
word is\? |( -- ? ) *WORD
word IS-ARCHIVE? |( -- ior ) Возвращает TRUE, если найден файл/каталог с атрибутом archive (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word IS-CD-PRESENT |( CHAR|[CHAR] <drive_letter> -- ior ) В периоде исполнения|компиляции возвращает флаг TRUE (-1) если в указанном CD-ROM драйве находится диск и флаг FALSE (0), если указанный CD-ROM драйв пуст. *WORD
word IS-CD-PRESENT: |< -- drv_letter > Возвращает флаг TRUE (-1) если в указанном CD-ROM драйве находится диск и флаг FALSE (0), если указанный CD-ROM драйв пуст. *WORD
word IsDelimiter |*WORD
word IS-DIR? |( -- ior ) Возвращает TRUE, если найден каталог (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word ISEARCH |( a1 u1 a2 u2 - a3 u3 ? ) Производит поиск в строке без учёта регистра. *WORD
word IS-HIDDEN? |( -- ior ) Возвращает TRUE, если найден файл/каталог с атрибутом hidden (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word isliteral |( a u -- | a1 u1 ) Создать строковый a u литерал. Только для режима компиляции. Слово немедленнного исполнения. [strings.spf] *WORD
word isLocalHost? |*WORD
word IS-READONLY? |( -- ior ) Возвращает TRUE, если найден файл/каталог с атрибутом read-only (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word IS-SYSTEM? |( -- ior ) Возвращает TRUE, если найден файл/каталог с атрибутом system (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word IS-TEMP-WL |*WORD
word IsWorkstationLocked? |( -- ior ) [lock_workstation.spf] *WORD
word izliteral |( a u -- az ) Создать строковоый az литерал. Только для режима компиляции. Слово немедленного исполнения. [strings.spf] *WORD
word JMP |( addr-to addr-from -- ) *WORD
word js-exec |( a u -- ) *WORD
word k* |( n -- n' ) Умножение на 1024. *WORD
word Kb |( u -- u1 ) Множитель. [extwords.spf] *WORD
word KEY |( -- char ) Возвращает на стеке код нажатой клавиши. *WORD
word KEY? |*WORD
word KEY-PRESSED? |( VK -- ior ) Finding out whether the specified key on keyboard is currently pressed down or not. [keystate.spf] *WORD
word KEY-TOGGLED? |( VK -- ior ) Determines the toggle status of 'Caps Lock', 'Scroll Lock' and 'Num Lock' buttons. [keystate.spf] *WORD
word KF1 |[sendinput.spf] *WORD
word KF10 |[sendinput.spf] *WORD
word KF11 |[sendinput.spf] *WORD
word KF12 |[sendinput.spf] *WORD
word KF13 |[sendinput.spf] *WORD
word KF14 |[sendinput.spf] *WORD
word KF15 |[sendinput.spf] *WORD
word KF16 |[sendinput.spf] *WORD
word KF2 |[sendinput.spf] *WORD
word KF3 |[sendinput.spf] *WORD
word KF4 |[sendinput.spf] *WORD
word KF5 |[sendinput.spf] *WORD
word KF6 |[sendinput.spf] *WORD
word KF7 |[sendinput.spf] *WORD
word KF8 |[sendinput.spf] *WORD
word KF9 |[sendinput.spf] *WORD
word KILL |( S" proc_pattern" -- ) Прерывает работу указанного процесса. *WORD
word kill |( pid -- ) Прерывает процесс по его PID, принимает число в качестве аргумента. *WORD
word KILL: |< -- "proc_pattern" > Прерывает работу указанного процесса. *WORD
word Language: |< -- language_name > Определяет язык графического интерфейса nnCron. Файлы с языковыми ресурсами nnCron располагаются в подкаталоге res. <Опция nncron.ini> *WORD
word LAST |( -- adr ) USER variable containing the name field address of the last word created. *WORD
word LAST-CONNECTION |( -- a u ) Имя последнего RAS соединения (например, для WatchDisconnect). *WORD
word LAUNCH |( task -- ) Запуска одной задачи из тела другой отдельном потоком с авторизацией и проверкой условий запуска за исключением условий времени. *WORD
word Launch_app1 |[sendinput.spf] *WORD
word Launch_app2 |[sendinput.spf] *WORD
word Launch_mail |[sendinput.spf] *WORD
word Launch_media_select |[sendinput.spf] *WORD
word LAUNCH-TIME |( -- d t= | -- f= ) Time of last launch in FILETIME. *WORD
word LAYOUT-BACKWARD |( -- ) Переключить на предыдущую в системе раскладку. [Extwords2.spf] *WORD
word LAYOUT-FORWARD |( -- ) Переключить на следующую в системе раскладку. [Extwords2.spf] *WORD
word LAYOUT-ON-CAPSLOCK |( -- ) Запуск задачи переключения раскладки по клавише "Caps Lock". [Extwords2.spf] *WORD
word LBDN |( -- ) Нажимает левую кнопку мыши. [sendinput.spf] *WORD
word LBUP |( -- ) Отпускает левую кнопку мыши. [sendinput.spf] *WORD
word LCLICK |( -- ) Клик левой кнопкой мыши. [sendinput.spf] *WORD
word LedInvert |( led --  ) Инвертировать состояние индикатора клавиатуры. [keyboard_led.spf] *WORD
word LedOff |( led --  ) Выключить индикатор клавиатуры. [keyboard_led.spf] *WORD
word LedOn |( led --  ) Включить индикатор клавиатуры. [keyboard_led.spf] *WORD
word LedOn? |( led --  ? ) Вернуть состояние индикатора клавиатуры. [keyboard_led.spf] *WORD
word Left |[sendinput.spf] *WORD
word LeftAlt |[sendinput.spf] *WORD
word LeftAlt( |[sendinput.spf] *WORD
word LeftCtrl |[sendinput.spf] *WORD
word LeftCtrl( |[sendinput.spf] *WORD
word LeftShift |[sendinput.spf] *WORD
word LeftShift( |[sendinput.spf] *WORD
word LIST-- |( list -- ) Инициализировать пошаговый цикл списка list первым узлом. [lists.spf] *WORD
word LIST! |( value list -- ) Добавить в конец списка значение value. [lists.spf] *WORD
word LIST# |( list -- i ) Посчитать число узлов в списке list. [lists.spf] *WORD
word LIST#! |( val_1 ... val_n n list -- ) Добавить поочередно n значений со стека в конец списка list. Значения добавляются начиная с вершины стека в конец списка в порядке очереди. [lists.spf] *WORD
word LIST#@ |( i list -- value ) Получить значение узла списка list. [lists.spf] *WORD
word LIST#> |( i list -- node ) Получить узел node списка list под номером i. [lists.spf] *WORD
word LIST? |( value list -- node|0 ) Проверить, хранится ли указанное значение в списке. Возвращает адрес узла, в котором хранится значение или 0, если значение не обнаружено. [lists.spf] *WORD
word LIST@ |( list -- nodevalue|0 ) Получить текущее значение пошагового цикла списка. [lists.spf] *WORD
word LIST@> |( list -- nodevalue ) Получить текущее значение пошагового цикла и перейти к следующему узлу списка. Синоним фразы list LIST@ list LIST@>. [lists.spf] *WORD
word LIST[ |( list -- list-handle list-pos ) Начать добавление значений в список. [lists.spf] *WORD
word LIST> |( list -- ) В пошаговом цикле перейти к следующему узлу списка. После последнего элемента будет ноль, затем снова первый узел. [lists.spf] *WORD
word LIST-DEL |( list -- ) Уничтожить список и все его содержимое. [lists.spf] *WORD
word LIST-FREE |( list -- ) Полностью очистить список. [lists.spf] *WORD
word LIST-MEDIAN |( list -- median ) Вычислить медиану списка list. Медина - число, которое разделяет упорядоченный список чисел ровно в середине. Либо среднее арифметическое двух чисел в середине для списка из четного числа элементов. [lists.spf] *WORD
word LIST-RSORT |( list -- ) Сортировка списка list от большего к меньшему по методу быстрой сортировки. [lists.spf] *WORD
word LIST-SORT |( list -- ) Сортировка списка list от меньшего к большему по методу быстрой сортировки. [lists.spf] *WORD
word LIT |*WORD
word LIT, |*WORD
word LoadIcon |( addr u -- h ) *WORD
word LoadIconResource16 |( id -- h ) id - идентификатор ресурса GROUP_ICON, а не ICON *WORD
word LoadIconResource32 |( id -- h ) id - идентификатор ресурса GROUP_ICON *WORD
word LoadOrGetLibrary |( a u -- h ) *WORD
word LoadProfile |( -- ) Предписывает загружать пользовательский профиль вместе с запускаемыми процессами (START-APP:, START-APPW:). <Опция задачи> *WORD
word LoadUserProfile |( load_profile? htok -- ) *WORD
word LOG |( S" message" S" filename" -- ) Добавляет message в лог-файл filename. *WORD
word LOG: |< -- "filename" "message" > Добавляет message в лог-файл filename. *WORD
word LOG-CR |*WORD
word LOGGEDON? |( -- ior ) Возвращает флаг TRUE (-1), если осуществлен локальный логон. *WORD
word LOGGEDON-ADMIN? |( -- ? ) *WORD
word LOGGEDUSERCOUNT |( -- count ) Содержит количество "залогинившихся" пользователей. [net.spf] *WORD
word LOGOFF |( -- ) Завершает сеанс текущего пользователя. *WORD
word LOGOFF-SESSION |( session-id srv_name -- ior ) Закрыть сессию номер session-id на сервере srv-name. [process_handling.spf] *WORD
word LOGON |( S" User" S" Password" -- ) *WORD
word LOGON: |< -- "User" "Password" > *WORD
word LogonBatch |Вид логона. Необязательный пункт авторизации. *WORD
word LogonInteractive |Вид логона. Необязательный пункт авторизации. *WORD
word LogonNetwork |Вид логона. Необязательный пункт авторизации. *WORD
word LogonService |Вид логона. Необязательный пункт авторизации. *WORD
word LogTimeFormat: |< -- "time_format" > Определяет формат выведения информации в лог-файл. <Опция nncron.ini> *WORD
word LOWER |( a u -- ) Converts uppercase ASCII characters in a buffer to lowercase characters. *WORD
word LOWER-CHAR |( c1 -- c2 ) Converts a ASCII character string or a single character to lowercase. *WORD
word LOWORD |( xxyy -- yy ) The low half of the value. *WORD
word MAKE-BAK |( S" file_name" -- ior ) *WORD
word MAKE-BAK-PATH |( S" file_name" -- pad u ) *WORD
word MAKE-DIR |( a u -- ior ) *WORD
word MAKE-DIRS |( a u -- ior ) *WORD
word MAKE-FILE |( a u mode -- handle ior ) *WORD
word MaxClipboardSize: |< -- <size_in_bytes> > Ограничивает доступный для nnCron размер буфера обмена Windows. По умолчанию равно 10KB (10240B). <Опция nncron.ini> *WORD
word Mb |( u -- u1 ) Множитель. [extwords.spf] *WORD
word MBCLICK |( -- ) Клик средней кнопкой мыши. [sendinput.spf] *WORD
word MBDN |( -- ) Нажимает среднюю кнопку мыши. [sendinput.spf] *WORD
word MBUP |( -- ) Отпускает среднюю кнопку мыши. [sendinput.spf] *WORD
word Media_next_track |[sendinput.spf] *WORD
word Media_play_pause |[sendinput.spf] *WORD
word Media_prev_track |[sendinput.spf] *WORD
word Media_stop |[sendinput.spf] *WORD
word menu |( -- ) Показать всплывающее меню nnCron. *WORD
word MENU |( -- ) *WORD
word MenuHotKey: |< -- "hotkey" > Определяет клавиатурное сокращение, которое будет вызывать всплывающее меню nnCron. <Опция nncron.ini> *WORD
word MENUITEM |( c-addr u id -- ) *WORD
word MENUSEPARATOR |*WORD
word MessageBox |( flags S" Message" -- result ) *WORD
word MessageLoop |( wnd -- ) Обработка сообщений, поступающих в очередь окна. *WORD
word Min@ |( -- m ) Кладёт на стек текущее значение минуты. *WORD
word MINIMIZED? |( hwnd -- ? ) Возвращает TRUE только если указанное окно сейчас минимизировано. [windows.spf] *WORD
word MINUTE+ |( Y M D h m mins -- Y1 M1 D1 h1 m1 ) *WORD
word Minutes: |< -- <mm> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word MIXER+ |( % -- ) Увеличивает или уменьшает громкость звука (апплет Volume Control) на заданное количество процентов. *WORD
word MIXER-DOWN |( % -- ) Уменьшение громкости звука (апплет Volume Control) на указанное количество процентов. *WORD
word MIXER-MUTE |( -- ) Отключение звука (апплет Volume Control). *WORD
word MIXER-OFF |*WORD
word MIXER-ON |*WORD
word MIXER-STATE |( -- ? ) Возвращает флаг TRUE (-1) если звук сейчас включен и флаг FALSE (0) если звук выключен. *WORD
word MIXER-UNMUTE |( -- ) Включение звука (апплет Volume Control). *WORD
word MIXER-UP |( % -- ) Увеличение громкости звука (апплет Volume Control) на указанное количество процентов. *WORD
word MIXER-VOLUME |( -- vol ) *WORD
word MIXER-VOLUME! |( % -- ) Устанавливает громкость (апплет Volume Control) соответственно полученному аргументу (в процентах). *WORD
word MIXER-VOLUME@ |( -- % ) Текущее значение громкости. *WORD
word mm |( -- a u ) Текущая минута (00-59). *WORD
word MM |( -- a u ) Месяц (01-12). *WORD
word MMM |( -- a u ) Месяц (Jan-Dec). *WORD
word MODIFY-TI |( a u hicon id -- ) Изменение уже существующей иконки в системном трее или для смены текстовой строки, которая появляется при наведении курсора мыши на эту иконку. [win2tray.spf] *WORD
word ModuleDirName |( -- a u ) Полный путь к каталогу, в который установлен nnCron (на конце - слэш). *WORD
word ModuleUpDirName |( -- a u ) Имя директории, в которой находится директория "nnCron" (на конце - слэш). [Extwords2.spf] *WORD
word MON: |*WORD
word Mon@ |( -- m ) Кладёт на стек текущее значение месяца. *WORD
word MONITOR-LOW |( -- ) Переводит монитор в режим пониженного энергопотребления. *WORD
word MONITOR-LOW? |*WORD
word MONITOR-OFF |( -- ) Выключает монитор. *WORD
word MONITOR-OFF? |*WORD
word MONITOR-ON |( -- ) Включает монитор. *WORD
word MONITOR-ON? |*WORD
word MonitorResponseTime: |< -- <time_in_ms> > Задает минимальное время (в миллисекундах) между двумя событиями (Watch*). <Опция nncron.ini> *WORD
word MonLength |( year month -- days-of-month ) Возвращает количество дней в указанном месяце. В качестве аргументов принимает год и порядковый номер нужного месяца. *WORD
word MONTH2NUM |( a u -- a1 u1 num ) *WORD
word Months: |< -- <months> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word MOUSE-CLICK |( button -- ) *WORD
word MOUSE-DCLICK |( button -- ) *WORD
word MOUSE-DOWN |( button -- ) *WORD
word MOUSE-LBCLK |( -- ) Эмулирует щелчок левой кнопки мыши. *WORD
word MOUSE-LBDCLK |( -- ) Эмулирует двойной щелчок левой кнопки мыши. *WORD
word MOUSE-LBDN |( -- ) Эмулирует нажатие левой кнопки мыши. *WORD
word MOUSE-LBUP |( -- ) Эмулирует отпускание левой кнопки мыши. *WORD
word MOUSE-MOVE |( x y -- ) Перемещает курсор мыши в точку экрана с абсолютными координатами x, y (в пикселах). *WORD
word MOUSE-MOVE: |< -- <x> <y> > Перемещает курсор мыши в точку экрана с абсолютными координатами x, y (в пикселах). *WORD
word MOUSE-MOVER |( x y -- ) Перемещает курсор на указанное количество пикселов относительно текущей позиции. *WORD
word MOUSE-MOVER: |< -- <x> <y> > Перемещает курсор на указанное количество пикселов относительно текущей позиции. *WORD
word MOUSE-MOVEW |( x y -- ) Перемещает курсор относительно левого верхнего угла активного окна приложения. *WORD
word MOUSE-MOVEW: |< -- x y > Перемещает курсор относительно левого верхнего угла активного окна приложения. *WORD
word MOUSE-ON-CLOCK? |( -- ? ) Возвращает флаг TRUE (-1), если указатель мыши находится над часами в системном трее. [Extwords2.spf] *WORD
word MOUSE-POS |( -- x y ) Кладет на стек два числа: координаты текущего местоположения курсора мыши. *WORD
word MOUSE-RBCLK |( -- ) Эмулирует щелчок правой кнопки мыши. *WORD
word MOUSE-RBDCLK |( -- ) Эмулирует двойной щелчок правой кнопки мыши. *WORD
word MOUSE-RBDN |( -- ) Эмулирует нажатие правой кнопки мыши. *WORD
word MOUSE-RBUP |( -- ) Эмулирует отпускани правой кнопки мыши. *WORD
word MOUSE-UP |( button -- ) *WORD
word MOV-OR-DEL |( a1 u1 a2 u2 -- ) *WORD
word MSG: |< -- "msg_text" > Выводит на экран информационное сообщение с заданным текстом. *WORD
word MsgBox |( a u -- ) Выводит на экран информационное сообщение с заданным текстом. *WORD
word MSGNUM>STR |( af uf n -- a u ) Преобразование номера сообщения в строку сообщения. Ищется в файле af uf. Файл должен иметь структуру как SPF.ERR. [Extwords2.spf] *WORD
word Multiply |[sendinput.spf] *WORD
word NAME> |( anf -- acf ) Finds compilation address from name field. *WORD
word NAME2SID |( a-user u-user -- sid ) *WORD
word NAME2SIDS |( a u -- a u ) Принимает в качестве аргумента строку с именем пользователя и возвращает SID-строку (Security Identifier, идентификатор безопасности пользователя или группы пользователей). *WORD
word NamedEvent |( a u -- handle ) *WORD
word n-az |( a n -- a ) *WORD
word NDEL |( -- ) Удалить текущий узел списка. Только внутри цикла LIST( )LIST. [lists.spf] *WORD
word new-http |[http.spf] *WORD
word NEW-VERSION |( nnCron|nnCron_LITE|nnBackup -- ) Checking http://www.nncron.ru/ for updates and informing if new nnCron, nnCron LITE or nnBackup builds are available. [updates.spf] *WORD
word NextChar |( -- c ? ) *WORD
word NEXTLINE |*WORD
word NHOST-EXIST: |< -- "hostname_or_ip_address" <num> > Возвращает флаг TRUE (-1), если указанный сервер доступен (пингуется). num - количество попыток. *WORD
word nnBackup |[updates.spf] *WORD
word nnCron |[updates.spf] *WORD
word nnCron_LITE |[updates.spf] *WORD
word NoActive |Отключает выполнение задачи. <Опция задачи> *WORD
word NODE |( -- Node ) Получить адрес текущего узла списка. Только внутри цикла LIST( )LIST. [lists.spf] *WORD
word NODE! |( NodeValue -- ) Записать значение со стека в текущий узел списка. Только внутри цикла LIST( )LIST. [lists.spf] *WORD
word NODE@ |( -- NodeValue ) Получить значение текущего узла списка. Только внутри цикла LIST( )LIST. [lists.spf] *WORD
word NODE>! |( value node list -- ) Записать значение value в узел node списка list. [lists.spf] *WORD
word NODE># |( node list -- i|-1 ) Вычислить индекс узла node списка list. Вернуть -1 в случае отсутствия узла в списке. [lists.spf] *WORD
word NODE>@ |( node list -- value ) Получить значение узла node списка list. [lists.spf] *WORD
word NODE-DEL |( value list -- ) Удалить первый узел, который содержит указанное значение. [lists.spf] *WORD
word NoDel |( -- ) Не удалять из кронтаба RunOnce-задачу. <Опция задачи> *WORD
word NodeValue |( node -- value ) получить значение элемента списка в цикле DoList. *WORD
word NoLog |Запрещает выводить в лог-файл информацию о выполнении данной задачи. <Опция задачи> *WORD
word NOOP |( -- ) Не производить никаких действий. *WORD
word NormalPriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word NoRunAs |( -- ) Отменяет выполнение авторизации, если nnCron настроен на запуск всех задач от имени указанного пользователя. <Опция задачи> *WORD
word NoRunAs? |*WORD
word NtoA |( IP -- addr u ) *WORD
word ntUSERNAME |( -- a u ) *WORD
word NUM> |( u -- addr u ) *WORD
word number, |*WORD
word NumLock |[sendinput.spf] *WORD
word Numpad0 |[sendinput.spf] *WORD
word Numpad1 |[sendinput.spf] *WORD
word Numpad2 |[sendinput.spf] *WORD
word Numpad3 |[sendinput.spf] *WORD
word Numpad4 |[sendinput.spf] *WORD
word Numpad5 |[sendinput.spf] *WORD
word Numpad6 |[sendinput.spf] *WORD
word Numpad7 |[sendinput.spf] *WORD
word Numpad8 |[sendinput.spf] *WORD
word Numpad9 |[sendinput.spf] *WORD
word OBJECT@ |*WORD
word OFF |( addr -- ) Stores false at adr. *WORD
word OKEYS |( a u -- ) Однократно нажать все клавиши в OEM-строке, при этом будут отправлены именно те символы, что указаны в строке. [sendinput.spf] *WORD
word OLDEST-FILE-ATIME |( a u -- a u ) Searches for oldest file in specified directory by access time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-FILE-ATIME: |< -- a u > Searches for oldest file in specified directory by access time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-FILE-TIME |( a u -- a u ) Searches for oldest file in specified directory by creation time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-FILE-TIME: |< -- a u > Searches for oldest file in specified directory by creation time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-FILE-WTIME |( a u -- a u ) Searches for oldest file in specified directory by modification time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-FILE-WTIME: |< -- a u > Searches for oldest file in specified directory by modification time, returns a string with a full path. [files_pick.spf] *WORD
word OLDEST-SEARCH |Searching for oldest file. [files_pick.spf] *WORD
word ON |( addr -- ) Stores true at adr. *WORD
word OnceADay |( -- ) Предписывает запускать задачу только один раз в течение дня. <Опция задачи> *WORD
word OnceAHour |( -- ) Предписывает запускать задачу только один раз в течение часа. <Опция задачи> *WORD
word OnceAMonth |( -- ) Предписывает запускать задачу только один раз в течение месяца. <Опция задачи> *WORD
word OnceAWeek |( -- ) Предписывает запускать задачу только один раз в течение недели. <Опция задачи> *WORD
word ONLINE: |< -- "connection" > Возвращает флаг TRUE (-1), если наличеcтвует указанное интернет-соединение. *WORD
word ONLINE? |( -- ) Возвращает флаг TRUE (-1), если наличеcтвует интернет-соединение (dial-up или VPN). *WORD
word ONLYDIR |( S" fullpath" -- a_onlypath u ) Возвращает строку, содержащую только путь (без имени файла) без слэша на конце. *WORD
word ONLYNAME |( S" fullpath" -- a_ onlyname u ) Возвращает строку с именем файла (без пути) и расширением. *WORD
word OPEN/CREATE |( a u -- h ) *WORD
word OPEN/CREATE-FILE |( a u mode -- handle ior ) *WORD
word OpenClipboardWait |( cycles -- ? ) *WORD
word OPEN-FILE |( addr u fam -- field ior ) Открывает существующий файл, заданный адресом первого байта имени addr, длиной строки u и атрибутами fam (file access method). Возвращает на стеке идентификатор файла и код результата операции. *WORD
word OPEN-FILE-SHARED |*WORD
word open-help |( -- ) Открыть файл справки nnCron. *WORD
word options |( -- ) Открыть диалоговое окно nnCron "Параметры". *WORD
word ORDER |( -- ) Выводит на консоль имя словарей в порядке поиска. *WORD
word OSD |( S" string" -- ) OnScreenDisplay. [osd.spf] *WORD
word OSD: |< -- "string" > OnScreenDisplay. [osd.spf] *WORD
word OSD2 |( S" string" X-pos Y-pos S" Font" FontSize FontColor -- ) OnScreenDisplay. [osd.spf] *WORD
word OSD2: |< -- "string" X-pos Y-pos "Font" FontSize FontColor > OnScreenDisplay. [osd.spf] *WORD
word OSD2-PAUSED |( Time S" string" X-pos Y-pos S" Font" FontSize FontColor -- ) OnScreenDisplay. [osd.spf] *WORD
word OSD-CLEAR |( -- ) Очистить OnScreenDisplay. [osd.spf] *WORD
word OSD-FONT |( a u nsize nclr -- ) Шрифт OnScreenDisplay. [osd.spf] *WORD
word OSD-FONT: |< -- "font_name" nsize nclr > Шрифт OnScreenDisplay. [osd.spf] *WORD
word OSD-PAUSED |( Time S" string" -- ) OnScreenDisplay. [osd.spf] *WORD
word OSD-POS |( x y -- ) Позиция OnScreenDisplay на экране (в пикселях). [osd.spf] *WORD
word OSD-POS: |< -- x y > Позиция OnScreenDisplay на экране (в пикселях). [osd.spf] *WORD
word -out |*WORD
word PageDown |[sendinput.spf] *WORD
word PageUp |[sendinput.spf] *WORD
word PARSE |*WORD
word PARSE-MASKS |( a u list -- ) *WORD
word Password: |Пароль пользователя. <Опция задачи> *WORD
word PATH! |*WORD
word PATH@ |*WORD
word PATH+ |( a u -- ) *WORD
word PAUSE |( ms -- ) Приостановить выполнение задания на указанный промежуток времени. *WORD
word PAUSE: |< -- <time_in_ms> >|< -- <hh:mm> > Приостановить выполнение задания на указанный промежуток времени. *WORD
word PeekChar |*WORD
word PENDING-CHAR |*WORD
word PERCENT |( -- a u ) Процент (%). *WORD
word PGDN |[sendinput.spf] *WORD
word PGUP |[sendinput.spf] *WORD
word PICK-RANDOM-FILE |( a u -- a u ) Picks the random file from the specified folder. [files_pick.spf] *WORD
word PICK-RANDOM-FILE: |< -- a u > Picks the random file from the specified folder. [files_pick.spf] *WORD
word PID |*WORD
word PING |( addr u cnt -- ?) Возвращает флаг TRUE (-1), если указанный сервер доступен (пингуется). cnt - количество попыток. *WORD
word Ping: |( a u -- ? ) Возвращает флаг TRUE (-1), если указанный сервер доступен (пингуется). Количество попыток - 3. *WORD
word PLAY-SOUND |( a u -- ) *WORD
word PLAY-SOUND: |< -- "path_of_wav_file" > Воспроизводит wav-файл асинхронно: выполнение задачи не приостанавливается до окончания воспроизведения. *WORD
word PLAY-SOUNDW: |< -- "path_of_wav_file" > Воспроизводит wav-файл синхронно: выполнение задачи приостанавливается до окончания воспроизведения. *WORD
word POP3-CHECK |( S" hostname-or-ip" S" pop3user" S" password" -- u ) Возвращает количество сообщений в почтовом ящике или FALSE (0), если ящик пуст или не удалось установить подключение по протоколу POP3. *WORD
word POP3-CHECK: |< -- "hostname-or-IP" "pop3user" "password" > Возвращает количество сообщений в почтовом ящике или FALSE (0), если ящик пуст или не удалось установить подключение по протоколу POP3. *WORD
word POP3-CONNECT |( a-host u1 a_name u2 a-pass u3 -- ior ) Устанавливает соединение с почтовым сервером по протоколу POP3. *WORD
word POP3-DELE |( n -- ior ) Принимает номер письма в качестве аргумента и удаляет письмо, хранящееся на сервере. Возвращает номер возможной ошибки. *WORD
word POP3-GET |( a u a1 u1 a2 u2 u3 -- a u ) Получает с POP3-сервера указанное сообщение по его номеру и оставляет на стеке строку с текстом сообщения. *WORD
word POP3-LIST |( -- a u ior ) Возвращает строку с номерами всех писем, хранящихся на сервере и их размером (в байтах), а также номер возможной ошибки. *WORD
word POP3-QUIT |( -- ior ) Разрывает соединение с POP3 сервером. Возвращает номер возможной ошибки. *WORD
word POP3-RETR |( n -- a u ior ) Принимает номер письма в качестве аргумента и возвращает строку с полным текстом письма, а также номер возможной ошибки. *WORD
word POP3-STAT |( -- n ior ) Возвращает число с кол-вом писем, хранящихся на сервере, а также номер возможной ошибки. *WORD
word POP3-TOP |( n1 n2 -- a u ior ) Принимает номер письма и кол-во строк в качестве аргументов и возвращает строку с полным заголовком письма и заданное кол-во строк из тела письма. Также возвращает номер возможной ошибки. *WORD
word POPUP |*WORD
word POPUPMENU |*WORD
word POP-WINDOW |( hwnd -- ) *WORD
word POWER-FORCE |( -- word ) Модификатор слов выключения компьютера, ускоряет выполнение. *WORD
word POWER-HIBERNATE |( -- ) Усыпляет компьютер: переводит его в режим hibernate. *WORD
word POWEROFF |( -- ) Завершает работу операционной системы и выключает питание компьютера. *WORD
word POWER-SUSPEND |( -- ) Переводит компьютер в режим пониженного энергопотребления. *WORD
word PrevTempFile |( -- addr u ) Содержит имя предыдущего TempFile. *WORD
word PRINT |( az -- ) Распечатать az строку. [extwords.spf] *WORD
word PrintScreen |[sendinput.spf] *WORD
word ProcActiveTime |( pid -- D ) Время работы процесса в миллисекундах (возвращает число двойной длины). Принимает PID в качестве аргумента. *WORD
word PROC-CLOSE |( a u -- ) Закрывает все открытые окна процесса и только после этого прерывает сам процесс. [procwin.spf] *WORD
word PROC-CLOSE: |< -- "proc_pattern" > Закрывает все открытые окна процесса и только после этого прерывает сам процесс. [procwin.spf] *WORD
word PROC-CPU-USAGE |( a u -- % ) Мониторит загрузку процессора указанным процессом в течение одной секунды, результат измерений в процентах. *WORD
word PROC-EXIST: |< -- "proc_pattern" > Возвращает флаг TRUE (-1), если процесс, подпадающий под маску существует. *WORD
word PROC-EXIST? |( S" winword.exe" -- pid ) Возвращает PID процесса, если процесс существует. *WORD
word PROC-FULLNAME |( pid - a u ) Возвращает строку, содержащую полное имя процесса по его PID. *WORD
word PROC-ID |( -- pid ) PID процесса, запущенного из nnCron. Заполняется после успешного запуска приложения (START-APP:, START-APPW:, QSTART-APP:). *WORD
word PROC-KERNEL-TIME |( a u -- d ) *WORD
word PROC-NAME |( pid -- a u ) Возвращает строку, содержащую короткое имя процесса по его PID. *WORD
word PROC-TIME |( a u -- sec ) *WORD
word PROC-TIME: |< -- "proc_pattern" > Кладет на стек время работы указанного процесса в секундах. *WORD
word PROC-USER-TIME |( a u -- d ) *WORD
word PROC-WAIT-IDLE |( pid -- ) Приостанавливает работу задачи до тех пор, пока указанный процесс не станет idle. *WORD
word PRTSC |[sendinput.spf] *WORD
word PURGE-OLD |( S" path\\mask" <days> -- ) Удаляет все файлы, подпадающие под маску, старше указанного количества дней создания файла. *WORD
word PURGE-OLD: |< -- "path\\mask" <days> > Удаляет все файлы, подпадающие под маску, старше указанного количества дней создания файла. *WORD
word PURGE-OLDA |( S" path\\mask" <days> -- ) Удаляет все файлы, подпадающие под маску, старше указанного количества дней последнего доступа к файлу. *WORD
word PURGE-OLDA: |< -- "path\\mask" <days> > Удаляет все файлы, подпадающие под маску, старше указанного количества дней последнего доступа к файлу. *WORD
word PURGE-OLDW |( S" path\\mask" <days> -- ) Удаляет все файлы, подпадающие под маску, старше указанного количества дней последней записи в файл. *WORD
word PURGE-OLDW: |< -- "path\\mask" <days> > Удаляет все файлы, подпадающие под маску, старше указанного количества дней последней записи в файл. *WORD
word PUSH-WINDOW |( hwnd -- prev-hwnd ) *WORD
word -q |*WORD
word QSTART-APP |( addr u -- ) Запускает приложение и, не дожидаясь окончания его работы, переходит к выполнению следующей строки задачи, перед стартом приложения выводит на экран запрос. Приложение будет загружено, если пользователь нажал кнопку Yes. *WORD
word QSTART-APP: |< -- команда до конца строки > Запускает приложение и, не дожидаясь окончания его работы, переходит к выполнению следующей строки задачи, перед стартом выводит на экран запрос. Приложение будет загружено, если пользователь нажал кнопку Yes. *WORD
word QSTART-APPW |( addr u -- ) Запускает приложение и ожидает завершения приложения после запуска, перед стартом заданного приложения выводит на экран запрос. Приложение будет загружено только в том случае, если пользователь нажал кнопку Yes. *WORD
word QSTART-APPW: |< -- команда до конца строки > Запускает приложение и ожидает завершения его работы, перед стартом заданного приложения выводит на экран запрос. Приложение будет загружено только в том случае, если пользователь нажал кнопку Yes. *WORD
word QUERY |( a u -- ? ) Выводит на экран сообщение (message box) с указанным вопросом. *WORD
word QUERY: |< -- "query_text" > Выводит на экран сообщение (message box) с указанным вопросом. *WORD
word QueryStartAnswer: |< -- <Yes/No> > Определяет ответ nnCron на вопрос "Запустить приложение?" (QSTART-APP:) в случае, если пользователь не отреагировал на запрос в течение времени, указанного в переменной QueryStartTimeout:. <Опция nncron.ini> *WORD
word QueryStartTimeout: |< -- <time_in_sec> > Определяет время (в секундах), в течение которого nnCron будет ожидать реакции пользователя на запрос о запуске программы (QSTART-APP:). <Опция nncron.ini> *WORD
word QUIT |( -- ) Interprets keyboard commands. *WORD
word QUOTE |( -- a u ) Кавычка ("). *WORD
word R/O |Только чтение (read only). (Метод доступа к файлу) *WORD
word R/W |Чтение и запись (read/write). (Метод доступа к файлу) *WORD
word RAN4 |( -- d ) *WORD
word RANDOM |( range -- random ) Генерирует случайные числа. В качестве аргумента принимает "верхнюю границу" диапазона. Нижняя граница диапазона - 0, верхняя граница - значение аргумента минус единица. *WORD
word RASDomain |( a u -- ) Устанавливает имя домена для удаленного соединения. *WORD
word RASDomain: |< -- "domain" > Устанавливает имя домена для удаленного соединения. *WORD
word RASEntry |*WORD
word RASEntry: |*WORD
word RASPassword |*WORD
word RASPassword: |< -- "dialup-password" > Устанавливает пароль для удаленного соединения. *WORD
word RASPhone |*WORD
word RASPhone: |< -- "phone" > Устанавливает номер телефона по которому будет совершен звонок. *WORD
word RASSecPassword: |< -- "dialup-secure-password" > Устанавливает зашифрованный пароль для удаленного соединения. *WORD
word RASUser |( addr u -- ) *WORD
word RASUser: |< -- "dialup-login" > Устанавливает имя пользователя (логин) для удаленного соединения. *WORD
word RBDN |( -- ) Нажимает правую кнопку мыши. [sendinput.spf] *WORD
word RBUP |( -- ) Отпускает правую кнопку мыши. [sendinput.spf] *WORD
word RCATCH |( npar nres -- ... ior ) Если произошли какие-то беды со стеком (мусор или разрушен), то ior=-2, если произошла ошибка, то ior будет содержать какой-нибудь отличный от нуля код. *WORD
word RCLICK |( -- ) Клик правой кнопкой мыши. [sendinput.spf] *WORD
word READ-FILE |( addr u field -- u2 ior ) Читает не более u1 байт из файла, заданного идентификатором fileid, и размещает их начиная с адреса addr. Возвращает на стеке количество реально считанных байт u2 и код результата операции. *WORD
word READ-LINE |( c-addr u1 fileid -- u2 flag ior ) Прочесть следующую строку из файла, заданного fileid, в память по адресу c-addr. Читается не больше u1 символов. Если операция успешна, flag "истина" и ior ноль. *WORD
word RealtimePriority |( -- ) Устанавливает приоритет процесса. <Опция запуска приложения> *WORD
word REBOOT |( -- ) Перезагружает систему. *WORD
word RECENT-FILE |( a u -- a1 u1 ) Searches for most recent file in specified directory, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-ATIME |( a u -- a u ) Searches for most recent file in specified directory by access time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-ATIME: |< -- a u > Searches for most recent file in specified directory by access time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-TIME |( a u -- a u ) Searches for most recent file in specified directory by creation time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-TIME: |< -- a u > Searches for most recent file in specified directory by creation time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-WTIME |( a u -- a u ) Searches for most recent file in specified directory by modification time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-FILE-WTIME: |< -- a u > Searches for most recent file in specified directory by modification time, returns a string with a full path. [files_pick.spf] *WORD
word RECENT-SEARCH |Searching for most recent file. [files_pick.spf] *WORD
word RECURSE |( -- ) Рекурсия. *WORD
word RECURSIVE |( -- S" path\\mask" FOR-FILES )|< -- FOR-FILES: > Модификатор слов, работающими с каталогами. Указывает работать не только в указанном каталоге, но и во всех его подкаталогах. *WORD
word REG-CHANGE-ATTRIBUTES |Отслеживать изменение атрибутов ключа (таких, как security) (Модификатор WatchRegistryKey:). <Опция задачи> *WORD
word REG-CHANGE-LAST-SET |Отслеживать изменение даты последней записи в ключ (Модификатор WatchRegistryKey:). <Опция задачи> *WORD
word REG-CHANGE-NAME |Отслеживать изменение имени ключа (Модификатор WatchRegistryKey:). <Опция задачи> *WORD
word REG-CHANGE-SECURITY |Отслеживать изменение прав доступа к ключу (Модификатор WatchRegistryKey:). <Опция задачи> *WORD
word REG-DELETE-KEY |( a u -- ) Удалить файловые и реестровые переменные. *WORD
word REG-DELETE-KEY: |< -- "registry_path" > Удаляет из реестра указанный ключ и все его подключи. *WORD
word REG-DELETE-VALUE |( S" registry_path" -- ) Удаляет указанное значение из реестра. Работает и со строковыми и с числовыми значениями. *WORD
word REG-DELETE-VALUE: |< -- "registry_path" > Удаляет указанное значение из реестра. Работает и со строковыми и с числовыми значениями. *WORD
word REG-DWORD |( S" regkey" u -- ) Устанавливает числовое значение реестра. *WORD
word REG-DWORD: |< -- "registry_path" <number> > Устанавливает числовое значение реестра. *WORD
word REG-KEY-EXIST? |( a u -- ? ) Проверяет наличие указанного ключа в реестре. Возвращает TRUE (-1) если ключ существует и FALSE (0) в противном случае. *WORD
word REG-KEY-TO-FILE |( a1 u1 a2 u2 -- ) Запись ветки реестра в файл. [Extwords2.spf] *WORD
word REG-KEY-TO-FILE: |< -- a1 u1 a2 u2 > Запись ветки реестра в файл. [Extwords2.spf] *WORD
word REG-OPEN-KEY |( keypath u branch -- h ) *WORD
word REG-OPEN-KEY-RO |( keypath u branch -- h ) *WORD
word REG-PARSE |( a u value? -- branch apath aval ) *WORD
word REG-SZ |( apath upath aval uval -- ) *WORD
word REG-SZ: |< -- "registry_path" "string_value" > Устанавливает строковое значение реестра. *WORD
word regVAR-FILENAME |( a -- a1 u1 ) *WORD
word RegVarPath! |( a u -- ) Задает ветку registry, где должны храниться реестровые переменные. Обратный слеш (\\) в конце пути обязателен. *WORD
word regVAR-PATH@ |*WORD
word RELEASE |( a -- ) Отпускает заданный семафор. *WORD
word RELEASE-MUTEX |*WORD
word -reload |*WORD
word reload-crontab |( -- ) Перечитать кронтабы. *WORD
word REL-PATH |( a u -- a1 u1 ) Получить относительный путь C:\\any\\path\\file.txt -> C:\\any\\path\\ [extwords.spf] *WORD
word RemAllowed: |< -- ip_address_mask > IP-адреса с которых можно подключаться к серверу Remote Console. <Опция nncron.ini> *WORD
word RE-MATCH |( S" text" S" /regexp/" -- ior ) Возвращает TRUE, если при сравнении аргумента text с регулярным выражением найдено совпадение. *WORD
word RE-MATCH$ |( # a-text u-text a-re u-re -- a u ? ) *WORD
word RE-MATCH: |< -- "text" "/regexp/" > Возвращает TRUE, если при сравнении аргумента text с регулярным выражением найдено совпадение. *WORD
word RemConsolePort: |< -- <port_number> > Задает номер порта, который будет "слушать" сервер Remote Console. <Опция nncron.ini> *WORD
word RemDisallowed: |< -- <ip_address_mask> > IP-адреса с которых нельзя подключаться к серверу Remote Console. <Опция nncron.ini> *WORD
word REMINDER |( a u -- ) Под звуковой сигнал выводит на экран заданное напоминание с возможностью повторить его через несколько минут. *WORD
word REMINDER: |< -- "reminder_text" > Под звуковой сигнал выводит на экран заданное напоминание с возможностью повторить его через несколько минут. *WORD
word REMINDER-SOUND |Слово определяет звуковой сигнал, сопровождающий появление "Напоминания" (Reminder). <Опция nncron.ini> *WORD
word -remove |*WORD
word -remove95 |*WORD
word REMOVE-TASK |( handle_of_thread -- ) *WORD
word REPOSITION-FILE |( ud field -- ior ) Устанавливает указатель чтения/записи файла, заданного идентификатором fileid, в позицию ud. Возвращает на стеке код результата операции. *WORD
word RES |( n -- a u ) Принимает число в качестве аргумента и возвращает строку под соответствующим номером из подключенного "языкового" файла. *WORD
word RESIZE-FILE |( ud field -- ior ) Устанавливает размер файла, заданного идентификатором fileid, равный ud. Возвращает на стеке код результата операции. *WORD
word RESUME |( tid -- ) Возобновление исполнения потока снаружи потока. *WORD
word RESUME-CRON |Восстанавливает нормальный режим работы nnCron. *WORD
word rgb |( red green blue -- colorref ) *WORD
word rgRun1 |S" SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunServices" *WORD
word rgRun2 |S" SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" *WORD
word Right |[sendinput.spf] *WORD
word RightAlt |[sendinput.spf] *WORD
word RightAlt( |[sendinput.spf] *WORD
word RightCtrl |[sendinput.spf] *WORD
word RightCtrl( |[sendinput.spf] *WORD
word RightShift |[sendinput.spf] *WORD
word RightShift( |[sendinput.spf] *WORD
word Rule: |Условия запуска задачи. <Опция задачи> *WORD
word RUN |( task -- ) Запуска раздела Action: одной задачи из тела другой в том же потоке, что и остальные ключевые слова запускающей задачи. *WORD
word -run |*WORD
word -runfile |*WORD
word RunMissed |( -- ) Предписывает выполнить просроченную задачу "при первой возможности", т. е. сразу после загрузки nnCron. <Опция задачи> *WORD
word RunMissed: |< -- <hh:mm|days> > Предписывает выполнить просроченную задачу "при первой возможности", с указанием максимального времени ожидания, которое может пройти с момента запланированного старта задачи. <Опция задачи> *WORD
word RunMissed? |( -- ior ) Возвращает флаг TRUE (-1) если стартовавшая задача была "просрочена" и теперь запускается "при первой возможности" и флаг FALSE (0), если старт задачи являлся "плановым". *WORD
word RunOnce |( -- ) Предписывает выполнить задачу только один раз, после чего физически удалить ее из кронтаба. <Опция задачи> *WORD
word s' |( ' <any text>' -> az u ) Строковый литерал az u с выключенными эскейп-последовательностями. [strings.spf] *String
word S! |( a u a1 -- ) *WORD
word S" |( -- a u ) Символьная строка (au-cтрока). *String
word S", |*WORD
word s, |( a u -- a1 ) *WORD
word SCREENSAVER-OFF |( -- ) Останавливает хранитель экрана. *WORD
word SCREENSAVER-ON |( -- ) Запускает хранитель экрана. *WORD
word SCREENSAVER-ON? |( -- ior ) Возвращает флаг TRUE (-1), если запущен хранитель экрана. *WORD
word ScrollLock |[sendinput.spf] *WORD
word SD.M.Y>Day |( addr u -- days ) Количество дней, прошедших от начала летоисчисления по григорианскому календарю до указанной даты. Аргумент - строка с датой в формате DD.MM.YYYY. *WORD
word SDD.MM.YYYY |( addr u -- y m d ) Конвертирует строку в формате DD.MM.YYYY в дату (формат YMD). *WORD
word SEARCH |( a1 u1 a2 u2 -- a3 u3 flag ) Производит поиск в строке. *WORD
word Sec@ |( -- s ) Кладёт на стек текущее значение секунды. *WORD
word SecPassword: |Зашифрованный пароль пользователя. <Опция задачи> *WORD
word SEM-FREE? |( a -- ? ) *WORD
word SEND-KEYS |( a u -- ) Посылает один или несколько кодов клавиш активному окну, т. е. эмулирует ввод с клавиатуры. *WORD
word SEND-KEYS: |< -- "key_code_string" > Посылает один или несколько кодов клавиш активному окну, т. е. эмулирует ввод с клавиатуры. *WORD
word SEND-KEYS-DELAY |( <between_keystrokes_in_ms> <between_SEND-KEYS_in_ms> -- ) Посылает один или несколько кодов клавиш активному окну, т. е. эмулирует ввод с клавиатуры с задержкой в миллисекундах. *WORD
word SEND-KEYS-DELAY: |< -- <between_keystrokes_in_ms> <between_SEND-KEYS_in_ms> > Посылает один или несколько кодов клавиш активному окну, т. е. эмулирует ввод с клавиатуры с задержкой в миллисекундах. *WORD
word SESSIONSCOUNT |( -- count ) Содержит количество сессий. [net.spf] *WORD
word SESSIONSERVERS |( -- a u ) Содержит список доступных серверов. В качестве разделителя используется пробел. [net.spf] *WORD
word SESSIONSUSERS |( -- a u ) Содержит список пользователей. В качестве разделителя используется пробел. [net.spf] *WORD
word set |Задать локальную переменную окружения. SET varname=строковое значение до конца строки, или SET varname="строковое значение" *WORD
word SET |Задать локальную переменную окружения. SET varname=строковое значение до конца строки, или SET varname="строковое значение" *WORD
word Set |Задать локальную переменную окружения. SET varname=строковое значение до конца строки, или SET varname="строковое значение" *WORD
word SET-CRON-FLAG |( NODE MASK -- ) *WORD
word SETENV |( aval u1 aname u2 -- ior ) Задать локальную переменную окружения. *WORD
word SET-NORMAL |( a u -- ) Файл. [extwords.spf] *WORD
word SetProp |*WORD
word SetPropS |( a-val u-val a_name u_name l -- ) *WORD
word SetPropZ |( azvalue azprop list -- ) *WORD
word SET-READ-ONLY |( a u -- ) Файл. [extwords.spf] *WORD
word SFALSE |S" 0" *WORD
word SFIND |( c-addr u -- c-addr u 0 | xt 1 | xt -1 ) Ищет слово в текущем словаре. *WORD
word SGET |GET *WORD
word SHANGUP |( addr u -- ) *WORD
word ShellStart |( a u -- ) *WORD
word ShellStartApp |( sei -- ? ) *WORD
word ShellStartAppWait |( sei -- ? ) *WORD
word SHH:MM |( addr u -- hh mm ) *WORD
word SHH:MM:SS |( addr u -- hh mm ss ) *WORD
word Shift |( n1 n2 -- n3 ) [sendinput.spf] *WORD
word Shift( |[sendinput.spf] *WORD
word ShiftKey |( c -- ) *WORD
word show-log |( -- ) Открыть лог-файл nnCron. *WORD
word ShowMaximized |( -- ) Максимизировать (развернуть на весь экран). <Опция запуска приложения> *WORD
word ShowMessage |( addr u -- ) *WORD
word ShowMinimized |( -- ) Минимизировать (свернуть в значок). <Опция запуска приложения> *WORD
word ShowNoActivate |( -- ) Не активизировать окно при старте. <Опция запуска приложения> *WORD
word ShowNormal |( -- ) Стартовать в обычном режиме. <Опция запуска приложения> *WORD
word SHOW-WIN |( S" win-pattern" SW_ -- ) *WORD
word SHUTDOWN |( -- ) Завершает работу операционной системы до появления на экране надписи "Теперь питание компьютера можно отключить". *WORD
word -si |*WORD
word SID2NAME |( psid -- a u ) *WORD
word SIGN |Вставляет знак "-" в выходную строку в том случае, если третье число в стеке отрицательное. *WORD
word SingleInstance |Предотвращает одновременное выполнение двух и более экземпляров одной задачи. *WORD
word SIZEOF |( class -- size-of-instance ) *WORD
word SKIP |*WORD
word SKIP-CHAR |( addr u -- addr1 u1 ) *WORD
word SKIPERRORS |( -- S" path\\mask" FOR-FILES )|< -- FOR-FILES: > Игнорировать ошибки доступа при "обходе" дерева каталогов. *WORD
word SLASH-ADD |( a u -- a1 u1 ) Добавление обратного слеша в конец пути, если нету. [Extwords2.spf] *WORD
word SLASH-ADD: |< -- "path" > Добавление обратного слеша в конец пути, если нету. [Extwords2.spf] *WORD
word SLASH-REM |( a u -- a1 u1 ) Удаление обратного слеша с конца пути если он есть. [Extwords2.spf] *WORD
word SLASH-REM: |< -- "path" > Удаление обратного слеша с конца пути если он есть. [Extwords2.spf] *WORD
word SLITERAL |*WORD
word SONLINE? |( addr u -- ? ) *WORD
word SPACE |( -- ) Displays a space character. *WORD
word SPACES |( +n -- ) Displays n spaces. *WORD
word SPK-DEFAULT |( -- SpkTime ) Modifier SpkTime. [spktime.spf] *WORD
word SPK-ECHO |( -- SpkTime ) Modifier SpkTime. [spktime.spf] *WORD
word SPK-ENGLISH |( -- SpkTime ) Modifier SpkTime. [spktime.spf] *WORD
word SPK-RUSSIAN |( -- SpkTime ) Modifier SpkTime. [spktime.spf] *WORD
word SPK-SERG |( -- SpkTime ) Modifier SpkTime. [spktime.spf] *WORD
word SpkTime |( -- ) Speaks current time. [spktime.spf] *WORD
word SRVRESP>STR |( n -- a u ) Преобразование ответа сервера в строку сообщения "Server response # ...". Требует наличия файла RESP.SVR. [Extwords2.spf] *WORD
word START |( u task -- tid ) Запустить поток. *WORD
word START-APP |( a u -- ) Запускает приложение и, не дожидаясь окончания его работы, переходит к выполнению следующей строчки задачи. *WORD
word START-APP: |< -- команда до конца строки > Запускает приложение и, не дожидаясь окончания его работы, переходит к выполнению следующей строчки задачи. *WORD
word StartAppNC |( 'si S" app" -- ? ) No close handles. *WORD
word START-APPW |( a u -- ) Запускает приложение и ожидает завершения приложения после запуска. *WORD
word START-APPW: |< -- команда до конца строки > Запускает приложение и ожидает завершения приложения после запуска. *WORD
word START-CONSOLE |( -- ) Открыть консоль nnCron. *WORD
word StartIn: |< -- "dir_path" > Задает каталог, в котором будет запускаться приложение. <Опция запуска приложения> *WORD
word StartPos: |< -- <x> <y> > Устанавливает абсолютную позицию окна на экране (в пикселах). <Опция запуска приложения> *WORD
word START-SEQUENCE |( dcounter dseq# -- ) Инициализация генератора случайных чисел. В качестве аргументов два числа двойной длины: последовательность, использующуюся при генерации и начальный номер числа в последовательности. *WORD
word StartSize: |< -- <xsize> <ysize> > Устанавливает размер окна (в пикселах). <Опция запуска приложения> *WORD
word START-TASK |( par task -- ) *WORD
word start-task-action |( cron-node -- ) *WORD
word START-TIME? |( -- ior ) Проверяет, совпадает ли текущее время с началом первой минуты после старта nnCron. Возвращает TRUE (-1), если это соответствует действительности и FALSE (0) в противном случае. *WORD
word STOP |( tid -- ) Остановить поток снаружи потока. *WORD
word -stop |*WORD
word STOP-THEARD |( tid -- ) Остановить поток с идентификатором tid. [extwords.spf] *WORD
word STR: |*WORD
word STRING |( char "ccc" -- ) *WORD
word string, |*WORD
word STRING+ |*WORD
word StringGetPos |( a1 u1 a2 u2 -- pos ) [extwords.spf] *WORD
word STRING-REPLACE |( a1 u1 a2 u2 a3 u3 -- a u ) Ищет в строке ИсходнаяСтрока подстроку СтрокаПоиска, заменяет найденные вхождения на СтрокаЗамены. [Extwords2.spf] *WORD
word STRING-REPLACE: |< -- "str1" "str2" "str3" > a u Ищет в строке ИсходнаяСтрока подстроку СтрокаПоиска, заменяет найденные вхождения на СтрокаЗамены. [Extwords2.spf] *WORD
word STR-SUBST |( a1 u1 a2 u2 a3 u3 -- a4 u4 ) *WORD
word STRUE |S" 1" *WORD
word Subtract |[sendinput.spf] *WORD
word SUSPEND |( tid -- ) Приостановка исполнения потока "на паузу". *WORD
word SUSPEND-CRON |Переводит nnCron в режим остановки. *WORD
word SVERSION |( -- a u ) *WORD
word SWHide |( -- ) Скрыть окно программы. <Опция запуска приложения> *WORD
word SYS-IDLE-TIME |( -- d ) *WORD
word SYS-PAR |( par -- a ) *WORD
word SYS-SET |Задать системную (глобальную) переменную окружения. SYS-SET varname=строковое значение до конца строки, или SYS-SET varname="строковое значение" *WORD
word SZ", |( a u -- ) *WORD
word Tab |[sendinput.spf] *WORD
word TASK-ACTIVATE |( task -- ) *WORD
word TASK-ACTIVE? |( task -- ) *WORD
word TASK-ADD |( | "task name" ["crontab name"] -- ) Defines new task. Reads input lines up to . (dot) at beginning of line. [tools.spf] *WORD
word TASK-CREATION-TIME |( -- d t= | -- f= ) Используется внутри задачи. Возвращает флаг TRUE и время создания задачи в формате FILETIME либо флаг FALSE, если не удается вычислить время. *WORD
word TASK-DEACTIVATE |( task -- ) *WORD
word TASK-DEL |[tools.spf] *WORD
word TASK-DELETE |( task -- ) Deletes specified task. Task should exist. [tools.spf] *WORD
word TASK-EXECUTION-TIME |( -- d t= | -- f= ) Используется внутри задачи. Возвращает флаг TRUE и время последнего выполнения задачи в формате FILETIME или флаг FALSE, если не удается вычислить время. *WORD
word TASK-GET |( | "task name" ["crontab name"] -- ) [tools.spf] *WORD
word TBL-LINE |( -- a u ) Найденная строка в цикле TXT-BY-LINE. [Extwords2.spf] *WORD
word -tBuff |*WORD
word TempFile |( -- addr u ) Содержит уникальную cтроку, сконструированную так: <номер_по_порядку>.<ThreadId>.<TickCounter> *WORD
word -TEXT |( a1 u1 a2 -- n ) *WORD
word TGET |( timeout a -- ? ) *WORD
word THINT |( S" hint_text" <time_in_sec> -- ) Отображает подсказку в течение указанного времени в секундах. *WORD
word THINT: |< -- "hint_text" <time_in_sec> > Отображает подсказку в течение указанного времени в секундах. *WORD
word THINT2 |( S" hint_text" <time_in_sec> -- ) Отображает подсказку в течение указанного времени в секундах. [hint-ext.spf] *WORD
word THINT2: |< -- "hint_text" <time_in_sec> > Отображает подсказку в течение указанного времени в секундах. [hint-ext.spf] *WORD
word THINTW |( S" hint_text" <time_in_sec> -- ) Отображает подсказку в течение указанного времени в секундах и приостанавливает выполнение задачи. *WORD
word THINTW: |< -- "hint_text" <time_in_sec> > Отображает подсказку в течение указанного времени в секундах и приостанавливает выполнение задачи. *WORD
word THINTW2 |( S" hint_text" <time_in_sec> -- ) Отображает подсказку в течение указанного времени в секундах и приостанавливает выполнение задачи. [hint-ext.spf] *WORD
word THINTW2: |< -- "hint_text" <time_in_sec> > Отображает подсказку в течение указанного времени в секундах и приостанавливает выполнение задачи. [hint-ext.spf] *WORD
word ThreadDesktop |( -- a u ) *WORD
word ThreadId |( -- addr u ) Номер thread'a в котором стартует задача, идентификатор процесса задачи. *WORD
word TIB |( -- adr ) The address of the Text Input Buffer. *WORD
word Time: |< -- time in cron format > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word TimeErrMsgBox |*WORD
word TimeMeasureEnd |( -- t ) Конец измерения времени выполнения, на стеке - числовое значение времени выполнения в милисекундах. [Extwords2.spf] *WORD
word TimeMeasureStart |( -- ) Начало измерения времени выполнения, значение GetTickCount записывается в переменную TickCountBegin. [Extwords2.spf] *WORD
word TimeMeasureValue |( -- a u ) Конец измерения времени выполнения, на стеке - строковое значение времени выполнения в милисекундах и " ms". [Extwords2.spf] *WORD
word TimeMessageBox |( time-out flags addr u -- result ? ) result - результат, возвращенный MessageBox'ом. ? - true - если была нажата кнопка, false - если был таймаут. *WORD
word TimeMin@ |( -- CurrentTime_in_minutes ) Кладет на стек текущее время в минутах (количество минут, прошедших с ближайшей полуночи). *WORD
word TimeMsgBox |( addr u time-in-sec -- ) *WORD
word TimeSec@ |( -- CurrentTime_in_seconds ) Кладет на стек текущее время в секундах (количество секунд, прошедших с ближайшей полуночи). *WORD
word Title |( S" console_title" -- ) прямо при запуске задает имя консольного окна. Работает только с консольными окнами. *WORD
word Title: |< -- "console_title" > прямо при запуске задает имя консольного окна. Работает только с консольными окнами. *WORD
word TMSG: |< -- "msg_text" <time_in_sec> > Отображает сообщение только в течение указанного времени (в секундах). *WORD
word TODEPTH |( -- S" path\\mask" FOR-FILES )|< -- FOR-FILES: > Просмотр дерева каталогов в глубину. *WORD
word TO-DESKTOP |( a u -- ) *WORD
word to-eol, |*WORD
word TOKEN2SID |( ptok -- sid ) *WORD
word TO-LOWER-CASE |( a u -- a1 u1 ) Converts a ASCII character string to lowercase. [Extwords2.spf] *WORD
word TO-NUMB |( a u - u1 ) *WORD
word ToPixels |( x y -- x2 y2 ) *WORD
word TOPMOST? |( hwnd -- ? ) Возвращает TRUE если указанное окно является topmost-окном (отображается поверх остальных окон). [windows.spf] *WORD
word TOP-PARENT-WINDOW |( hwnd-child -- hwnd-parent ) Получить родительское окно верхнего уровня по хэндлу дочернего окна. [extwords.spf] *WORD
word TO-UPPER-CASE |( a u -- a1 u1 ) Converts a ASCII character string to uppercase. [Extwords2.spf] *WORD
word TQUERY |( a u timeout default -- ? ) Выводит на экран сообщение и ожидает реакции юзера заданное количество секунд. *WORD
word TQUERY: |< -- "query_text" <timeout_in_sec> Yes/No > Выводит на экран сообщение и ожидает реакции юзера заданное количество секунд. *WORD
word -TRAILING |( addr u1 -- addr u2 ) Если u1 больше нуля, u2 равно u1, уменьшенному на количество пробелов в конце символьной строки addr u1, если u1 ноль или строка состоит из пробелов, u2 ноль. *WORD
word -trailing-white |( ca u1 -- ca u2 ) *WORD
word TRAIL-L |( a u -- a1 u1 ) Обрезает пробелы, табуляцию и переносы строк с левой стороны строки. [Extwords2.spf] *WORD
word TRAIL-R |( a u -- a1 u1 ) Обрезает пробелы, табуляцию и переносы строк с правой стороны строки. [Extwords2.spf] *WORD
word TrayIconBalloonClick: |< -- forth_word > Действия, которые будут происходить при щелчке мышью на подсказке BALLOON:. <Опция nncron.ini> *WORD
word TrayIconDoubleClick: |< -- forth_word > Действия, которые будут происходить при двойном клике мышью на иконке nnCron в системном трее. <Опция nncron.ini> *WORD
word TrayIconRightButton: |< -- forth_word > Действия, которые будут происходить при клике правой кнопкой мыши на иконке nnCron в системном трее. <Опция nncron.ini> *WORD
word TRAY-REFRESH |( -- ) "Обновляет" системный трей и удаляет из него "фантомные" иконки, которые могут там остаться, например, после принудителного прерывания процесса. *WORD
word TYPE |( adr +n -- ) Displays n characters. *WORD
word U. |( u -- ) Печатает верхнее число со стека данных, рассматривая его как число без знака. *WORD
word U.R |( u +n -- ) Prints an unsigned number in fixed width field. *WORD
word uFileVarPath! |( a u -- ) Задает путь к каталогу, где должны храниться файловые переменные в пределах потока. Обратный слеш (\\) в конце пути обязателен. *WORD
word UKEY |( UNICODE -- ) Нажать и отпустить Unicode клавишу. [sendinput.spf] *WORD
word UKEYDN |( UNICODE -- ) Нажать Unicode клавишу. [sendinput.spf] *WORD
word UKEYS |( wa wu -- ) Нажать и отпустить все клавиши в юникод-строке, при этом будут отправлены именно те символы, что указаны в строке. [sendinput.spf] *WORD
word UKEYUP |( UNICODE -- ) Отпустить Unicode клавишу. [sendinput.spf] *WORD
word UnblockTheInput |( -- ) Разблокировать ввод с клавиатуры и мыши. [extwords.spf] *WORD
word -uninstall |*WORD
word Up |[sendinput.spf] *WORD
word UPPER |( a u - ) Converts a ASCII character string to uppercase. *WORD
word UPPER-CHAR |( c1 -- c2 ) Converts a single ASCII character to uppercase. *WORD
word UPTIME |( -- sec ) Кладет на стек количество секунд, прошедших с момента старта операционной системы. [time.spf] *WORD
word uRegVarPath! |( a u -- ) Задает ветку registry, где должны храниться реестровые переменные в пределах потока. Обратный слеш (\\) в конце пути обязателен. *WORD
word UseDLL |< -- dll_name > Объявление библиотеки, чтобы стали видимы все её функции (замена WINAPI:), можно компилировать её в верхнюю часть форт-пространства при помощи LH-INCLUDED. *WORD
word User: |Имя пользователя при авторизации задачи. <Опция задачи> *WORD
word USERNAME |( -- addr u ) Имя текущего залогинившегося пользователя. *WORD
word USES |( -- word_name name_vect ) Записать выполнимый токен следующего слова в вектор. Замена конструкции ['] ... TO ... Пример: ['] any_word TO any_vect_or_value --> USES any_word any_vect_or_value. [extwords.spf] *WORD
word UTF16B-STRINGS |Режим кодировки. [strings.spf] *WORD
word UTF16L-STRINGS |Режим кодировки. [strings.spf] *WORD
word UTF32B-STRINGS |Режим кодировки. [strings.spf] *WORD
word UTF32L-STRINGS |Режим кодировки. [strings.spf] *WORD
word UTF8-STRINGS |Режим кодировки. [strings.spf] *WORD
word VAL-DROP> |( value list -- ) Удалить значение списка list. [lists.spf] *WORD
word VISIBLE? |( hwnd -- ? ) Возвращает FALSE, если к окну применялась команда WIN-HIDE или окно было убрано в системный трей. Во всех остальных случаях возвращает TRUE. [windows.spf] *WORD
word VOC-NAME. |( wid -- ) Выводит на консоль имя словаря если оно определено. *WORD
word Volume_down |[sendinput.spf] *WORD
word Volume_mute |[sendinput.spf] *WORD
word Volume_up |[sendinput.spf] *WORD
word W" |*String
word W/O |Только запись (write only). (Метод доступа к файлу) *WORD
word W2T-TITLE |[win2tray.spf] *WORD
word WAIT-AND-TERMINATE-ALL |Ожидание завершения всех заданий в течении заданного времени. Если время истекло, то завершение всех задач. *WORD
word WaitFor |( <ms>|<hh:mm> ) Приостанавливает работу приложения, если оно не завершилось самостоятельно в течение указанного времени. *WORD
word WaitFor: |< -- <ms>|<hh:mm> > Приостанавливает работу приложения, если оно не завершилось самостоятельно в течение указанного времени. *WORD
word WAIT-KUP |( VK -- ) Ждать поднятия кнопки с кодом VK. [extwords.spf] *WORD
word WAIT-KUP-T |( VK t -- ) Ждать поднятия кнопки с кодом VK t миллисекунд. [Extwords2.spf] *WORD
word WAIT-KUP-T: |< -- VK t > Ждать поднятия кнопки с кодом VK t миллисекунд. [Extwords2.spf] *WORD
word WALLPAPER |( S" path_name" -- ) [Extwords2.spf] *WORD
word WALLPAPER: |< -- "path_name" > [Extwords2.spf] *WORD
word WALLPAPER-OFF |( -- ) [Extwords2.spf] *WORD
word WALLPAPER-RANDOM |( S" path" -- ) [Extwords2.spf] *WORD
word WALLPAPER-RANDOM: |< -- "path" > [Extwords2.spf] *WORD
word WatchBatteryLow |( -- ) Срабатывает при получении сообщения от системы о низком уровне зарядки аккумуляторов. <Опция задачи> *WORD
word WATCH-CHANGE-ATTRIBUTES |( -- ) Отслеживать изменение атрибутов (Модификатор WatchDir:). <Опция задачи> *WORD
word WATCH-CHANGE-DIR-NAME |( -- ) Отслеживать изменение имени каталога (Модификатор WatchDir:). <Опция задачи> *WORD
word WATCH-CHANGE-FILE-NAME |( -- ) Отслеживать изменение имени файла в каталоге (Модификатор WatchDir:). <Опция задачи> *WORD
word WATCH-CHANGE-LAST-WRITE |( -- ) Отслеживать изменение даты последней записи (Модификатор WatchDir:). <Опция задачи> *WORD
word WATCH-CHANGE-SECURITY |( -- ) Отслеживать изменение прав доступа (Модификатор WatchDir:). <Опция задачи> *WORD
word WATCH-CHANGE-SIZE |( -- ) Отслеживать изменение размера (Модификатор WatchDir:). <Опция задачи> *WORD
word WatchClipboard: |< -- "text_pattern" > Срабатывает если содержимое буфера обмена подпадает под указанную маску. <Опция задачи> *WORD
word WatchConnect |( -- ) Срабатывает при установлении интернет-соединения с провайдером. <Опция задачи> *WORD
word WatchCPUUsage: |< -- <CPUUsage%> <seconds> > Срабатывает, если загрузка процессора в течение указанного времени (в секундах) превышает заданную загрузку процессора (в процентах). <Опция задачи> *WORD
word WatchDir: |< -- "dir_path" [flag] [modifiers] > Срабатывает при изменениях в указанной директории. <Опция задачи> *WORD
word WatchDisconnect |( -- ) Срабатывает при разрыве интернет-соединения с провайдером. <Опция задачи> *WORD
word WatchDrive: |< -- drv_letter > Срабатывает при подключении к компьютеру переносного носителя (в момент появления указанной буквы диска в папке "Мой компьютер") или в момент закрытия лотка указанного CD/DVD-ROM привода. <Опция задачи> *WORD
word WatchDriveInsert: |< -- drv_letter > Срабатывает при подключении к компьютеру переносного носителя (в момент появления указанной буквы диска в папке "Мой компьютер") или в момент закрытия лотка указанного CD/DVD-ROM привода. <Опция задачи> *WORD
word WatchDriveRemove: |< -- drv_letter > Срабатывает при отключении переносного носителя (в момент удаления указанной буквы диска из папки "Мой компьютер") или в момент извлечения диска из указанного CD/DVD-ROM привода. <Опция задачи> *WORD
word WatchEventLog: |< -- "log_name" > Срабатывает при обнаружении новых записей в журналах событий (event logs - WinNT/2000/XP). "log_name": "Application", "System" и "Security". *WORD
word WatchFile: |< -- "file_path" > Срабатывает при появлении (создании) указанного файла и при каждом изменении содержимого этого файла <Опция задачи> *WORD
word WatchFileDelete: |< -- "file_path" > Срабатывает при удалении (переименовании, перемещении) указанного файла. <Опция задачи> *WORD
word WatchHotKey: |< -- "hotkey" > Срабатывет при нажатии указаного клавиатурного сокращения. <Опция задачи> *WORD
word WatchLogoff: |< -- "username_pattern" > Срабатывает при попытке закончить пользовательскую сессию. <Опция задачи> *WORD
word WatchLogon: |< -- "username_pattern" > Срабатывает при логоне указанного юзера. <Опция задачи> *WORD
word WatchProc: |< -- "proc_pattern" > Срабатывает при запуске указанного процесса. <Опция задачи> *WORD
word WatchProcDelay: |< -- <time_in_ms> > Определяет задержку (в миллисекундах) перед срабатыванием WatchProc: и WatchProcStop:. <Опция nncron.ini> *WORD
word WATCH-PROC-ID |( -- pid ) PID процесса. Заполняется после применения WatchProc:/WatchProcStop:. *WORD
word WatchProcStop: |< -- "proc_pattern" > Срабатывает при завершении указанного процесса. <Опция задачи> *WORD
word WatchQueryShutdown |( -- ) Срабатывает в момент опроса приложений перед тем как начнется процесс выключения компьютера. <Опция задачи> *WORD
word WatchQuerySuspend |( -- ) Срабатывает в момент опроса приложений перед переведенем компьютера в режим "хибернейт" или режим пониженного энергопотребления. <Опция задачи> *WORD
word WatchRegistryKey: |< -- "key_path" [flag] [modifiers] > Срабатывает при изменениях в указанном ключе реестра. <Опция задачи> *WORD
word WatchResume |( -- ) Срабатывает, когда компьютер возвращается в нормальный режим после действий пользователя и при обнаружении пользовательской активности сразу после возвращения из спящего режима. <Опция задачи> *WORD
word WatchResumeAuto |( -- ) Срабатывает в случае "пробуждения" компьютера после StandBy и Hibernate вне зависимости от наличия или отсутствия действий пользователя. <Опция задачи> *WORD
word WATCH-SESSIONID |( -- u ) Содержит SessionID. Заполняется после применения слов WTSWatch*. *WORD
word WatchShutdown |( -- ) Срабатывают при выключении компьютера. <Опция задачи> *WORD
word WatchSubtree |( -- ) Мониторить не только указанный каталог, но и все его подкаталоги. (Флаг WatchDir: и WatchRegistryKey). <Опция задачи> *WORD
word WatchSuspend |( -- ) Срабатывают при переведении компьютера в режим пониженного энергопотребления. <Опция задачи> *WORD
word WatchWinActivate: |< -- "win_pattern" > Срабатывает при создании активизации окна с указанным заголовком. <Опция задачи> *WORD
word WatchWinCreate: |< -- "win_pattern" > Срабатывает при создании отрытии окна с указанным заголовком. <Опция задачи> *WORD
word WatchWinCreateDelay: |< -- <time_in_ms> > Определяет задержку (в миллисекундах) перед срабатыванием WatchWinCreate:. <Опция nncron.ini> *WORD
word WatchWinDestroy: |< -- "win_pattern" > Срабатывает при создании удалении (закрытии) окна с указанным заголовком. <Опция задачи> *WORD
word WatchWindow: |< -- "win_pattern" > Срабатывает при появлении окна с заголовком, подпадающим под образец и при смене этого заголовка на другой, подпадающий под маску. <Опция задачи> *WORD
word WC", |( wa wu -- wac ) *WORD
word WC|RE-COMPARE |( a1 u1 a-mask u-mask -- ? ) *WORD
word WC-MATCH |( a1 u1 a2 u2 -- ? ) *WORD
word WD |( -- u ) День недели (1-7, 1-monday, 7-sunday). *WORD
word WDay@ |( -- w ) Кладёт на стек текущее значение дня недели. *WORD
word WEEK2NUM |( a u -- a1 u1 num ) *WORD
word WEEK-DAY |( y m d -- wd[1-7] ) Кладет на стек порядковый номер дня недели (1 ... 7), на который попадает указанная дата в формате YMD. *WORD
word WeekDays: |< -- <week days> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word WGET" |*String
word WHICH-BUTTON-CLICKED |( -- DoubleClick? VK_Keycode ) Определяет, которая кнопка или клавиша нажата. Помещает на стек флаг двойного нажатия (для клавиш флаг всегда равен нулю) и код виртуальной клавиши. [Extwords2.spf] *WORD
word white? |( c -- ? ) White space. *WORD
word Win |[sendinput.spf] *WORD
word Win( |[sendinput.spf] *WORD
word Win2003? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в Win2003. *WORD
word Win2k? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в Win2000/XP и флаг FALSE (0), если в Win9x/ME/NT. *WORD
word Win95? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в Win95. *WORD
word Win98? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в Win98. *WORD
word Win9x? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в Win9x/ME и флаг FALSE (0), если в WinNT/2000/XP. *WORD
word WIN-ACTIVATE |( S" winname" -- ) Активизирует указанное окно. *WORD
word WIN-ACTIVATE: |< -- "win_pattern" > Активизирует указанное окно. *WORD
word WIN-ACTIVE: |< -- "win_pattern" > Возвращает флаг TRUE (-1), если указанное окно активно. *WORD
word WIN-ACTIVE? |( a u -- ? ) Возвращает флаг TRUE (-1), если указанное окно активно. *WORD
word WIN-CHILD-EXIST? |( S" substring" hwnd -- ? ) *WORD
word WIN-CHILD-MSG |( lpar wpar msgid S" win-pattern" S" button-pattern" -- ) *WORD
word WIN-CLICK |( S" win-pattern" S" button-pattern" -- ) "Нажимает" на указанную кнопку в указанном окне. *WORD
word WIN-CLICK: |< -- "win_pattern" "button_pattern" > "Нажимает" на указанную кнопку в указанном окне. *WORD
word WIN-CLOSE |( S" win-pattern" ) Эмулирует однократное нажатие левой кнопкой мыши на "крестике" в правом верхнем углу окна. *WORD
word WIN-CLOSE: |< -- "win_pattern" > Эмулирует однократное нажатие левой кнопкой мыши на "крестике" в правом верхнем углу окна. *WORD
word WIN-DESTROY |( S" winname" -- ) *WORD
word WIN-DESTROY: |< -- "winname" > *WORD
word Window |( class style parent-hwnd -- hwnd ) 0 - ошибка. *WORD
word WIN-EXIST: |< -- "win_pattern" > Возвращает флаг TRUE (-1), если указанное окно существует. *WORD
word WIN-EXIST? |( S" pattern" -- ) Возвращает флаг TRUE (-1), если указанное окно существует. *WORD
word WinFLAG |: WinFLAG IF 1 ELSE 0 THEN ; *WORD
word WIN-FROM-POINT |( -- hwnd ) Получить хэндл окна под курсором. *WORD
word WIN-HIDE |( S" win_pattern" -- ) Скрывает указанное окно. *WORD
word WIN-HIDE: |< -- "win_pattern" > Скрывает указанное окно. *WORD
word WIN-INPUT-TEXT |( S" caption_text" S" prompt_text" S" default_input_text" <time_in_sec> -- ) Выводит на экран диалоговое окно с предложением ввести информацию. *WORD
word WIN-INPUT-TEXT: |< -- ( -- a u 0 ) ( -- n ) "caption_text" "prompt_text" "default_input_text" <time_in_sec> > Выводит на экран диалоговое окно с предложением ввести информацию. *WORD
word WIN-MAXIMIZE |( S" pattern" -- ) Максимизирует указанное окно. *WORD
word WIN-MAXIMIZE: |< -- "win_pattern" > Максимизирует указанное окно. *WORD
word WinME? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в WinME. *WORD
word WIN-MINIMIZE |( S" pattern" -- ) Минимизирует указанное окно. *WORD
word WIN-MINIMIZE: |< -- "win_pattern" > Минимизирует указанное окно. *WORD
word WIN-MOVE |( x y -- ) Перемещает активное окно в новую позицию с абсолютными координатами x и y (в пикселах). *WORD
word WIN-MOVE: |< -- <x> <y> > Перемещает активное окно в новую позицию с абсолютными координатами x и y (в пикселах). *WORD
word WIN-MOVER |( x y -- ) Перемещает активное окно на указанное количество пикселов относительно текущей позиции. *WORD
word WIN-MOVER: |< -- <x> <y> > Перемещает активное окно на указанное количество пикселов относительно текущей позиции. *WORD
word WIN-MSG |( lpar wpar msgid S" win-pattern" -- ) *WORD
word WIN-NOTOPMOST |( hwnd -- ) Отменяет действие слова WIN-TOPMOST. *WORD
word WIN-NOTOPMOST: |< -- "win_pattern" > Отменяет действие слова WIN-TOPMOST:. *WORD
word WIN-NOT-RESPOND |( S" win_pattern" -- ior ) Позволяет отслеживать "зависшие" окна (окна, которые перестали отвечать на запросы пользователя). [windows.spf] *WORD
word WIN-NOT-RESPOND: |< -- "win_pattern" > Позволяет отслеживать "зависшие" окна (окна, которые перестали отвечать на запросы пользователя). [windows.spf] *WORD
word WinNT? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в WinNT/2000/XP и флаг FALSE (0), если в Win9x/ME. *WORD
word WIN-POS |( hwnd -- x y ) Возвращает координаты левого верхнего угла окна. *WORD
word WIN-RECT |( hwnd -- r b y x ) Возвращает координаты левого верхнего и правого нижнего углов этого окна. *WORD
word WIN-RESIZE |( w h -- ) Изменяет размеры активного окна. *WORD
word WIN-RESTORE |( S" pattern" -- ) Восстанавливает указанное окно. *WORD
word WIN-RESTORE: |< -- "win_pattern" > Восстанавливает указанное окно. *WORD
word WIN-SEND-KEYS |( a-win u-win a-keys u-keys -- ) Активизирует указанное окно и посылает ему последовательность клавиатурных кодов. *WORD
word WIN-SEND-KEYS: |< -- "win_pattern" "key_code_string" > Активизирует указанное окно и посылает ему последовательность клавиатурных кодов. *WORD
word WIN-SET-TITLE |( S" win-pattern" S" title" -- ) Изменяет заголовок указанного окна. *WORD
word WIN-SET-TITLE: |< -- "win_pattern" > "new_window_title" Изменяет заголовок указанного окна. *WORD
word WIN-SHOW |( "win_pattern" -- ) Восстанавливает на экране окна, скрытые с помощью слова WIN-HIDE:, а также окна программ, запущенных с опцией SWHide. *WORD
word WIN-SHOW: |< -- "win_pattern" > Восстанавливает на экране окна, скрытые с помощью слова WIN-HIDE:, а также окна программ, запущенных с опцией SWHide. *WORD
word WIN-TERMINATE |( S" win-pattern" -- ) Завершает процесс, породивший указанное окно. *WORD
word WIN-TERMINATE: |< -- "win_pattern" > Завершает процесс, породивший указанное окно. *WORD
word WIN-TEXT |( hwnd -- a u ) *WORD
word WIN-TITLE |( -- a u ) Заголовок окна после выполнения большинства "оконных" команд. *WORD
word WIN-TOPMOST |( hwnd -- ) Помещает указанное окно поверх всех окон. *WORD
word WIN-TOPMOST: |< -- "win_pattern" > Помещает указанное окно поверх всех окон. *WORD
word WIN-TO-TRAY |( S" win_pattern" -- ) Помещает окно, подпадающее под указанную маску в системный трей. [win2tray.spf] *WORD
word WIN-TO-TRAY: |< -- "win_pattern" > Помещает окно, подпадающее под указанную маску в системный трей. [win2tray.spf] *WORD
word WIN-TRANSPARENCY |( S" win_pattern" <transparency_level> -- ) Позволяет управлять прозрачностью окон, подпадающих под указанную маску (кроме консольных окон). [windows.spf] *WORD
word WIN-TRANSPARENCY: |< -- "win_pattern" <transparency_level> > Позволяет управлять прозрачностью окон, подпадающих под указанную маску (кроме консольных окон). [windows.spf] *WORD
word WIN-VER |( -- major ) Кладет на стек цифровое значение версии Windows. *WORD
word WinVerBuild |( -- n ) Кладёт на стек значение build операционной системы. *WORD
word WinVerMajor |( -- n ) Кладёт на стек значение major операционной системы. *WORD
word WinVerMinor |( -- n ) Кладёт на стек значение minor операционной системы. *WORD
word WinVerPlatform |( -- n ) Кладёт на стек значение platform операционной системы. *WORD
word WinVerServicePack |( -- a u ) Возвращает строку с именем последнего сервиспака, который был установлен в системе. *WORD
word WinVersionString |( -- a u ) Возвращает строку с полной версией операционной системы (имя ОС, номер сборки и имя установленного сервиспака). *WORD
word WIN-WAIT |( ms -- ) Задает время ожидания готовности активного окна. *WORD
word WIN-WAIT: |< -- <time_in_ms> > Задает время ожидания готовности активного окна. *WORD
word WinXP? |( -- ior ) Возвращает флаг TRUE (-1), если nnCron запущен в WinXP. *WORD
word WITHDIRS |( -- word ) Модификатор слова PURGE-OLD. Указывает удалять не только файлы, но и каталоги. *WORD
word WITHIN |( n min max -- f ) True if n <= x < max. *WORD
word WithoutProfile |( -- ) *WORD
word WM: |[CHAR] W ->WM *WORD
word WM-SYSCMD |*WORD
word WORD |( char -- adr ) Collects a char-delimited string from the input stream. *WORD
word WORDS |( -- ) Выводит на консоль имена слов записанных в словаре wid которого записана в переменной CONTEXT. *WORD
word -wp |*WORD
word WRITE-DATE |( -- n ) Дата записи файла (в цикле FOR-FILES: ... ;FOR-FILES). *WORD
word WRITE-FILE |( addr u field -- ior ) Записывает u байт, начиная с адреса addr, в файл, заданный идентификатором fileid. Возвращает на стеке код результата операции. *WORD
word WRITE-LINE |( addr u field -- ior ) То же, что и WRITE-FILE, но записываемые символы завершаются последовательностью, задающей перевод строки. *WORD
word WS" |*String
word WSEARCH |( wa1 wu1 wa2 wu2 -- wa3 wu3 flag ) Поиск в строке c-addr1 u1, строки c-addr2 u2. Флаг - истина, совпадение по адресу c-addr3 с оставшимися u3 символами, ложь - совпадения нет, c-addr3 = c-addr1, и u3 = u1. *WORD
word WSLITERAL |( wa wu -- ) *WORD
word W-TRAILING |w-addr wu1 -- w-addr wu2 Если u1 больше нуля, u2 равно u1, уменьшенному на количество пробелов в конце символьной строки w-addr wu1. Если u1 ноль или строка состоит из пробелов, u2 ноль. *WORD
word WTS-ACTIVE-SESSIONID |*WORD
word WTS-FOUND-PROCESSID |*WORD
word WTS-FOUND-PROCESSNAME |*WORD
word WTS-FOUND-SESSIONID |*WORD
word WTS-FOUND-USERSID |*WORD
word WTS-GET-USERNAME |( sessionid -- a u ) *WORD
word WTS-GET-USERTOKEN |( sessionid -- tok ) *WORD
word WTS-PROCID2SESSIONID |( procid -- sesid ) *WORD
word WTSWatchConnect |( -- ) A WTS-session was connected to the console session. <Опция задачи> *WORD
word WTSWatchDisconnect |( -- ) A WTS-session was disconnected from the console session. <Опция задачи> *WORD
word WTSWatchLock |( -- ) A WTS-session has been locked. <Опция задачи> *WORD
word WTSWatchLogoff |( -- ) A user has logged off the WTS-session. <Опция задачи> *WORD
word WTSWatchLogon |( -- ) A user has logged on to the WTS-session. <Опция задачи> *WORD
word WTSWatchRemoteConnect |( -- ) A WTS-session was connected to the remote session. <Опция задачи> *WORD
word WTSWatchRemoteDisconnect |( -- ) A WTS-session was disconnected from the remote session. <Опция задачи> *WORD
word WTSWatchUnlock |( -- ) A WTS-session has been unlocked. <Опция задачи> *WORD
word WW |( -- a u ) День недели (Mo-Su). *WORD
word WZ" |*String
word WZ", |( wa wu -- ) *WORD
word WZLITERAL |( wa wu -- ) *WORD
word WZPLACE |( a u buf -- ) *WORD
word -X:\ |( a u -- a1 u1 ) *WORD
word -X:\2 |( a u -- a1 u1 ) *WORD
word XB1CLICK |[sendinput.spf] *WORD
word XB1DN |[sendinput.spf] *WORD
word XB1UP |[sendinput.spf] *WORD
word XB2CLICK |[sendinput.spf] *WORD
word XB2DN |[sendinput.spf] *WORD
word XB2UP |[sendinput.spf] *WORD
word XCOUNT |*WORD
word xs, |( a u -- a1 ) *WORD
word XSLITERAL |*WORD
word XSLITERAL-CODE |*WORD
word xUPPER |( a u - ) *WORD
word xUPPER-CHAR |( c1 -- c2 ) *WORD
word XWHEEL |( n -- ) Вращать колесо мыши, n - число вращений колеса мышки, отрицательное число - в обратную сторону. [sendinput.spf] *WORD
word xy, |*WORD
word XYMOUSE |( x y -- ) Перемещает курсор в указанные координаты(перемещение происходит относительно текущих - см исходники). [sendinput.spf] *WORD
word XYMOUSE+ |( x y -- ) Перемещает курсор на указанное количество пикселей относительно текущих координат. [sendinput.spf] *WORD
word Year@ |( -- y ) Кладёт на стек текущее значение года. *WORD
word Years: |< -- <years> > Определение времени старта и периодичности выполнения задачи. <Опция задачи> *WORD
word YY |( -- a u ) Год (last 2 digit). *WORD
word YYYY |( -- a u ) Год (4 digit). *WORD
word z' |( ' any text' -> az ) Строковый литерал az с выключенными эскейп-последовательностями. [strings.spf] *String
word z" |( " any text" -> az ) Строковый литерал az. [strings.spf] *String
word Z" |( -- az ) Нуль-строка (строка без счетчика с завершающим нулем, az-строка). *String
word ZKEYS |( a u -- ) Однократно нажать все клавиши в Zero-string строке, при этом будут отправлены именно те символы, что указаны в строке. [sendinput.spf] *WORD
word ZLITERAL |( a u -- ) *WORD
word ZMOVE |( a u a1 -- ) *WORD
variable BACKUP-PATH |*VARIABLE
variable BalloonIcon |Иконка, которая будет отображаться в BALLOON. *VARIABLE
variable BalloonTime |Время (от 10000 до 30000 миллисекунд), после которого BALLOON будет закрыт. *VARIABLE
variable Console |<ON/OFF> Определяет запускается ли форт-консоль одновременно со стартом nnCron. <Опция nncron.ini> *VARIABLE
variable CRONINI-FILENAME |*VARIABLE
variable CRON-LIST |*VARIABLE
variable CRONOUT-FILENAME |*VARIABLE
variable CURRENT |( -- addr ) Переменная хранящая wid текущего словаря компиляции. *VARIABLE
variable DefaultDomain |*VARIABLE
variable DefaultLoadProfile |<ON/OFF> Параметр авторизации (должен ли подгружаться профиль пользователя) для запуска всех задач от имени конкретного пользователя. <Опция nncron.ini> *VARIABLE
variable DefaultPassword |*VARIABLE
variable DefaultUser |*VARIABLE
variable DialOnce |<ON/OFF> ON - не перезванивать снова, если уже установлено интернет-соединение (не вызывается функция RasDial). OFF полезен тогда, когда заранее неизвестно, сколько раз звонили. <Опция nncron.ini> *VARIABLE
variable DP |*VARIABLE
variable Editor |*VARIABLE
variable Guard |<ON/OFF> Определяет, будет ли задействована программа nnguard.exe, которая отвечает за то, чтобы nnCron автоматически перезапускался после фатальных ошибок. <Опция nncron.ini> *VARIABLE
variable GUIAsUser |<ON/OFF> Позволяет запускать GUI nnCron от имени пользователя, указанного в переменных GUI*. <Опция nncron.ini> *VARIABLE
variable GUILoadProfile |<ON/OFF> Параметр авторизации (должен ли подгружаться профиль пользователя) для запуска GUI nnCron от имени конкретного пользователя. <Опция nncron.ini> *VARIABLE
variable hCurIcon |*VARIABLE
variable hIcon |*VARIABLE
variable hIconX |*VARIABLE
variable HOST-STATE-DELAY |[win2tray.spf] *VARIABLE
variable IconForAdminsOnly |<ON/OFF> Отображать иконку nnCron в системном трее только для пользователей с правами администраторов. <Опция nncron.ini> *VARIABLE
variable ItemConsole |<ON/OFF> Наличие/отсутствие пункта "Инструменты/Консоль" в меню nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable ItemExit |<ON/OFF> Наличие/отсутствие пункта "Выход" в меню nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable ItemOptions |<ON/OFF> Наличие/отсутствие пункта "Параметры" в меню nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable ItemReload |<ON/OFF> Наличие/отсутствие пункта "Перечитать кронтабы" в меню nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable ItemSuspend |<ON/OFF> Наличие/отсутствие пункта "Приостановить nnCron/Продолжить работу nnCron" в меню nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable lang-list |*VARIABLE
variable Log2StdOut |<ON/OFF> Задает режим копирования всего, что выводится в лог в стандартный вывод. <Опция nncron.ini> *VARIABLE
variable MOUSE-CLK-DELAY |*VARIABLE
variable PerfMonitor |<ON/OFF> Позволяет "включить" набор специальных слов для мониторинга производительности системы. <Опция nncron.ini> *VARIABLE
variable ReloadImmediately |<ON/OFF> ON - при обнаружении изменений, немедленно перечитывать кронтабы. OFF - при обнаружении изменений, перечитывать кронтабы на 30-й секунде текущей или следующей минуты. <Опция nncron.ini> *VARIABLE
variable RemConsole |<ON/OFF> Разрешает/запрещает запуск Remote Console вместо обычной форт-консоли. <Опция nncron.ini> *VARIABLE
variable RunAsDefaultUser |<ON/OFF> Позволяет запускать все задачи от имени пользователя, указанного в переменных Default*. <Опция nncron.ini> *VARIABLE
variable ShowErrorMsg |<ON/OFF> Определяет, будут ли ошибки, которые попадают в лог-файл, дублироваться предупреждающим сообщением на экране. <Опция nncron.ini> *VARIABLE
variable ShowErrorTime |*VARIABLE
variable SPEC-TASK? |*VARIABLE
variable SyntaxRestriction |<ON/OFF> Принудительно ограничивает синтаксические конструкции, которые можно использовать в начале описания задачи. <Опция nncron.ini> *VARIABLE
variable SysTrayIcon |<ON/OFF> Управляет отображением иконки nnCron в системном трее. <Опция nncron.ini> *VARIABLE
variable TRAY-LIST |Список window handle окон, которые были свернуты в трей. [win2tray.spf] *VARIABLE
variable WARNING |( -- adr ) USER variable controlling "isn't Unique" messages. *VARIABLE
variable WatchWinCreateDelay |*VARIABLE
variable WatchWindowDelay |*VARIABLE
variable WB-OFFS |*VARIABLE
variable WBW-OFFS |*VARIABLE
variable YearField |<ON/OFF> Определяет, используется ли поле года в cron-формате, который использует nnCron. <Опция nncron.ini> *VARIABLE
user FCH-CH-LIST |Cписок измененных файлов, который формируется после работы FILE-CHANGE. [time.spf] *USER
user OnBalloonClick |"перекрывает" значение переменной nncron.ini TrayIconBalloonClick: только для текущей задачи. *USER
user WTS-CUR-PROC-INFO |*USER
value #WATCH |Количество WATCH'ей. *VALUE
value /SPAD |[1 Mb] Размер буфера SPAD. [strings.spf] *VALUE
value /STRINGS |[1 Mb] [strings.spf] *VALUE
value <EXC-DUMP> |*VALUE
value AUTOSPAD? |Автоматическое управление размером SPAD. [strings.spf] *VALUE
value CONTEXT |( -- wid_addr ) Переменная определяет словарь, в котором должен осуществляться поиск. *VALUE
value CpuMeasurementTime |Время измерения загрузки процессора словом CPU-USAGE (в миллисекундах). *VALUE
value CRONLOG-TIME-FORMAT |*VALUE
value DEBUG? |*VALUE
value def-GRV-SIZE |*VALUE
value IdleHookMask |*VALUE
value INVALID_HANDLE_VALUE |*VALUE
value LOG-FILE |*VALUE
value MAX-CB-SIZE |*VALUE
value MonitorDirTimeout |*VALUE
value MonitorResponseTime |*VALUE
value PING-TIMEOUT |[5000 ms] Тайм-аут пинга. *VALUE
value ProcWatchDelay |*VALUE
value QueryStartTimeout |*VALUE
value RES-INIT |*VALUE
value W2T-DELAY |[win2tray.spf] *VALUE
value WBW-NFA |*VARIABLE
user-value /USER-SPAD |Текущий размер буфера SPAD. [strings.spf] *USER-VALUE
user-value CRONTAB-CONTENT |*USER-VALUE
user-value CUR-NODE |*USER-VALUE
user-value ExitCodeProc |Код завершения (error level) приложения. Используется после выполнения START-APPW: *USER-VALUE
user-value GBL-?OUT |По умолчанию 0. Значение переменной GBL-RES зависит от значения GBL-?OUT перед выполнением цикла GET-BY-LINE. [Extwords2.spf] *USER-VALUE
user-value GBL-RES |Содержит цифровой результат выполнения текущего цикла GET-BY-LINE. Значение зависисит от значения переменной GBL-?OUT. [Extwords2.spf] *USER-VALUE
user-value HTTP-RESULT |Содержит код возврата http-сервера (после работы слов HTTP-CHANGED:, HTTP-GET: и HTTP-LM:). *USER-VALUE
user-value RASError |*USER-VALUE
user-value SPAD |Адрес строкового буфера SPAD. [strings.spf] *USER-VALUE
user-value SPAD# |Текущее число символов в строковом буфере SPAD. [strings.spf] *USER-VALUE
user-value ST1# |( -- u ) Текущее число символов в строковом буфере ST1. [Extwords2.spf] *USER-VALUE
user-value ST2# |( -- u ) Текущее число символов в строковом буфере ST2. [Extwords2.spf] *USER-VALUE
user-value this |Адрес текущего экземпляра объекта (для использования внутри определений). *USER-VALUE
user-value TP-SYNC-DELAY |Содержит время отклика сервера точного времени (в миллисекундах). [timesync.spf] *USER-VALUE
user-value TP-SYNC-RESULT |Позволяет убедиться в успешности проведенной синхронизации времени. [timesync.spf] *USER-VALUE
user-value WIN-CHILD-HWND |Содержит window handle дочернего окна. Заполняется внутри цикла FOR-CHILD-WINDOWS:. *USER-VALUE
user-value WIN-HWND |Содержит window handle соответствующего окна после выполнения большинства "оконных" команд. *USER-VALUE
create <RE-CHARS> |*CREATE
create ALP64 |*CREATE
create CRON-NODE |*CREATE
create CRON-TIME |*CREATE
create DEFAULT-TABLE |Default table with no conversion. [recode.spf] *CREATE
create DEF-CRON-NODE |*CREATE
create KOI2WIN-TABLE |Table for converting text from KOI8-R to cp1251 encoding. [recode.spf] *CREATE
create LOWER-TABLE |Table for converting all alphanumeric chars to the lower case. [recode.spf] *CREATE
create MONNAMES |Содержит сокращенные названия месяцев (символы "JanFebMarAprMayJunJulAugSepOctNovDec"). *CREATE
create sh_keys0 |C" ~!@#$%^&*()_+|<>?{}:x" *CREATE
create sh_keys1 |C" `1234567890-=\\,./[];'" *CREATE
create TRANSLIT-TABLE |This table was created for transliteration of Russian characters. [recode.spf] *CREATE
create upp-buf |*CREATE
create UPPER-TABLE |Table for converting all alphanumeric chars to the upper case. [recode.spf] *CREATE
create WDAYS |Cодержит сокращенные названия дней недели (символы "MonTueWedThuFriSatSun"). *CREATE
create WRONG-LAYOUT-TABLE |Table for converting text, which was typed using wrong keyboard layout (EN -> cp1251, cp1251 -> EN). [recode.spf] *CREATE
create z"" |[strings.spf] *CREATE
vect <MAIN> |*VECT
vect <PRE> |*VECT
vect HIDE-ICON |( -- ) Скрывает иконку nnCron в системном трее, если она видима. *VECT
vect LOG-TIME |*VECT
vect SHOW-ICON |( -- ) Отображает иконку nnCron в системном трее, если она скрыта. *VECT
constant ARA |1025 Arabic (Saudi Arabia). [kbd_layout.spf] *CONSTANT
constant Caps |Идентификатор индикатора CAPSLOCK для слов управления индикаторами клавиатуры. [keyboard_led.spf] *CONSTANT
constant CAT |1027 Catalan (Spain). [kbd_layout.spf] *CONSTANT
constant CHS |2052 Chinese (People's Republic of China). [kbd_layout.spf] *CONSTANT
constant CHT |1028 Chinese (Taiwan). [kbd_layout.spf] *CONSTANT
constant CSY |1029 Czech (Czech Republic). [kbd_layout.spf] *CONSTANT
constant DAN |1030 Danish (Denmark). [kbd_layout.spf] *CONSTANT
constant DEU |1031 German (Germany). [kbd_layout.spf] *CONSTANT
constant ELL |1032 Greek (Greece). [kbd_layout.spf] *CONSTANT
constant ENU |1033 English (United States). [kbd_layout.spf] *CONSTANT
constant ESC-CHAR |[strings.spf] *CONSTANT
constant ESN |3082 Spanish - Modern Sort (Spain). [kbd_layout.spf] *CONSTANT
constant ETI |1061 Estonian. [kbd_layout.spf] *CONSTANT
constant EUQ |1069 Basque (Spain). [kbd_layout.spf] *CONSTANT
constant FIN |1035 Finnish (Finland). [kbd_layout.spf] *CONSTANT
constant FRA |1036 French (France). [kbd_layout.spf] *CONSTANT
constant HEB |1037 Hebrew (Israel). [kbd_layout.spf] *CONSTANT
constant HINST |Хэндл приложения. *CONSTANT
constant HRV |1050 Croatian (Croatia). [kbd_layout.spf] *CONSTANT
constant HUN |1038 Hungarian (Hungary). [kbd_layout.spf] *CONSTANT
constant ITA |1040 Italian (Italy). [kbd_layout.spf] *CONSTANT
constant JPN |1041 Japanese (Japan). [kbd_layout.spf] *CONSTANT
constant KOR |1042 Korean (Korea). [kbd_layout.spf] *CONSTANT
constant LEFT-BTN |*CONSTANT
constant LTH |1063 Lithuanian. [kbd_layout.spf] *CONSTANT
constant LVI |1062 Latvian. [kbd_layout.spf] *CONSTANT
constant NLD |1043 Dutch (Netherlands). [kbd_layout.spf] *CONSTANT
constant NOR |1044 Norwegian (Bokmхl) (Norway). [kbd_layout.spf] *CONSTANT
constant Num |Идентификатор индикатора NUMLOCK для слов управления индикаторами клавиатуры. [keyboard_led.spf] *CONSTANT
constant PAD-SIZE |*CONSTANT
constant PLK |1045 Polish (Poland). [kbd_layout.spf] *CONSTANT
constant PTB |1046 Portuguese (Brazil). [kbd_layout.spf] *CONSTANT
constant PTG |2070 Portuguese (Portugal). [kbd_layout.spf] *CONSTANT
constant RIGHT-BTN |*CONSTANT
constant ROM |1048 Romanian (Romania). [kbd_layout.spf] *CONSTANT
constant RUS |1049 Russian (Russia). [kbd_layout.spf] *CONSTANT
constant Scroll |Идентификатор индикатора SCROLLLOCK для слов управления индикаторами клавиатуры. [keyboard_led.spf] *CONSTANT
constant SKY |1051 Slovak (Slovakia). [kbd_layout.spf] *CONSTANT
constant SLV |1060 Slovenian (Slovenia). [kbd_layout.spf] *CONSTANT
constant SVE |1053 Swedish (Sweden). [kbd_layout.spf] *CONSTANT
constant THA |1054 Thai (Thailand). [kbd_layout.spf] *CONSTANT
constant TRK |1055 Turkish (Turkey). [kbd_layout.spf] *CONSTANT
constant VIT |1066 Vietnamese (Viet Nam). [kbd_layout.spf] *CONSTANT
constant VK_ADD |Add key. [keystate.spf] *CONSTANT
constant VK_APPS |Applications key on a Microsoft Natural Keyboar. [keystate.spf] *CONSTANT
constant VK_ATTN |ATTN key. [keystate.spf] *CONSTANT
constant VK_BACK |BACKSPACE key. [keystate.spf] *CONSTANT
constant VK_CANCEL |Control-break processing. [keystate.spf] *CONSTANT
constant VK_CAPITAL |CAPS LOCK key. [keystate.spf] *CONSTANT
constant VK_CLEAR |CLEAR key. [keystate.spf] *CONSTANT
constant VK_CONTROL |CTRL key. [keystate.spf] *CONSTANT
constant VK_CRSEL |CRSEL key. [keystate.spf] *CONSTANT
constant VK_DECIMAL |Decimal key. [keystate.spf] *CONSTANT
constant VK_DELETE |DEL key. [keystate.spf] *CONSTANT
constant VK_DIVIDE |Divide key. [keystate.spf] *CONSTANT
constant VK_DOWN |DOWN ARROW key. [keystate.spf] *CONSTANT
constant VK_END |END key. [keystate.spf] *CONSTANT
constant VK_EREOF |Erase EOF key. [keystate.spf] *CONSTANT
constant VK_ESCAPE |ESC key. [keystate.spf] *CONSTANT
constant VK_EXECUTE |EXECUTE key. [keystate.spf] *CONSTANT
constant VK_EXSEL |EXSEL key. [keystate.spf] *CONSTANT
constant VK_F1 |F1 key. [keystate.spf] *CONSTANT
constant VK_F10 |F10 key. [keystate.spf] *CONSTANT
constant VK_F11 |F11 key. [keystate.spf] *CONSTANT
constant VK_F12 |F12 key. [keystate.spf] *CONSTANT
constant VK_F13 |F13 key. [keystate.spf] *CONSTANT
constant VK_F14 |F14 key. [keystate.spf] *CONSTANT
constant VK_F15 |F15 key. [keystate.spf] *CONSTANT
constant VK_F16 |F16 key. [keystate.spf] *CONSTANT
constant VK_F17 |F17 key. [keystate.spf] *CONSTANT
constant VK_F18 |F18 key. [keystate.spf] *CONSTANT
constant VK_F19 |F19 key. [keystate.spf] *CONSTANT
constant VK_F2 |F2 key. [keystate.spf] *CONSTANT
constant VK_F20 |F20 key. [keystate.spf] *CONSTANT
constant VK_F21 |F21 key. [keystate.spf] *CONSTANT
constant VK_F22 |F22 key (PPC only) Key used to lock device. [keystate.spf] *CONSTANT
constant VK_F23 |F23 key. [keystate.spf] *CONSTANT
constant VK_F24 |F24 key. [keystate.spf] *CONSTANT
constant VK_F3 |F3 key. [keystate.spf] *CONSTANT
constant VK_F4 |F4 key. [keystate.spf] *CONSTANT
constant VK_F5 |F5 key. [keystate.spf] *CONSTANT
constant VK_F6 |F6 key. [keystate.spf] *CONSTANT
constant VK_F7 |F7 key. [keystate.spf] *CONSTANT
constant VK_F8 |F8 key. [keystate.spf] *CONSTANT
constant VK_F9 |F9 key. [keystate.spf] *CONSTANT
constant VK_HELP |HELP key. [keystate.spf] *CONSTANT
constant VK_HOME |HOME key. [keystate.spf] *CONSTANT
constant VK_INSERT |INS key. [keystate.spf] *CONSTANT
constant VK_LBUTTON |Left Mouse Button. [keystate.spf] *CONSTANT
constant VK_LCONTROL |Left CTRL. [keystate.spf] *CONSTANT
constant VK_LEFT |LEFT ARROW key. [keystate.spf] *CONSTANT
constant VK_LMENU |Left ALT. [keystate.spf] *CONSTANT
constant VK_LSHIFT |Left SHIFT. [keystate.spf] *CONSTANT
constant VK_LWIN |Left Windows key on a Microsoft Natural Keyboard. [keystate.spf] *CONSTANT
constant VK_MBUTTON |Middle Mouse Button on a three-button mouse. [keystate.spf] *CONSTANT
constant VK_MENU |ALT key. [keystate.spf] *CONSTANT
constant VK_MULTIPLY |Multiply key. [keystate.spf] *CONSTANT
constant VK_NEXT |PAGE DOWN key. [keystate.spf] *CONSTANT
constant VK_NONAME |Reserved for future use. [keystate.spf] *CONSTANT
constant VK_NUMLOCK |NUM LOCK key. [keystate.spf] *CONSTANT
constant VK_NUMPAD0 |Numeric keypad 0 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD1 |Numeric keypad 1 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD2 |Numeric keypad 2 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD3 |Numeric keypad 3 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD4 |Numeric keypad 4 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD5 |Numeric keypad 5 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD6 |Numeric keypad 6 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD7 |Numeric keypad 7 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD8 |Numeric keypad 8 key. [keystate.spf] *CONSTANT
constant VK_NUMPAD9 |Numeric keypad 9 key. [keystate.spf] *CONSTANT
constant VK_OEM_CLEAR |CLEAR key. [keystate.spf] *CONSTANT
constant VK_PA1 |PA1 key. [keystate.spf] *CONSTANT
constant VK_PAUSE |PAUSE key. [keystate.spf] *CONSTANT
constant VK_PLAY |PLAY key. [keystate.spf] *CONSTANT
constant VK_PRINT |Specific to original equipment manufacturer. [keystate.spf] *CONSTANT
constant VK_PRIOR |PAGE UP key. [keystate.spf] *CONSTANT
constant VK_PROCESSKEY |Unassigned. [keystate.spf] *CONSTANT
constant VK_RBUTTON |Right Mouse Button. [keystate.spf] *CONSTANT
constant VK_RCONTROL |Right CTRL. [keystate.spf] *CONSTANT
constant VK_RETURN |ENTER key. [keystate.spf] *CONSTANT
constant VK_RIGHT |RIGHT ARROW key. [keystate.spf] *CONSTANT
constant VK_RMENU |Right ALT. [keystate.spf] *CONSTANT
constant VK_RSHIFT |Right SHIFT. [keystate.spf] *CONSTANT
constant VK_RWIN |Right Windows key on a Microsoft Natural Keyboard. [keystate.spf] *CONSTANT
constant VK_SCROLL |SCROLL LOCK key. [keystate.spf] *CONSTANT
constant VK_SELECT |SELECT key. [keystate.spf] *CONSTANT
constant VK_SEPARATOR |Separator key. [keystate.spf] *CONSTANT
constant VK_SHIFT |SHIFT key. [keystate.spf] *CONSTANT
constant VK_SNAPSHOT |PRINT SCREEN key. [keystate.spf] *CONSTANT
constant VK_SPACE |SPACEBAR. [keystate.spf] *CONSTANT
constant VK_SUBTRACT |Subtract key. [keystate.spf] *CONSTANT
constant VK_TAB |TAB key. [keystate.spf] *CONSTANT
constant VK_UP |UP ARROW key. [keystate.spf] *CONSTANT
constant VK_ZOOM |ZOOM key. [keystate.spf] *CONSTANT
define VK_BROWSER_BACK |*#define
define VK_BROWSER_FAVORITES |*#define
define VK_BROWSER_FORWARD |*#define
define VK_BROWSER_HOME |*#define
define VK_BROWSER_REFRESH |*#define
define VK_BROWSER_SEARCH |*#define
define VK_BROWSER_STOP |*#define
define VK_LAUNCH_APP1 |*#define
define VK_LAUNCH_APP2 |*#define
define VK_LAUNCH_MAIL |*#define
define VK_LAUNCH_MEDIA_SELECT |*#define
define VK_MEDIA_NEXT_TRACK |*#define
define VK_MEDIA_PLAY_PAUSE |*#define
define VK_MEDIA_PREV_TRACK |*#define
define VK_MEDIA_STOP |*#define
define VK_VOLUME_DOWN |*#define
define VK_VOLUME_MUTE |*#define
define VK_VOLUME_UP |*#define
cells CRON-ACTION |[1 CELLS] *CELLS
cells CRON-APP-Flags |[1 CELLS] *CELLS
cells CRON-COUNTER |[1 CELLS] *CELLS
cells CRON-CRC32 |[1 CELLS] *CELLS
cells CRON-DAY |[1 CELLS] *CELLS
cells CRON-DOMAIN |[1 CELLS] *CELLS
cells CRON-FILENAME |[1 CELLS] *CELLS
cells CRON-FLAGS |[1 CELLS] *CELLS
cells CRON-HOUR |[1 CELLS] *CELLS
cells CRON-HWINSTA |[1 CELLS] *CELLS
cells CRON-IS-MISSED |[1 CELLS] true if task is missed. *CELLS
cells CRON-LAST-TIME |[1 CELLS] *CELLS
cells CRON-LOGON-FLAGS |[1 CELLS] *CELLS
cells CRON-MIN |[1 CELLS] *CELLS
cells CRON-MISSED |[1 CELLS] If set value is minutes. *CELLS
cells CRON-MON |[1 CELLS] *CELLS
cells CRON-NAME |[1 CELLS] *CELLS
cells CRON-NEXT |[1 CELLS] *CELLS
cells CRON-NEXT-TIME |[1 CELLS] *CELLS
cells CRON-PASSWORD |[1 CELLS] *CELLS
cells CRON-RULE |[1 CELLS] *CELLS
cells CRON-SESSIONID |[1 CELLS] *CELLS
cells CRON-si |[/STARTUPINFO] *CELLS
cells CRON-SU-FLAGS |[1 CELLS] *CELLS
cells CRON-SU-TOKEN |[1 CELLS] *CELLS
cells CRON-T-DAY |[31 bytes] *CELLS
cells CRON-T-HOUR |[24 bytes] *CELLS
cells CRON-TIME-LIST |[1 CELLS] *CELLS
cells CRON-T-MIN |[60 bytes] *CELLS
cells CRON-T-MON |[12 bytes] *CELLS
cells CRON-T-WDAY |[7 bytes] *CELLS
cells CRON-T-YEAR |[YEAR-RANGE 1+] *CELLS
cells CRON-USER |[1 CELLS] *CELLS
cells CRON-WATCH |[1 CELLS] *CELLS
cells CRON-WDAY |[1 CELLS] *CELLS
cells CRON-YEAR |[1 CELLS] *CELLS
cells evClosingRecordNumber |[1 CELLS] Reserved (поле буфера FOUND-EVENT). *CELLS
cells evDataLength |[1 CELLS] Size of the event-specific data (at the position indicated by DataOffset), in bytes (поле буфера FOUND-EVENT). *CELLS
cells evDataOffset |[1 CELLS] Offset of the event-specific information within this event log record, in bytes (поле буфера FOUND-EVENT). *CELLS
cells evEventCategory |[2 bytes] Category for this event (поле буфера FOUND-EVENT). *CELLS
cells evEventID |[2 bytes] Event identifier (поле буфера FOUND-EVENT). *CELLS
cells evEventType |[2 bytes] Type of event (поле буфера FOUND-EVENT). *CELLS
cells evLength |[1 CELLS] Size of this event record, in bytes (поле буфера FOUND-EVENT). *CELLS
cells evNumStrings |[2 bytes] Number of strings present in the log (at the position indicated by StringOffset) (поле буфера FOUND-EVENT). *CELLS
cells evRecordNumber |[1 CELLS] Record number of the record (поле буфера FOUND-EVENT). *CELLS
cells evReserved |[1 CELLS] Reserved (поле буфера FOUND-EVENT). *CELLS
cells evReservedFlags |[1 CELLS] Reserved (поле буфера FOUND-EVENT). *CELLS
cells evStringOffset |[1 CELLS] Offset of the description strings within this event log record (поле буфера FOUND-EVENT). *CELLS
cells evTimeGenerated |[1 CELLS] Time at which this entry was submitted (поле буфера FOUND-EVENT). *CELLS
cells evTimeWritten |[1 CELLS] Time at which this entry was received by the service to be written to the logfile (поле буфера FOUND-EVENT). *CELLS
cells evUserSidLength |[1 CELLS] Size of the UserSid member, in bytes (поле буфера FOUND-EVENT). *CELLS
cells evUserSidOffset |[1 CELLS] Offset of the security identifier (SID) within this event log record (поле буфера FOUND-EVENT). *CELLS
cells FI-CRC32 |*CELLS
cells FI-CREATION-TIME |*CELLS
cells FI-FLAG-EXIST |*CELLS
cells FI-MD5 |*CELLS
cells FI-NAME |*CELLS
cells FI-SIZE |*CELLS
cells FI-WRITE-TIME |*CELLS
task EXEC-ACTION-TASK |*TASK
task EXEC-ACTION-TASK-U |*TASK
object CronIcon |*OBJECT
object fiTable |*OBJECT
class Bevel |*CLASS
class Button |*CLASS
class CheckBox |*CLASS
class Control |( -- char ) Control character number of first character of next word. *CLASS
class CPUUsageObject |*CLASS
class Edit |*CLASS
class ExceedCPUUsageObject |*CLASS
class Font |*CLASS
class FrameWindow |*CLASS
class GroupBox |*CLASS
class HTTPConnection |[http.spf] *CLASS
class INIT |*CLASS
class InputDialog |*CLASS
class ListBox |*CLASS
class PerfObject |*CLASS
class POP3 |*CLASS
class pPerfObject |*CLASS
class ProcCPUUsageObject |*CLASS
class QUEUE |*CLASS
class RadioButton |*CLASS
class RichEdit |*CLASS
class Socket |*CLASS
class SocketLine |[http.spf] *CLASS
class Stack |*CLASS
class Static |*CLASS
class StrRes |*CLASS
class TABLE |*CLASS
class TrayIcon |*CLASS
class WinClass |*CLASS
