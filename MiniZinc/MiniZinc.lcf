object SyntAnal16: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '%.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(["'#39']).*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:=<>\+\-%\|\&\\~!]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ann'
            'annotation'
            'any'
            'constraint'
            'else'
            'endif'
            'for'
            'forall'
            'function'
            'if'
            'in'
            'include'
            'list'
            'maximize'
            'minimize'
            'of'
            'op'
            'output'
            'par'
            'predicate'
            'record'
            'satisfy'
            'solve'
            'test'
            'then'
            'type'
            'var'
            'where')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'array'
            'bool'
            'enum'
            'false'
            'float'
            'int'
            'set'
            'string'
            'true'
            'tuple')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id operators'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'diff'
            'div'
            'in'
            'intersect'
            'mod'
            'not'
            'subset'
            'superset'
            'symdiff'
            'union'
            'xor')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id funcs'
      StyleName = 'Id func'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abort'
            'abs'
            'acos'
            'acosh'
            'all_different'
            'all_disjoint'
            'all_equal'
            'alldifferent'
            'alldifferent_except_0'
            'alternative'
            'among'
            'andub_array'
            'arg_sort'
            'array_intersect'
            'array_union'
            'array1d'
            'array2d'
            'array3d'
            'array4d'
            'array5d'
            'array6d'
            'asin'
            'asinh'
            'assert'
            'at_least'
            'at_most'
            'at_most1'
            'atan'
            'atanh'
            'bin_packing'
            'bin_packing_capa'
            'bin_packing_load'
            'bool2int'
            'card'
            'ceil'
            'circuit'
            'concat'
            'cos'
            'cosh'
            'count'
            'count_eq'
            'count_geq'
            'count_gt'
            'count_leq'
            'count_lt'
            'count_neq'
            'cumulative'
            'decreasing'
            'diffn'
            'diffn_k'
            'diffn_nonstrict'
            'diffn_nonstrict_k'
            'disjoint'
            'disjunctive'
            'disjunctive_strict'
            'distribute'
            'dom'
            'dom_array'
            'dom_size'
            'exactly'
            'exp'
            'fix'
            'floor'
            'geost'
            'geost_bb'
            'geost_smallest_bb'
            'global_cardinality'
            'global_cardinality_closed'
            'global_cardinality_low_up'
            'global_cardinality_low_up_closed'
            'increasing'
            'index_set'
            'index_set_1of2'
            'index_set_1of3'
            'index_set_2of2'
            'index_set_2of3'
            'index_set_3of3'
            'int_set_channel'
            'int2float'
            'inverse'
            'inverse_set'
            'is_fixed'
            'join'
            'knapsack'
            'lb'
            'lb_array'
            'length'
            'lex_greater'
            'lex_greatereq'
            'lex_less'
            'lex_lesseq'
            'lex2'
            'link_set_to_booleans'
            'ln'
            'log'
            'log10'
            'log2'
            'max'
            'maximum'
            'maximum_arg'
            'member'
            'min'
            'minimum'
            'minimum_arg'
            'network_flow'
            'network_flow_cost'
            'nvalue'
            'partition_set'
            'pow'
            'product'
            'range'
            'regular'
            'regular_nfa'
            'roots'
            'round'
            'set2array'
            'show'
            'show_float'
            'show_int'
            'sin'
            'sinh'
            'sliding_sum'
            'sort'
            'span'
            'sqrt'
            'strict_lex2'
            'subcircuit'
            'sum'
            'sum_pred'
            'symmetric_all_different'
            'table'
            'tan'
            'tanh'
            'trace'
            'ub'
            'ub_array'
            'value_precede'
            'value_precede_chain')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'funcs'
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'constraint'
            'function'
            'predicate')
          TokenTypes = 4
        end>
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'nt: n; % no of people'
    'set of int: PERSON = 1..n;'
    'array[PERSON] of int: age;'
    ''
    'include "dd.mzn";'
    'constraint forall(i in 1..n)'
    '                 (i mod 2 = 0 <-> gender[order[i]] = female);'
    ''
    'solve satisfy;'
    ''
    
      'output  [ if i < fix(pref[i,a[i]]) then "(" ++ show(i) ++ "," ++' +
      ' show(pref[i,a[i]]) ++ ")\n"'
    '          else "" endif'
    '        | i in AGENT ]'
    '       ++ [show(rank),"\n"] '
    ' %      ++ [show(npref),"\n"] '
    '        ;'
    '     '
    '')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number')
  Extentions = 'mzn dzn'
  LexerName = 'MiniZinc'
  Notes.Strings = (
    'Alexey (CudaText)')
  LineComment = '%'
  Charset = DEFAULT_CHARSET
end
