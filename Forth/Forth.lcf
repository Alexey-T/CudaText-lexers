object SyntAnal54: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Marked block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clHighlightText
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clHighlight
      FormatType = ftColor
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '\\.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Block begin'
      StyleName = 'Symbol'
      TokenType = 8
      Expression = '^:'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w-]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%\?@~\!'#39']+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 7
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 6
      Expression = '0x[\da-f]+ |'#13#10'0o[0-7]+ |'#13#10'0b[01]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'block begin'
      ConditionList = <
        item
          TokenTypes = 256
        end>
      BlockEnd = 'block end'
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ';')
          TokenTypes = 8
        end>
      BlockEnd = 'block begin'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class begin'
      ConditionList = <
        item
          TagList.Strings = (
            'class')
          TokenTypes = 4
        end>
      BlockEnd = 'class end'
      NameFmt = '%sz0'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endclass')
          TokenTypes = 4
        end>
      BlockEnd = 'class begin'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    ''
    ': pvf ( -- )'
    '    1 abort" pure virtual called" ;'
    #39' pvf constant pvfc'
    ''
    'class Shape'
    '    ivar _x                  \ X position of shape'
    '    ivar _y                  \ Y position of shape'
    '    method MoveTo ( x y )    \ Move to new x,y position'
    '    method RMoveTo ( dx dy ) \ Move relative'
    'endclass'
    ''
    ': Shape::MoveTo ( x y obj -- )'
    '    swap over _y !   _x !'
    '; implements MoveTo')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Hex const'
    'Float const'
    'Block :')
  MarkedBlockStyle = 'Marked block'
  Extentions = 'fs'
  LexerName = 'Forth'
  SkipSpaces = False
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Test:'
    'http://onestepback.org/articles/poly/gp-forth.html')
  LineComment = '\'
  Charset = DEFAULT_CHARSET
end
