object SyntAnal1: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      ChangeCase = ccUpper
    end
    item
      DisplayName = 'Mnemonics'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Registers'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol bad'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BgColor = clYellow
      BorderTypeBottom = blSolid
      BorderColorBottom = clRed
    end>
  TokenRules = <
    item
      DisplayName = 'Labels'
      StyleName = 'Label'
      TokenType = 2
      Expression = '^\x20*\.?[a-z_][\w@]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Binary'
      StyleName = 'Number'
      TokenType = 5
      Expression = '%[01]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\$[0-9a-f]+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') .*? \1'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 3
      Expression = '[a-z_][\w@]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[!&\*\-\+~/\^,\.:\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Invalid symbol'
      StyleName = 'Symbol bad'
      Expression = '.'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      ConditionList = <
        item
          TokenTypes = 4
          IgnoreCase = True
        end>
      NameFmt = '%s0'
      HighlightPos = cpAny
      NoEndRule = True
      TreeItemImage = 6
      TreeGroupImage = 4
      IgnoreAsParent = True
    end
    item
      DisplayName = 'Registers'
      StyleName = 'Registers'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'a'
            'af'
            'b'
            'bc'
            'c'
            'd'
            'de'
            'e'
            'h'
            'hl'
            'sp')
          TokenTypes = 8
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Mnemonics'
      StyleName = 'Mnemonics'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'adc'
            'add'
            'and'
            'bit'
            'call'
            'ccf'
            'cp'
            'cpl'
            'daa'
            'dec'
            'di'
            'ei'
            'halt'
            'inc'
            'jp'
            'jr'
            'ld'
            'ldd'
            'ldh'
            'ldi'
            'nop'
            'or'
            'pop'
            'push'
            'res'
            'ret'
            'reti'
            'rl'
            'rla'
            'rlc'
            'rlca'
            'rr'
            'rra'
            'rrc'
            'rrca'
            'rst'
            'sbc'
            'scf'
            'set'
            'sla'
            'sra'
            'srl'
            'stop'
            'sub'
            'swap'
            'xor')
          TokenTypes = 8
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Pseudops'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'DB'
            'DS'
            'DW'
            'ENDC'
            'ENDM'
            'ENDR'
            'EQU'
            'FAIL'
            'IF'
            'INCBIN'
            'INCLUDE'
            'MACRO'
            'OPT'
            'POPO'
            'PUSHO'
            'REPT'
            'SECTION'
            'SET'
            'WARN')
          TokenTypes = 72
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Macro'
      BlockName = 'Macro'
      StrictParent = True
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TagList.Strings = (
            'macro')
          TokenTypes = 8
          IgnoreCase = True
        end>
      BlockEnd = 'Macro end'
      NameFmt = '%sz-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%sz0'
      TreeItemImage = 3
      TreeGroupImage = 2
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Macro end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'endm')
          TokenTypes = 8
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'ddd::   ;comment'
    '  push bc'
    '  push de'
    '.tick'
    '  ld a, [CurrentBank+1]'
    '  ld [$AF00], a'
    '  ld d, %0110'
    '.loop'
    '  or a'
    '  jr z, .ddddd'
    '# ~ @')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Label'
    'Identifier'
    'String'
    'Number'
    'Symbol')
  Extentions = 'asm s inc'
  LexerName = 'Assembly Z80 RGBDS'
  Notes.Strings = (
    'Alexey (CudaText)'
    'based on Z80 lexer by Black Cat')
  LineComment = ';'
  AlwaysSyncBlockAnal = True
  Charset = DEFAULT_CHARSET
end
