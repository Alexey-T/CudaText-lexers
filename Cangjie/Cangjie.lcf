object SyntAnal7: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id type'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment line'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment block'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String mline'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)("""|'#39#39#39')(\\.|.)*?(\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String mline raw'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)(\#+)("|'#39').*?(\2\1|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?-i)[rb]?("|'#39')(\\.|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '(?-i)0[xX][\d_]*(\.[\d_]+)?([pP]\d[\d_]*)?(f16|f32|f64)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '(?-i)\d[\d_]* (\.[\d_]*)? e[\+\-]? \d+(f16|f32|f64)?\b |'#13#10'(?-i)\' +
        '.[\d_]+ [eE][\+\-]? \d+(f16|f32|f64)?\b |'#13#10'(?-i)\d[\d_]* \. \d[\' +
        'd_]*(f16|f32|f64)?\b |'#13#10'(?-i)\.\d[\d_]*(f16|f32|f64)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num hex/bin/oct'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '0x[\h_]+(i8|i16|i32|i64|u8|u16|u32|u64)?\b|'#13#10'0o[0-7_]+(i8|i16|i3' +
        '2|i64|u8|u16|u32|u64)?\b|'#13#10'0b[01_]+(i8|i16|i32|i64|u8|u16|u32|u6' +
        '4)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Num decimal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d[\d_]*(i8|i16|i32|i64|u8|u16|u32|u64)?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = 
        '\.+|<:|<\-|=>|~>|\*\*=?|'#13#10'[\[\],~\\\?:@]|'#13#10'[\-\+<>\|\&\^]{2}=?|'#13 +
        #10'[\+\-\*/&\|\^!<>=~%]=?'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Id keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'as'
            'break'
            'case'
            'catch'
            'class'
            'const'
            'continue'
            'do'
            'else'
            'enum'
            'extend'
            'false'
            'finally'
            'for'
            'func'
            'if'
            'import'
            'in'
            'init'
            'interface'
            'is'
            'let'
            'macro'
            'main'
            'match'
            'mut'
            'operator'
            'package'
            'prop'
            'quote'
            'redef'
            'return'
            'spawn'
            'struct'
            'super'
            'synchronized'
            'this'
            'throw'
            'true'
            'try'
            'type'
            'var'
            'where'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id modifiers'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'foreign'
            'open'
            'override'
            'private'
            'protected'
            'public'
            'static'
            'unsafe')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Id type'
      StyleName = 'Id type'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'Array'
            'Bool'
            'Byte'
            'Float16'
            'Float32'
            'Float64'
            'Int16'
            'Int32'
            'Int64'
            'Int8'
            'IntNative'
            'List'
            'None'
            'Nothing'
            'Rune'
            'String'
            'This'
            'UInt16'
            'UInt32'
            'UInt64'
            'UInt8'
            'UIntNative'
            'Unit'
            'VArray')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'class/enum'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 12
        end
        item
          TagList.Strings = (
            'class'
            'enum'
            'extend'
            'struct')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s0~[{]1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 0
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 190
        end
        item
          TagList.Strings = (
            'func')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = '%s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0 ...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func main'
      ConditionList = <
        item
          TagList.Strings = (
            'main')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      CollapseFmt = 'main ...'
      NoEndRule = True
      TreeItemImage = 6
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func init'
      ConditionList = <
        item
          TagList.Strings = (
            'init')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      CancelNextRules = True
      NoEndRule = True
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '// Comment'
    'import std.net.{TcpSocket}'
    ''
    'public class Buffer {'
    '    private var idx: Int64 = 0'
    ''
    '    public func readNext(need: Int64): Array<Byte> {'
    '        if (length < need) {'
    '            fill(need)'
    '        }'
    '        return data'
    '    }'
    '}'
    ''
    'let s1: String = #""# + '#39'tt'#39' + "tt" + """test""" + '#39#39#39'test'#39#39#39
    'let s2 = ##'#39'\n'#39'## + r'#39't'#39
    'let s3 = ###"'
    '    Hello,'
    '    Cangjie'
    '    Lang"###'
    '    ')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()')
  Extentions = 'cj'
  LexerName = 'Cangjie'
  Notes.Strings = (
    'Alexey Torgashin (CudaText)'
    
      'Docs: https://docs.cangjie-lang.cn/en/docs/0.53.13/user_manual/s' +
      'ource_en/basic_programming_concepts/identifier.html')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
