object SyntAnal24: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id.'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment mul'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)(?<=\s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id.'
      StyleName = 'Id.'
      TokenType = 7
      Expression = '\B\.([a-z_]\w*)?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x\h+[KM]*\b | (?<!\.)\d+[KM]*\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\];,:] | [\-\+\*/&\|~!]=? | = |<+=? | >+=?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Str'
      StyleName = 'String'
      TokenType = 4
      Expression = '".*?"'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ABSOLUTE'
            'ADDR'
            'ALIGN'
            'AT'
            'BLOCK'
            'BYTE'
            'CREATE_OBJECT_SYMBOLS'
            'DEFINED'
            'ENTRY'
            'FILL'
            'KEEP'
            'LENGTH'
            'LONG'
            'MEMORY'
            'NEXT'
            'ORIGIN'
            'OUTPUT_FORMAT'
            'PROVIDE_HIDDEN'
            'QUAD'
            'SECTIONS'
            'SHORT'
            'SIZEOF'
            'SIZEOF_HEADERS')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpAny
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    ' /* Comment '
    '*/ "Str"'
    'SECTIONS'
    '{'
    '  . = 0x10000 + 077;'
    '  .text : { *(.text) }'
    '  output :'
    '    {'
    '      file1(.text)'
    '      . = . + 1000;'
    '    } = 0x1234;'
    '}'
    ''
    'SECTIONS'
    '{'
    '  .text :'
    '    {'
    '      *(.text)'
    '      _etext = .;'
    '    }'
    '  symbol = a += a -= a *= a /= a <<= a >>= a &= a |= b; '
    '  _bdata = (. + 3) & ~ 4;'
    '  .data : { *(.data) }'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Id.')
  Extentions = 'ld'
  LexerName = 'GNU linker'
  Notes.Strings = (
    'Alexey (CudaText)')
  Charset = DEFAULT_CHARSET
end
