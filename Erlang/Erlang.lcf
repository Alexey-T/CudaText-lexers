object SyntAnal40: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id reserved'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id:Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id Func'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '%.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '('#39'|")(\\\1|.)*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id:Id'
      StyleName = 'Id:Id'
      Expression = '\w+\:\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id Func'
      StyleName = 'Id Func'
      TokenType = 8
      Expression = '^\w+ (?=\()'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_][\w]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\*,\.;:=<>\+\-%\?!\|~\^\$]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 7
      Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 6
      Expression = '\d+\#[\da-f]+ |'#13#10'\$.'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keyw'
      StyleName = 'Id reserved'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'after'
            'and'
            'andalso'
            'band'
            'begin'
            'bnot'
            'bor'
            'bsl'
            'bsr'
            'bxor'
            'case'
            'catch'
            'cond'
            'div'
            'end'
            'export'
            'fun'
            'if'
            'let'
            'module'
            'not'
            'of'
            'or'
            'orelse'
            'query'
            'receive'
            'rem'
            'try'
            'when'
            'xor')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'begin'
      ConditionList = <
        item
          TagList.Strings = (
            'case'
            'fun'
            'receive')
          TokenTypes = 4
        end>
      BlockEnd = 'end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TokenTypes = 256
        end>
      BlockEnd = 'func end'
      EndOfTextClose = True
      NameFmt = '%sz0'
      HighlightPos = cpAny
      SelfClose = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '.')
          TokenTypes = 8
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '-module(count_x).'
    '-author('#39'joe@__'#39').'
    '%% count the number of x'#39's in a file'
    '-export([file/1]).'
    ''
    'file(F) ->'
    '    lists:foldl(fun($x,N) -> N + 1;'
    #9#9'   (_, N) -> N'
    #9'        end,'
    #9#9'0,'
    #9#9'binary_to_list(element(2, file:read_file(F)))).')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Hex const'
    'Float const'
    'Id func')
  Extentions = 'erl'
  LexerName = 'Erlang'
  Notes.Strings = (
    'Author: Alex, uvviewsoft.com'
    'Ref: http://www.erlang.org/doc.html'
    'Test: http://www.erlang.org/article/tag/examples')
  LineComment = '%'
  Charset = DEFAULT_CHARSET
end
