object SyntAnal24: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Comment doc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 11832403
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id modifier'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id types'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id const'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 4210816
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Invalid'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      BorderTypeBottom = blSolid
      BorderColorBottom = clRed
    end
    item
      DisplayName = 'Var'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id@'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment doc'
      StyleName = 'Comment doc'
      TokenType = 1
      Expression = '///(?!/).*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39') (\\\1|\\\\|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = 
        '\d[\d_]*\.[\d_]* (e[\+\-]? [\d_]+)? \b |'#13#10'\d[\d_]* e[\+\-]? [\d_' +
        ']+ \b |'#13#10'\.[\d_]+ e[\+\-]? [\d_]+ \b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[0-9a-f_]*(\.[0-9a-f_]*)? p[\+\-]? [0-9_]+ i?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f_]+ i?\b |'#13#10'0o[0-7_]+ i?\b |'#13#10'0b[01_]+ i?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Octal'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b0[0-7_]*i?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Int'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\b[1-9][\d_]*i?\b'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Invalid number'
      StyleName = 'Invalid'
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@keyword'
      StyleName = 'Id keyword'
      TokenType = 8
      Expression = '@cImport|@cInclude|@import'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '@Id'
      StyleName = 'Id@'
      TokenType = 10
      Expression = '@[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      TokenType = 9
      Expression = ':[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String \\'
      StyleName = 'String'
      TokenType = 4
      Expression = '\\\\.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol {}'
      StyleName = 'Symbol'
      TokenType = 6
      Expression = '[\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol ()'
      StyleName = 'Symbol'
      TokenType = 7
      Expression = '[\(\)]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol single'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '\.\?| \.\*| [\[\],;\.\?@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*=<>&/\|\^\$!%:~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'and'
            'asm'
            'async'
            'await'
            'break'
            'catch'
            'const'
            'continue'
            'defer'
            'else'
            'enum'
            'errdefer'
            'fn'
            'for'
            'if'
            'nosuspend'
            'or'
            'orelse'
            'resume'
            'return'
            'struct'
            'suspend'
            'switch'
            'test'
            'try'
            'union'
            'unreachable'
            'usingnamespace'
            'var'
            'while')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id modifier'
      StyleName = 'Id modifier'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align'
            'allowzero'
            'comptime'
            'export'
            'extern'
            'inline'
            'linksection'
            'noalias'
            'noinline'
            'packed'
            'pub'
            'threadlocal'
            'volatile')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id const'
      StyleName = 'Id const'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'false'
            'null'
            'true'
            'undefined')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'id types'
      StyleName = 'Id types'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'anyerror'
            'anyframe'
            'anytype'
            'bool'
            'c_int'
            'c_long'
            'c_longdouble'
            'c_longlong'
            'c_short'
            'c_uint'
            'c_ulong'
            'c_ulonglong'
            'c_ushort'
            'c_void'
            'comptime_float'
            'comptime_int'
            'error'
            'f128'
            'f16'
            'f32'
            'f64'
            'i128'
            'i16'
            'i32'
            'i64'
            'i8'
            'isize'
            'noreturn'
            'type'
            'u128'
            'u16'
            'u24'
            'u32'
            'u64'
            'u8'
            'usize'
            'void')
          TokenTypes = 4
        end>
      DynHighlight = dhRange
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'func'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 142
        end
        item
          TagList.Strings = (
            'fn')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'fn %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0...'
      TreeItemImage = 5
      IgnoreAsParent = False
    end
    item
      DisplayName = 'struct'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 2
        end
        item
          TagList.Strings = (
            'struct')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'struct %s2'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0...'
      TreeItemImage = 1
      IgnoreAsParent = False
    end
    item
      DisplayName = 'tst'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end
        item
          CondType = tcSkip
          TokenTypes = 30
        end
        item
          TagList.Strings = (
            'test')
          TokenTypes = 4
        end>
      BlockEnd = '}'
      NameFmt = 'test %s-1'
      RefToCondEnd = True
      HighlightPos = cpAny
      CancelNextRules = True
      DrawStaple = True
      CollapseFmt = '%sz0...'
      TreeItemImage = 6
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 64
        end>
      BlockEnd = '}'
      DisplayInTree = False
      HighlightPos = cpRange
      DrawStaple = True
      CollapseFmt = '{ ... }'
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 64
        end>
      BlockEnd = '{'
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '//comment'
    '///doc comment'
    ':label @TypeOf(x)'
    'const std = @import("std");'
    'const B = struct {'
    '    q: u32,  w: i128,'
    '};'
    'test "bug 20" {'
    '    var b = B{ .q = 22, .a = 3, .b = 2 };'
    '    const ptr = switch (t) {'
    '        0xFFAB => &a.a,'
    '        s => \\some string'
    '    };'
    '}'
    'pub fn fname() {'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Symbol {}'
    'Symbol ()'
    'Keyword'
    'Label'
    '@Id')
  Extentions = 'zig'
  LexerName = 'Zig'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Docs: https://ziglang.org/documentation/master/')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
