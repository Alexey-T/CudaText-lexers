#chars #*@

Class _BaseCompiler (  ) ---> Abstract base class for the @a Compiler and @a ICompiler classes.
Class AccessError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error accessing an indexed item. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Adler32 (  ) ---> Calculates a 32 bits long Adler32 checksum
Class Array (  ) ---> MetaClass for Falcon arrays.
Class Barrier ( Set to true to initialize the barrier to open. ) ---> Gate controlling the transit of threads for certain operations. : Set to true to initialize the barrier to open. = 
Class Base64 (  ) ---> Collection of methods to handle rfc3548 Base64 encoding.
Class BitBuf (  ) ---> Flexible memory buffer optimized for bit-precise binary mangling
Class BOM (  ) ---> Basic Object Model metaclass
Class BSON ( An integer (reserved space for internal buffer) or a dict to append. ) ---> Represents a BSON object. : An integer (reserved space for internal buffer) or a dict to append. = 
Class BSONIter ( bson ) ---> Iterator for BSON objects : bson = A BSON object
Class BufferError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by buffer I/O related failures. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class ByteBuf ( [sizeOrObject], [extrasizeOrAdopt] ) ---> Flexible memory buffer optimized for binary mangling : [sizeOrObject] = , [extrasizeOrAdopt] = 
Class ByteBufBigEndian (  ) ---> A specialized ByteBuf that stores data in big endian.
Class ByteBufLittleEndian (  ) ---> A specialized ByteBuf that stores data in little endian.
Class ByteBufNativeEndian (  ) ---> A specialized ByteBuf that stores data in native endian.
Class ByteBufReverseEndian (  ) ---> A specialized ByteBuf that stores data in reversed endian.
Class Class (  ) ---> Metaclass of Class items.
Class ClassMethod (  ) ---> Metaclass of ClassMethod items.
Class CloneError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Item cannot be cloned. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class CmdlineParser (  ) ---> Provides simple and powerful parsing of the command line options.
Class CodeError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> VM and internal coded related error descriptor. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Compiler ( The default search path of the compiler. ) ---> Main interface to the reflexive compiler. : The default search path of the compiler. = 
Class ConfParser ( The name of the ini file to be parsed, if it exists., An optional non default encoding which is used for that file. ) ---> Interface to configuration files. : The name of the ini file to be parsed, if it exists. = , An optional non default encoding which is used for that file. = 
Class ConioError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated because of problems on the console I/O. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Continuation ( callable ) ---> Intra-context suspension and resume control device. : callable = A function or any callable item.
Class CRC32 (  ) ---> Calculates a 32 bits long CRC32 checksum
Class CurlError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by cURL while operating. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class DBIError (  ) ---> DBI specific error.
Class DBus (  ) ---> Opens the connection to the DBUS system. in case of failure., an DBusError is raised.
Class DBusError ( Error code, Error description, Extra description of specific error condition. ) ---> DBus specific error. : Error code = , Error description = , Extra description of specific error condition. = 
Class DBusMessage (  ) ---> Handle dbus messages
Class DBusPendingCall (  ) ---> Handle for currently open method calls.
Class Dictionary (  ) ---> Metaclass for Falcon dictionary types.
Class Directory ( dirname ) ---> Special iterator to access directory listings. on failure., an IoError is raised. : dirname = A relative or absolute path to a directory
Class Doc (  ) ---> Used to operate on a document object.
Class DynFunction (  ) ---> Internal representation of dynamically loaded functions.
Class DynLib ( path ) ---> Creates a reference to a dynamic library. on load failed., an DynLibError is raised. : path = The path from which to load the library (local system).
Class DynLibError ( Error code, Error description, Extra description of specific error condition. ) ---> DynLib specific error. : Error code = , Error description = , Extra description of specific error condition. = 
Class DynOpaque (  ) ---> Opaque remote data "pseudo-class" encapsulator.
Class Error ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Internal VM and runtime error reflection class. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Event ( Set to true to create a manual reset event. ) ---> Signaler of relevant processing conditions. : Set to true to create a manual reset event. = 
Class FileStat ( If given, the filestats will be initialized with stats of the given file. ) ---> Class holding informations on system files. if @b path is given but not found., an IoError is raised. : If given, the filestats will be initialized with stats of the given file. = 
Class Firebird ( connect ) ---> Direct interface to Firebird database. : connect = String containing connection parameters.
Class Font (  ) ---> todo.
Class Format ( If provided, must be a valid format specifier ) ---> Controls the rendering of items into strings. : If provided, must be a valid format specifier = 
Class Function (  ) ---> Metaclass for Falcon function type.
Class GarbagePointer (  ) ---> Metaclass for internal and application-wide garbage sensible data.
Class GdkBitmap ( drawable, data, width, height ) ---> An opaque structure representing an offscreen drawable of depth 1. : drawable = a GdkDrawable, used to determine default values for the new pixmap. Can be NULL, in which case the root window is used., data = a pointer to the XBM data., width = the width of the new pixmap in pixels., height = the height of the new pixmap in pixels.
Class GdkColor ( For allocated colors, the value used to draw this color on the screen., The red component of the color. This is a value between 0 and 65535, with 65535 indicating full intensitiy., The green component of the color., The blue component of the color. ) ---> The GdkColor structure is used to describe an allocated or unallocated color. : For allocated colors, the value used to draw this color on the screen. = , The red component of the color. This is a value between 0 and 65535, with 65535 indicating full intensitiy. = , The green component of the color. = , The blue component of the color. = 
Class GdkColormap ( visual, allocate ) ---> The GdkColormap structure is used to describe an allocated or unallocated color. : visual = a GdkVisual., allocate = if true, the newly created colormap will be a private colormap, and all colors in it will be allocated for the applications use.
Class GdkCursor ( cursor_type ) ---> Standard and pixmap cursors : cursor_type = cursor to create (GdkCursorType).
Class GdkDisplay ( display_name ) ---> An opaque structure representing an offscreen drawable of depth 1. : display_name = the name of the display to open
Class GdkDragContext (  ) ---> A GdkDragContext holds information about a drag in progress.
Class GdkDrawable (  ) ---> Functions for drawing points, lines, arcs, and text
Class GdkEvent ( type ) ---> Functions for handling events from the window system : type = a GdkEventType
Class GdkEventButton ( One ) ---> Used for button press and button release events. : One = type of the event-button types (GDK_BUTTON_PRESS, GDK_2BUTTON_PRESS, GDK_3BUTTON_PRESS or GDK_BUTTON_RELEASE).
Class GdkGC ( drawable ) ---> Objects to encapsulate drawing properties : drawable = a GdkDrawable. The created GC must always be used with drawables of the same depth as this one.
Class GdkGCValues (  ) ---> The GdkGCValues structure holds a set of values used to create or modify a graphics context.
Class GdkGeometry ( minimum width of window (or -1 to use requisition, with GtkWindow only), minimum height of window (or -1 to use requisition, with GtkWindow only), maximum width of window (or -1 to use requisition, with GtkWindow only), maximum height of window (or -1 to use requisition, with GtkWindow only), allowed window widths are base_width + width_inc * N where N is any integer (-1 allowed with GtkWindow), allowed window widths are base_height + height_inc * N where N is any integer (-1 allowed with GtkWindow), width resize increment, height resize increment, minimum width/height ratio, maximum width/height ratio, window gravity (GdkGravity), see gtk_window_set_gravity() ) ---> The GdkGeometry struct gives the window manager information about a window's geometry constraints. : minimum width of window (or -1 to use requisition, with GtkWindow only) = , minimum height of window (or -1 to use requisition, with GtkWindow only) = , maximum width of window (or -1 to use requisition, with GtkWindow only) = , maximum height of window (or -1 to use requisition, with GtkWindow only) = , allowed window widths are base_width + width_inc * N where N is any integer (-1 allowed with GtkWindow) = , allowed window widths are base_height + height_inc * N where N is any integer (-1 allowed with GtkWindow) = , width resize increment = , height resize increment = , minimum width/height ratio = , maximum width/height ratio = , window gravity (GdkGravity), see gtk_window_set_gravity() = 
Class GdkPixbuf (  ) ---> Information that describes an image.
Class GdkPixmap ( drawable, width, height, depth ) ---> Offscreen drawables. : drawable = A GdkDrawable, used to determine default values for the new pixmap. Can be NULL if depth is specified., width = The width of the new pixmap in pixels., height = The height of the new pixmap in pixels., depth = The depth (number of bits per pixel) of the new pixmap. If -1, and drawable is not NULL, the depth of the new pixmap will be equal to that of drawable.
Class GdkPoint ( the x coordinate of the point., the y coordinate of the point. ) ---> Defines the x and y coordinates of a point. : the x coordinate of the point. = , the y coordinate of the point. = 
Class GdkRectangle ( the x coordinate of the left edge of the rectangle., the y coordinate of the top of the rectangle., the width of the rectangle., the height of the rectangle. ) ---> GdkRectangle is a structure holding the position and size of a rectangle. : the x coordinate of the left edge of the rectangle. = , the y coordinate of the top of the rectangle. = , the width of the rectangle. = , the height of the rectangle. = 
Class GdkRegion (  ) ---> A GdkRegion represents a set of pixels on the screen.
Class GdkScreen (  ) ---> Object representing a physical screen
Class GdkVisual (  ) ---> Low-level display hardware information
Class GdkWindow (  ) ---> Onscreen display areas in the target window system
Class GenericError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Generic undefined failure. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class GObject (  ) ---> The base object type
Class GParamSpec (  ) ---> Metadata for parameter specifications
Class Grant (  ) ---> Grant for exclusive access to shared resources.
Class GtkAboutDialog (  ) ---> Display information about an application
Class GtkAction ( name, the label displayed in menu items and on buttons, a tooltip for the action, the stock icon to display in widgets representing the action ) ---> An action which can be triggered by a menu or toolbar item : name = A unique name for the action, the label displayed in menu items and on buttons = , a tooltip for the action = , the stock icon to display in widgets representing the action = 
Class GtkActivatable (  ) ---> An interface for activatable widgets
Class GtkAdjustment ( the current value., the minimum value., the maximum value., the increment to use to make minor changes to the value. In a GtkScrollbar this increment is used when the mouse is clicked on the arrows at the top and bottom of the scrollbar, to scroll by a small amount., the increment to use to make major changes to the value. In a GtkScrollbar this increment is used when the mouse is clicked in the trough, to scroll by a large amount., the page size. In a GtkScrollbar this is the size of the area which is currently visible. ) ---> A GtkObject representing an adjustable bounded value : the current value. = , the minimum value. = , the maximum value. = , the increment to use to make minor changes to the value. In a GtkScrollbar this increment is used when the mouse is clicked on the arrows at the top and bottom of the scrollbar, to scroll by a small amount. = , the increment to use to make major changes to the value. In a GtkScrollbar this increment is used when the mouse is clicked in the trough, to scroll by a large amount. = , the page size. In a GtkScrollbar this is the size of the area which is currently visible. = 
Class GtkAlignment ( the horizontal alignment of the child widget, from 0 (left) to 1 (right)., the vertical alignment of the child widget, from 0 (top) to 1 (bottom)., the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the GtkAlignment., the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to xscale. ) ---> A widget which controls the alignment and size of its child : the horizontal alignment of the child widget, from 0 (left) to 1 (right). = , the vertical alignment of the child widget, from 0 (top) to 1 (bottom). = , the amount that the child widget expands horizontally to fill up unused space, from 0 to 1. A value of 0 indicates that the child widget should never expand. A value of 1 indicates that the child widget will expand to fill all of the space allocated for the GtkAlignment. = , the amount that the child widget expands vertically to fill up unused space, from 0 to 1. The values are similar to xscale. = 
Class GtkArrow ( a valid GtkArrowType (default GTK_ARROW_NONE), a valid GtkShadowType (default GTK_SHADOW_NONE) ) ---> Displays an arrow : a valid GtkArrowType (default GTK_ARROW_NONE) = , a valid GtkShadowType (default GTK_SHADOW_NONE) = 
Class GtkAspectFrame ( Label text., Horizontal alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned), Vertical alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned), The desired aspect ratio., If true, ratio is ignored, and the aspect ratio is taken from the requistion of the child. ) ---> A frame that constrains its child to a particular aspect ratio : Label text. = , Horizontal alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned) = , Vertical alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned) = , The desired aspect ratio. = , If true, ratio is ignored, and the aspect ratio is taken from the requistion of the child. = 
Class GtkBin (  ) ---> The GtkBin widget is a container with just one child.
Class GtkBox (  ) ---> Base class for box containers
Class GtkBuildable (  ) ---> Interface for objects that can be built by GtkBuilder
Class GtkButton (  ) ---> A widget that creates a signal when clicked on
Class GtkButtonBox (  ) ---> Base class for GtkHButtonBox and GtkVButtonBox
Class GtkCellEditable (  ) ---> Interface for widgets which can are used for editing cells
Class GtkCellRenderer (  ) ---> An object for rendering a single cell on a GdkDrawable
Class GtkCellRendererAccel (  ) ---> Renders a keyboard accelerator in a cell
Class GtkCellRendererCombo (  ) ---> Renders a combobox in a cell
Class GtkCellRendererPixbuf (  ) ---> Renders a pixbuf in a cell
Class GtkCellRendererProgress (  ) ---> Renders numbers as progress bars
Class GtkCellRendererSpin (  ) ---> Renders a spin button in a cell
Class GtkCellRendererSpinner (  ) ---> Renders a spinning animation in a cell
Class GtkCellRendererText (  ) ---> Renders text in a cell
Class GtkCellRendererToggle (  ) ---> Renders a toggle button in a cell
Class GtkCheckButton (  ) ---> Create widgets with a discrete toggle button
Class GtkCheckMenuItem (  ) ---> A menu item with a check box
Class GtkColorButton (  ) ---> A button to launch a color selection dialog
Class GtkColorSelectionDialog ( title ) ---> A standard dialog box for selecting a color : title = a string containing the title text for the dialog (or nil).
Class GtkComboBox (  ) ---> A widget used to choose from a list of items
Class GtkComboBoxEntry (  ) ---> A text entry field with a dropdown list
Class GtkContainer (  ) ---> Abstract container class.
Class GtkDialog (  ) ---> Create popup windows
Class GtkEditable (  ) ---> Interface for text-editing widgets
Class GtkEntry (  ) ---> A single line text entry field
Class GtkEntryBuffer ( (string) Optionally, specify initial text to set in the buffer. ) ---> Text buffer for GtkEntry : (string) Optionally, specify initial text to set in the buffer. = 
Class GtkError ( numeric error code, textual description of the error code, descriptive message explaining the error conditions ) ---> Error generated by falcon-gtk : numeric error code = , textual description of the error code = , descriptive message explaining the error conditions = 
Class GtkEventBox (  ) ---> A widget used to catch events for widgets which do not have their own window
Class GtkExpander ( the text of the label ) ---> A container which can hide its child : the text of the label = 
Class GtkFileChooser (  ) ---> File chooser interface used by GtkFileChooserWidget and GtkFileChooserDialog
Class GtkFileChooserButton ( title, action ) ---> A button to launch a file selection dialog : title = the title of the browse dialog., action = the open mode for the widget (GtkFileChooserAction).
Class GtkFileChooserDialog ( title, parent, action ) ---> A file chooser dialog, suitable for "File/Open" or "File/Save" commands : title = Title of the dialog, or nil., parent = Transient parent of the dialog (GtkWindow), or nil., action = Open or save mode for the dialog (GtkFileChooserAction)
Class GtkFileFilter (  ) ---> A filter for selecting a file subset
Class GtkFileFilterInfo (  ) ---> A GtkFileFilterInfo struct is used to pass information about the tested file to gtk_file_filter_filter().
Class GtkFixed (  ) ---> A container which allows you to position widgets at fixed coordinates
Class GtkFontButton (  ) ---> A button to launch a font selection dialog.
Class GtkFrame ( the text to use as the label of the frame ) ---> A bin with a decorative frame and optional label : the text to use as the label of the frame = 
Class GtkHBox ( (boolean, default true), (integer, default 0) ) ---> Horizontal box : (boolean, default true) = , (integer, default 0) = 
Class GtkHButtonBox (  ) ---> Horizontal button box container.
Class GtkHPaned (  ) ---> A container with two panes arranged horizontally
Class GtkHRuler (  ) ---> A horizontal ruler
Class GtkHScale ( adjustment ) ---> A horizontal slider widget for selecting a value from a range : adjustment = the GtkAdjustment which sets the range of the scale.
Class GtkHScrollbar ( adjustment ) ---> A horizontal scrollbar : adjustment = the GtkAdjustment to use, or NULL to create a new adjustment
Class GtkImage ( a filename (string) ) ---> A widget displaying an image : a filename (string) = 
Class GtkImageMenuItem (  ) ---> A menu item with an icon
Class GtkInfoBar (  ) ---> Report important messages to the user
Class GtkInvisible (  ) ---> A widget which is not displayed
Class GtkItem (  ) ---> Abstract base class for GtkItemItem, GtkListItem and GtkTreeItem
Class GtkLabel ( (string), (boolean, default false) ) ---> The GtkLabel widget displays a small amount of text. : (string) = , (boolean, default false) = 
Class GtkLayout ( (GtkAdjustment) horizontal scroll adjustment, (GtkAdjustment) vertical scroll adjustment ) ---> Infinite scrollable area containing child widgets and/or custom drawing : (GtkAdjustment) horizontal scroll adjustment = , (GtkAdjustment) vertical scroll adjustment = 
Class GtkLinkButton ( uri ) ---> Create buttons bound to a URL : uri = a valid URI string
Class GtkListStore ( types ) ---> A list-like data structure that can be used with the GtkTreeView : types = an array of GType
Class GtkMain ( List of command-line arguments (array of strings), Set the locale before init (boolean, default true) ) ---> Initialize gtk and prepare the main loop on init failure, an GtkError is raised. : List of command-line arguments (array of strings) = , Set the locale before init (boolean, default true) = 
Class GtkMenu (  ) ---> A menu widget
Class GtkMenuBar (  ) ---> A subclass widget for GtkMenuShell which holds GtkMenuItem widgets
Class GtkMenuItem (  ) ---> The widget used for item in menus
Class GtkMenuShell (  ) ---> A base class for menu objects.
Class GtkMenuToolButton ( icon_widget, label ) ---> A GtkToolItem containing a button with an additional dropdown menu : icon_widget = a widget that will be used as icon widget, or NULL., label = a string that will be used as label, or NULL.
Class GtkMessageDialog ( parent, flags, type, buttons, message ) ---> A convenient message window : parent = transient parent (GtkWindow), or nil for none., flags = flags (GtkDialogFlags), type = type of message (GtkMessageType), buttons = set of buttons to use (GtkButtonsType), message = message string, or nil.
Class GtkMisc (  ) ---> Base class for widgets with alignments and padding.
Class GtkObject (  ) ---> The base class of the GTK+ type hierarchy
Class GtkOptionMenu (  ) ---> A widget used to choose from a list of valid choices
Class GtkOrientable (  ) ---> An interface for flippable widgets
Class GtkPaned (  ) ---> Base class for widgets with two adjustable panes
Class GtkProgress (  ) ---> Base class for GtkProgressBar
Class GtkProgressBar (  ) ---> A widget which indicates progress visually
Class GtkRadioAction ( name, The label displayed in menu items and on buttons, A tooltip for the action, The stock icon to display in widgets representing the action, value ) ---> An action of which only one in a group can be active : name = A unique name for the action, The label displayed in menu items and on buttons = , A tooltip for the action = , The stock icon to display in widgets representing the action = , value = (integer) The value which get_current_value() should return if this action is selected.
Class GtkRadioButton ( radio_group_member ) ---> A choice from multiple check buttons : radio_group_member = an existing GtkRadioButton, or nil if you are creating a new group.
Class GtkRadioMenuItem ( group ) ---> A choice from multiple check menu items : group = An existing GtkRadioMenuItem, or nil to make a new group of items.
Class GtkRadioToolButton ( group ) ---> A toolbar item that contains a radio button : group = An existing GtkRadioToolButton, or nil to create a new group of buttons.
Class GtkRange (  ) ---> Base class for widgets which visualize an adjustment
Class GtkRecentFilter (  ) ---> A filter for selecting a subset of recently used files
Class GtkRecentFilterInfo (  ) ---> A GtkRecentFilterInfo struct is used to pass information about the tested file to gtk_recent_filter_filter().
Class GtkRequisition ( [width], [height] ) ---> A GtkRequisition represents the desired size of a widget. : [width] = , [height] = 
Class GtkRuler (  ) ---> Base class for horizontal or vertical rulers
Class GtkScale (  ) ---> Base class for GtkHScale and GtkVScale
Class GtkScaleButton ( size, min, max, step, icons ) ---> A button which pops up a scale : size = a stock icon size (GtkIconSize)., min = the minimum value of the scale (usually 0), max = the maximum value of the scale (usually 100), step = the stepping of value when a scroll-wheel event, or up/down arrow event occurs (usually 2), icons = an array of icon names (strings), or nil if you want to set the list later with set_icons().
Class GtkScrollbar ( orientation, adjustment ) ---> Base class for GtkHScrollbar and GtkVScrollbar : orientation = the scrollbar's orientation (GtkOrientation)., adjustment = the GtkAdjustment to use, or NULL to create a new adjustment.
Class GtkSeparatorMenuItem (  ) ---> A separator used in menus
Class GtkSeparatorToolItem (  ) ---> A toolbar item that separates groups of other toolbar items
Class GtkSpinButton ( adjustment, climb_rate, digits ) ---> Retrieve an integer or floating-point number from the user : adjustment = a GtkAdjustment, or nil., climb_rate = the new climb rate., digits = the number of decimal places to display in the spin button.
Class GtkStatusbar (  ) ---> Report messages of minor importance to the user
Class GtkTable ( The number of rows the new table should have (default 0)., The number of columns the new table should have (default 0)., (default false) If set to true, all table cells are resized to the size of the cell containing the largest widget. ) ---> Pack widgets in regular patterns : The number of rows the new table should have (default 0). = , The number of columns the new table should have (default 0). = , (default false) If set to true, all table cells are resized to the size of the cell containing the largest widget. = 
Class GtkTearoffMenuItem (  ) ---> A menu item used to tear off and reattach its menu
Class GtkTextBuffer ( (GtkTextTable) a tag table, or nil to create a new one. ) ---> Stores attributed text for display in a GtkTextView : (GtkTextTable) a tag table, or nil to create a new one. = 
Class GtkTextIter ( (GtkTextTable) a tag table, or nil to create a new one. ) ---> Text buffer iterator : (GtkTextTable) a tag table, or nil to create a new one. = 
Class GtkTextMark ( mark name or nil., (boolean) whether the mark should have left gravity (default false) ) ---> A position in the buffer preserved across buffer modifications : mark name or nil. = , (boolean) whether the mark should have left gravity (default false) = 
Class GtkTextTag ( tag name ) ---> A tag that can be applied to text in a GtkTextBuffer : tag name = 
Class GtkTextTagTable (  ) ---> Collection of tags that can be used together
Class GtkTextView (  ) ---> Widget that displays a GtkTextBuffer
Class GtkToggleAction ( A unique name for the action, The label displayed in menu items and on buttons, A tooltip for the action, The stock icon to display in widgets representing the action ) ---> An action which can be toggled between two states : A unique name for the action = , The label displayed in menu items and on buttons = , A tooltip for the action = , The stock icon to display in widgets representing the action = 
Class GtkToggleButton (  ) ---> Create buttons which retain their state
Class GtkToggleToolButton (  ) ---> A GtkToolItem containing a toggle button
Class GtkToolbar (  ) ---> Create bars of buttons and other widgets
Class GtkToolButton ( icon_widget, label ) ---> A GtkToolItem subclass that displays buttons : icon_widget = a GtkMisc widget that will be used as icon widget, or NULL., label = a string that will be used as label, or NULL.
Class GtkToolItem (  ) ---> The base class of widgets that can be added to GtkToolShell
Class GtkToolItemGroup ( label ) ---> A sub container used in a tool palette : label = the label of the new group
Class GtkToolPalette (  ) ---> A tool palette with categories
Class GtkToolShell (  ) ---> Interface for containers containing GtkToolItem widgets
Class GtkTreeIter (  ) ---> The GtkTreeIter is the primary structure for accessing a structure (model).
Class GtkTreeModel (  ) ---> The GtkTreeModel interface defines a generic tree interface for use by the GtkTreeView widget.
Class GtkTreeModelFilter ( child_model, root ) ---> A GtkTreeModel which hides parts of an underlying tree model : child_model = A GtkTreeModel., root = A GtkTreePath or NULL.
Class GtkTreeModelSort ( child_model ) ---> A GtkTreeModel which makes an underlying tree model sortable : child_model = A GtkTreeModel
Class GtkTreePath (  ) ---> This structure refers to a row.
Class GtkTreeRowReference ( model, path ) ---> Creates a row reference based on path. if the path is invalid, an ParamError is raised. : model = A GtkTreeModel, path = A valid GtkTreePath to monitor
Class GtkTreeSortable (  ) ---> The interface for sortable models used by GtkTreeView
Class GtkTreeStore ( types ) ---> A tree-like data structure that can be used with the GtkTreeView : types = an array of all GType types for the columns, from first to last
Class GtkTreeView (  ) ---> A widget for displaying both trees and lists
Class GtkTreeViewColumn (  ) ---> A visible column in a GtkTreeView widget
Class GtkVBox ( (boolean, default true), (integer, default 0) ) ---> Vertical box class : (boolean, default true) = , (integer, default 0) = 
Class GtkVButtonBox (  ) ---> Vertical button box container.
Class GtkVolumeButton (  ) ---> A button which pops up a volume control
Class GtkVPaned (  ) ---> A container with two panes arranged vertically
Class GtkVRuler (  ) ---> A vertical ruler
Class GtkVScale ( adjustment ) ---> A vertical slider widget for selecting a value from a range : adjustment = the GtkAdjustment which sets the range of the scale.
Class GtkVScrollbar ( adjustment ) ---> A vertical scrollbar : adjustment = the GtkAdjustment to use, or NULL to create a new adjustment
Class GtkWidget (  ) ---> Base class for all widgets
Class GtkWindow ( GTK_WINDOW_TOPLEVEL (default) or GTK_WINDOW_POPUP ) --->  : GTK_WINDOW_TOPLEVEL (default) or GTK_WINDOW_POPUP = 
Class GtkWindowGroup (  ) ---> Limit the effect of grabs
Class Handle (  ) ---> DBI connection handle returned by @a connect.
Class Handle ( A string or an URI to be used to initialize the connection. ) ---> Stores an handle for a CURL (easy) connection. : A string or an URI to be used to initialize the connection. = 
Class HashBase (  ) ---> Base class for each hash algorithm, specialized for overloading.
Class ICompiler ( The default search path of the compiler. ) ---> Interaface to incremental evaluator. : The default search path of the compiler. = 
Class IMAGE (  ) ---> Main SDL IMAGE encapsulation class.
Class Integer (  ) ---> Integer type basic object model metaclass.
Class InterruptedError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Wait operation interrupted. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class IoError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error on I/O operations. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Iterator ( collection, Indicator for start position. ) ---> Indirect pointer to sequences. : collection = The collection on which to iterate., Indicator for start position. = 
Class JoinError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated when trying to wait for a unwaitable thread. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class JSONError ( The error code, The description for the error code, Extra information specifying the error conditions. ) ---> Error generated after error conditions on JSON operations. : The error code = , The description for the error code = , Extra information specifying the error conditions. = 
Class LateBinding (  ) ---> Metaclass for LateBinding type.
Class List ( ... ) ---> Fast growable double linked list. : ... = An arbitrary list of parameters.
Class LogArea ( name ) ---> Collection of log channels. : name = The name of the area.
Class LogChannel (  ) ---> Abstract class receiving log requests from log areas.
Class LogChannelFiles ( path, Minimum severity level logged by this channel., Message formatting used by this channel., Number of maximum log files generated by this channel., Maximum size of each file., Maximum days of lifetime for each file., If true, overwrite the base log file on open, if found., If false, do NOT flush at every log entry. ) ---> Log channel sending logs to a set of (possibly) rotating local files. : path = The complete filename were the logs are to be sent., Minimum severity level logged by this channel. = , Message formatting used by this channel. = , Number of maximum log files generated by this channel. = , Maximum size of each file. = , Maximum days of lifetime for each file. = , If true, overwrite the base log file on open, if found. = , If false, do NOT flush at every log entry. = 
Class LogChannelStream ( stream, level, a format for the log. ) ---> Logs on an open stream. : stream = the stream where to log., level = the log level., a format for the log. = 
Class LogChannelSyslog ( identity, facility, level, a format for the log. ) ---> Logs on the local system logger facility. : identity = Name of the application as known by the logging system., facility = Numeric facility or log type code., level = the log level., a format for the log. = 
Class MathError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Mathematical calculation error. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class MD2Hash (  ) ---> Calculates a 128 bits long MD2 (Message Digest 2) hash
Class MD4Hash (  ) ---> Calculates a 128 bits long MD4 (Message Digest 4) hash
Class MD5Hash (  ) ---> Calculates a 128 bits long MD5 (Message Digest 5) hash
Class MemoryBuffer (  ) ---> Metaclass for MemBuf items.
Class MessageError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error in the messaging system. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Method (  ) ---> Metaclass of method items.
Class MIX (  ) ---> Main SDL Mixer encapsulation class.
Class MixChunk (  ) ---> SDL Mixer Chunk encapsulation class.
Class MixMusic (  ) ---> SDL Mixer Music encapsulation class.
Class Module (  ) ---> Handle to loaded modules.
Class MongoDB ( default to localhost., default to 27017. ) ---> Create a client connection to a MongoDB database. : default to localhost. = , default to 27017. = 
Class MongoDBError ( The error code, The description for the error code, Extra information specifying the error conditions. ) ---> Error generated MongoDB operations. : The error code = , The description for the error code = , Extra information specifying the error conditions. = 
Class MXMLDocument ( Encoding suggested for document load or required for document write., Style required in document write. ) ---> Encapsulates a complete XML document. : Encoding suggested for document load or required for document write. = , Style required in document write. = 
Class MXMLError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error raised by the MXML module in case of problems. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class MXMLNode ( type, Name of the node, if this is a tag node., Optional data content attached to this node.. ) ---> Minimal entity of the XML document. if the type is invalid., an ParamError is raised. : type = One of the node type defined by the @a MXMLType enumeration., Name of the node, if this is a tag node. = , Optional data content attached to this node.. = 
Class MySQL ( connect ) ---> Direct interface to MySQL database. : connect = String containing connection parameters.
Class NetError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by network related system failures. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Numeric (  ) ---> Generic number type basic object model metaclass.
Class Object (  ) ---> Object (class instance) type basic object model metaclass.
Class ObjectID ( A string representing an object Id. ) ---> Mongo Object ID : A string representing an object Id. = 
Class ODBC ( connect, Connection and query default options. ) ---> Interface to ODBC connections. : connect = String containing connection parameters., Connection and query default options. = 
Class Page (  ) ---> Used to manipulate an individual page. when tried to be constructed directly., an CodeError is raised.
Class ParamError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Incongruent paremeter error. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class ParseError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Generic input parsing error. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class PgSQL ( connect, String containing options ) ---> Direct interface to Postgre SQL database. : connect = String containing connection parameters., String containing options = 
Class Process ( command, process open flags. ) ---> Execute and control child processes. : command = A string representing the program to be executed, process open flags. = 
Class ProcessEnum (  ) ---> Provides a list of currently executed process.
Class ProcessError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by process related system failures. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Range (  ) ---> Metaclass for Falcon range type.
Class Recordset (  ) ---> Data retuned by SQL queries.
Class Regex ( pattern, Pattern compilation options. ) ---> Regular expression binding encapsulation. if the pattern is invalid., an RegexError is raised. : pattern = The regular expression pattern to be compiled., Pattern compilation options. = 
Class RegexError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by regular expression compilation and execution errors. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class RIPEMD128Hash (  ) ---> Calculates a 128 bits long RIPEMD-128 hash (RIPEMD family)
Class RIPEMD160Hash (  ) ---> Calculates a 160 bits long RIPEMD-160 hash (RIPEMD family)
Class RIPEMD256Hash (  ) ---> Calculates a 256 bits long RIPEMD-256 hash (RIPEMD family)
Class RIPEMD320Hash (  ) ---> Calculates a 320 bits long RIPEMD-320 hash (RIPEMD family)
Class SDL (  ) ---> SDL wrapper class
Class SDLColor ( g ) ---> Storage for RGB values : g = Green value
Class SDLCursor (  ) ---> Cursor representation for SDL.
Class SDLError ( Error code, Description for the error code, Paricular error condition ) ---> Class used to notify SDL exceptions. : Error code = , Description for the error code = , Paricular error condition = 
Class SDLEventType (  ) ---> Enumeration of SDL event types.
Class SDLK (  ) ---> Enumeration for SDL Scan Key codes.
Class SDLKMOD (  ) ---> Enumeration for SDL Key Modifiers.
Class SDLMouseState (  ) ---> Allows querying of current mouse status.
Class SDLPalette (  ) ---> Represents the palette of a surface
Class SDLPixelFormat (  ) ---> Encapsulates SDL_PixelFormat structure.
Class SDLRect ( X cooordinate of this rectangle, Y cooordinate of this rectangle, width of this rectangle, height of this rectangle ) ---> Storage for rectangular coordinates. : X cooordinate of this rectangle = , Y cooordinate of this rectangle = , width of this rectangle = , height of this rectangle = 
Class SDLScreen (  ) ---> Screen oriented SDL surface.
Class SDLSurface (  ) ---> Encapsulates SDL_Surface structures and provides related services.
Class SDLVideoInfo (  ) ---> Encapsulate a video info.
Class Semaphore ( Initial value for the semaphore; if not given, 0 will be assumed. ) ---> Simple coroutine synchronization device. : Initial value for the semaphore; if not given, 0 will be assumed. = 
Class Sequence (  ) ---> Base abstract class for VM assisted sequences.
Class Set ( ... ) ---> Storage for uniquely defined items (and ordering criterion). : ... = An arbitrary list of parameters.
Class SHA1Hash (  ) ---> Calculates a 160 bits long SHA-1 hash
Class SHA224Hash (  ) ---> Calculates a 224 bits long SHA-224 hash (SHA-2 family)
Class SHA256Hash (  ) ---> Calculates a 256 bits long SHA-256 hash (SHA-2 family)
Class SHA384Hash (  ) ---> Calculates a 384 bits long SHA-384 hash (SHA-2 family)
Class SHA512Hash (  ) ---> Calculates a 512 bits long SHA-512 hash (SHA-2 family)
Class Socket (  ) ---> TCP/IP networking base class.
Class SQLite3 ( connect, Default statement options for this connection. ) ---> Direct interface to SQLite3 database. : connect = String containing connection parameters., Default statement options for this connection. = 
Class Statement (  ) ---> Prepared statements abstraction class
Class Stream (  ) ---> Stream oriented I/O class.
Class String (  ) ---> Metaclass for string items.
Class StringStream ( The buffer that will be used as stream ) ---> Memory based stream. : The buffer that will be used as stream = 
Class SyncCounter ( Initial counter value (defaults to 0). ) ---> Implements a synchronization counter (semaphore). : Initial counter value (defaults to 0). = 
Class SyncQueue (  ) ---> Signaler of relevant processing conditions.
Class SyntaxError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Syntax error descriptor. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Table ( The heading of the table (array) ) ---> Home of tabular programming. : The heading of the table (array) = 
Class TableError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error in Table class core operations. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class TCPServer (  ) ---> Encapsulates a TCP network service provider. on system error., an NetError is raised.
Class TCPSocket (  ) ---> Provides full TCP connectivity. on underlying network error., an NetError is raised.
Class Thread (  ) ---> Parallel agent main class.
Class ThreadError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by thread related problems. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class Threading (  ) ---> Access to static method that can be used to access threading functionalities.
Class TigerHash (  ) ---> Calculates a 192 bits long Tiger hash
Class TimeStamp ( date ) ---> Representation of times in the system. : date = Other TimeStamp instance from which to copy the new instance.
Class TimeZone (  ) ---> TimeZone enumeration and services.
Class Tokenizer ( A string representing the separators., Tokenization options., Maximum length of returned tokens., The string to be tokenized, or a stream to be read for tokens. ) ---> Simple stream-oriented parser for efficient basic recognition of incoming data. : A string representing the separators. = , Tokenization options. = , Maximum length of returned tokens. = , The string to be tokenized, or a stream to be read for tokens. = 
Class TTF (  ) ---> Main SDL TTF encapsulation class.
Class TTFFont (  ) ---> Font representation of SDL TTF Class.
Class TTFMetrics (  ) ---> Metrics for glyphs and rendered strings.
Class TypeError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Type mismatch in a typed operation. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class UDPSocket ( addrOrService, If an address is given, service or port number (as a string) where to listen. ) ---> UDP (datagram) manager. on system error., an NetError is raised. : addrOrService = Address at which this server will be listening., If an address is given, service or port number (as a string) where to listen. = 
Class Uploaded (  ) ---> Entity storing uploaded file data.
Class VMSlot ( The name of the mesasge managed by this VMSlot. ) ---> VM Interface for message oriented programming operations. : The name of the mesasge managed by this VMSlot. = 
Class Waitable (  ) ---> Base abstract class for synchronization Structures.
Class WhirlpoolHash (  ) ---> Calculates a 512 bits long Whirlpool hash
Class WopiError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by wopi in case of failures. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Class ZLib (  ) ---> ZLib encapsulation interface.
Class ZLibError ( A numeric error code., A textual description of the error code., A descriptive message explaining the error conditions. ) ---> Error generated by errors in the ZLib module. : A numeric error code. = , A textual description of the error code. = , A descriptive message explaining the error conditions. = 
Function abs ( x ) ---> Returns: The absolute value of the parameter. | Returns the absolute value of a number. : x = A number.
Function acos ( x ) ---> Returns: The arc cosine of the argument. | Returns the arc cosine of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function acosh (  ) ---> Returns: The inverse hyperbolic cosine of the argument. | Returns the hyperbolic cosine of the argument. If the argument is out of domain., an MathError is raised.
Function add ( a, b ) ---> Returns: The result of the sum. | Adds two items along the rules of VM '+' operator. : a = First operand, b = Second operand
Function adler32 (  ) ---> Returns: A lowercase hexadecimal string with the adler32 checksum. | Convenience function that calculates a 32 bits long Adler32 checksum
Function all ( sequence ) ---> Returns: true if all the items are true, false otherwise | Returns true if all the items in a given collection evaluate to true. : sequence = A sequence of arbitrary items.
Function allp ( ... ) ---> Returns: true if all the items are true, false otherwise | Returns true if all the parameters evaluate to true. : ... = An arbitrary list of items.
Function any ( sequence ) ---> Returns: true at least one item in the collection is true, false otherwise. | Returns true if any of the items in a given collection evaluate to true. : sequence = A sequence of arbitrary items.
Function anyp ( ... ) ---> Returns: true at least one parameter is true, false otherwise. | Returns true if any one of the parameters evaluate to true. : ... = A list of arbitrary items.
Function argd (  ) ---> Returns a dictionary containing all the parameters passed to the current function.
Function argv (  ) ---> Returns all the parameters of the current function as a vector.
Function arrayAdd ( array, item ) ---> Adds an element to an array. : array = The array where to add the new item., item = The item to be added.
Function arrayBuffer ( size, The default item to be that will fill the array. ) ---> Returns: An array filled with @b size nil elements. | Creates an array filled with nil items. : size = The length of the returned array., The default item to be that will fill the array. = 
Function arrayCompact ( array ) ---> Returns: Itself | Reduces the memory used by an array. : array = The array itself.
Function arrayDel ( array, item ) ---> Returns: true if at least one item has been removed, false otherwise. | Deletes the first element matching a given item. : array = The array that is to be changed., item = The item that must be deleted.
Function arrayDelAll ( array, item ) ---> Returns: true if at least one item has been removed, false otherwise. | Deletes all the occurrences of a given item in an array. : array = The array that is to be changed., item = The item that must be deleted.
Function arrayFill ( array, item ) ---> Returns: The same @b array passed as parameter. | Fills the array with the given element. : array = The array where to add the new item., item = The item to be replicated.
Function arrayFind ( array, item, Optional first element to be searched., Optional last element +1 to be searched. ) ---> Returns: The position of the searched item in the array, or -1 if not found. | Searches for a given item in an array. : array = The array that will be searched., item = The array that will be searched., Optional first element to be searched. = , Optional last element +1 to be searched. = 
Function arrayHead ( array ) ---> Returns: The extracted item. | Extracts the first element of an array and returns it. if the array is empty., an AccessError is raised. : array = The array that will be modified.
Function arrayIns ( array, itempos, item ) ---> Inserts an item into an array. : array = The array where the item should be placed., itempos =  The position where the item should be placed., item = The item to be inserted.
Function arrayMerge ( array1, array2, Optional position of array 1 at which to place array2, First element of array2 to merge in array1, Last element - 1 of array2 to merge in array1 ) ---> Merges two arrays. : array1 = Array containing the first half of the merge, that will be modified., array2 = Array containing the second half of the merge, read-only, Optional position of array 1 at which to place array2 = , First element of array2 to merge in array1 = , Last element - 1 of array2 to merge in array1 = 
Function arrayNM ( array ) ---> Returns: The same array passed as parameter. | Force an array to be non-method. : array = the array that should not be transformed into a method.
Function arrayRemove ( array, itemPos, The last item to be removed, in range semantic. ) ---> Removes one or more elements in the array. : array = The array from which items must be removed., itemPos = The position of the item to be removed, or the first of the items to be removed., The last item to be removed, in range semantic. = 
Function arrayResize ( array, newSize ) ---> Changes the size of the array. : array = The array that will be resize., newSize = The new size for the array.
Function arrayScan ( array, func, Optional first element to be searched., Optional upper end of the range.. ) ---> Returns: The position of the searched item in the array, or -1 if not found. | Searches an array for an item satisfying arbitrary criteria. : array = The array that will be searched., func = Function that verifies the criterion., Optional first element to be searched. = , Optional upper end of the range.. = 
Function arraySort ( array, A function used to compare two items. ) ---> Sorts an array, possibly using an arbitrary ordering criterion. : array = The array that will be searched., A function used to compare two items. = 
Function arrayTail ( array ) ---> Returns: The extracted item. | Extracts the last element of an array and returns it. : array = The array that will be modified.
Function asin ( x ) ---> Returns: The arc sine of the argument. | Returns the arc sine of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function asinh (  ) ---> Returns: The inverse hyperbolic sine of the argument. | Returns the hyperbolic sine of the argument. If the argument is out of domain., an MathError is raised.
Function assert ( msg, data ) ---> Creates a message assertion on a certain message slot. : msg = The message to be asserted., data = The value of the assertion.
Function at ( item, access, If given, will substitue the given item or range (new value). ) ---> Passe-par-tout accessor function. in case the accessor is invalid for the given item type., an AccessError is raised. : item = An array, string, or any accessible item or collection., access = A number, a range or a string to access the item., If given, will substitue the given item or range (new value). = 
Function atan ( x ) ---> Returns: The arc tangent of the argument. | Returns the arc tangent of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function atan2 ( x, y ) ---> Returns: The arc tangent of the x / y. | Returns the arc tangent of x / y. If the argument is out of domain., an MathError is raised. : x = First argument., y = Second argument.
Function atanh (  ) ---> Returns: The inverse hyperbolic tangent of the argument. | Returns the hyperbolic tangent of the argument. If the argument is out of domain., an MathError is raised.
Function attributes (  ) ---> Returns: Nil if the current module has no attributes, or a string-indexed dictionary. | Returns a dictionary containing annotation attributes of the current module.
Function baseClass ( item ) ---> Returns: A class item or nil. | Returns the class item from which an object has been instantiated. : item = 
Function beginCritical (  ) ---> Signals the VM that this coroutine must not be interrupted.
Function bless ( dict, True (default) to bless the dictionary, false to unbless it. ) ---> Returns: The same dictonary passed as @b dict. | Blesses a dictionary, making it an OOP instance. : dict = A dictionary to be blessed., True (default) to bless the dictionary, false to unbless it. = 
Function brigade ( fl, ... ) ---> Returns: The return value of the last function in fl. | Process a list of functions passing the same parameters to them. : fl = The sequence of callable items to be called., ... = Arbitrary parameters used by the brigade functions.
Function broadcast ( msg, Zero or more data to be broadcaset. ) ---> Returns: true if @b msg is found, false if it doesn't exist. | Sends a message to every callable item subscribed to a message. : msg = A message (string) to be broadcast., Zero or more data to be broadcaset. = 
Function cascade ( callList, Optional parameters to be passed to the first callable item. ) ---> Returns: The return value of the last callable item. | Concatenate a set of callable items so to form a single execution unit. : callList = Sequence of callable items., Optional parameters to be passed to the first callable item. = 
Function ceil ( x ) ---> Returns: The ceil value. | Returns the greatest integer near to the given value. : x = Argument.
Function choice ( selector, whenTrue, The item to be returned if selector evaluates to false, Optional parameters to be passed to the first callable item. ) ---> Returns: The return value of the last callable item. | Selects one of two alternatives depending on the evaluation of the first parameter. : selector = The item to be evaluated., whenTrue = The item to return if selector evaluates to true., The item to be returned if selector evaluates to false = , Optional parameters to be passed to the first callable item. = 
Function chr ( number ) ---> Returns: a single-char string. | Returns a string containing a single character that corresponds to the given number. : number = Numeric code of the desired character
Function className ( The ) ---> Returns: The class name of an object (a string) or nil. | Returns the name of the class an instance is instantiated from. : The = item to be checked.
Function clone ( item ) ---> Returns: A copy of the item. | Performs a deep copy of the item. if the item is not cloneable., an CloneError is raised. : item = The item to be copied.
Function closescr (  ) ---> Deinitializes the screen. on deinitialization failed., an ConioError is raised.
Function combinations ( x, y ) ---> Returns: The combination of the arguments. | Returns the combination of the arguments. : x = First argument., y = Second arguments.
Function compare ( operand1, operand2 ) ---> Returns: -1, 0 or 1 depending on the comparation result. | Performs a lexicographical comparison. : operand1 = The item to which this object must be compared., operand2 = The item to which this object must be compared.
Function connect ( conn, Default transaction options to be applied to ) ---> Returns: an instance of @a Handle. | Connect to a database server through a DBI driver. if the connection fails., an DBIError is raised. : conn = SQL connection string., Default transaction options to be applied to = 
Function consume (  ) ---> Consumes currently being broadcasted signal.
Function cos ( x ) ---> Returns: The cosine of the argument. | Returns the cosine of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function cosh (  ) ---> Returns: The hyperbolic cosine of the argument. | Returns the hyperbolic cosine of the argument. If the argument is out of domain., an MathError is raised.
Function cotan (  ) ---> Returns: The reciprocal of the tangent ( 1 / tan() ) of the argument. | Returns the cotangent of the argument. If the argument is out of domain., an MathError is raised.
Function crc32 (  ) ---> Returns: A lowercase hexadecimal string with the crc32 checksum. | Convenience function that calculates a 32 bits long CRC32 checksum
Function csc (  ) ---> Returns: The coseant ( 1 / sin() ) of the argument. | Returns the cosecant of the argument. If the argument is out of domain., an MathError is raised.
Function curl_version (  ) ---> Returns: A string containing the description of the used version-. | Returns the version of libcurl
Function CurrentTime (  ) ---> Returns: A new TimeStamp instance. | Returns the current system local time as a TimeStamp instance.
Function deg2rad ( x ) ---> Returns: The angle converted in radians. | Converts an angle expressed in degrees into radians. : x = An angle expressed in degrees.
Function deoob ( item ) ---> Returns: An the non-out-of-band version version of the item. | Turns an out-of-band item in a normal item. : item = The out of band item to be turned into a normal item.
Function deq ( a, b ) ---> Returns: true if the two items are deeply equal (same content). | Performs a deep equality check. : a = First operand, b = Second operand
Function derefPtr ( ptr ) ---> Returns: The pointer stored at the location indicated by ptr, as a pointer-sized integer. | Dereferences a pointer to pointer. : ptr = The pointer to be dereferenced.
Function derivedFrom ( item, cls ) ---> Returns: true if the given class is one of the ancestors of this item. | Checks if this item has a given parent. : item = The item to be checked., cls = A symbolic class name or a class instance.
Function describe ( item, Maximum inspect depth., Limit the display size of possibly very long items as i.e. strings or membufs. ) ---> Returns the deep contents of an item on a string representation. : item = The item to be inspected., Maximum inspect depth. = , Limit the display size of possibly very long items as i.e. strings or membufs. = 
Function deserialize ( stream ) ---> Deserialize an item from a stream. if the format of the input data is invalid., an ParseError is raised. : stream = An instance of the Stream (or derived) class.
Function dictBack ( dict, If true, remove the dictionary entry too., If true, return the key instead of the value. ) ---> Returns: The last value (or key) in the dictionary. | Returns the last item in the dictionary. if the dictionary is empty, an AccessError is raised. : dict = The dictionary on which to operate., If true, remove the dictionary entry too. = , If true, return the key instead of the value. = 
Function dictBest ( dict, key ) ---> Returns: An iterator to the best possible position. | Returns an iterator set to a given key, or finds the best position for its insertion. : dict = The dictionary., key = The key to be found.
Function dictClear ( dict ) ---> Removes all the items from a dictionary. : dict = The dictionary to be cleared.
Function dictFill ( dict, item ) ---> Returns: The same @b dict passed as parameter. | Fills the dictionary values with the given item. : dict = The array where to add the new item., item = The item to be replicated.
Function dictFind ( dict, key ) ---> Returns: An iterator to the found item, or nil if not found. | Returns an iterator set to a given key. : dict = The dictionary., key = The key to be found.
Function dictFront ( dict, If true, remove the dictionary entry too., If true, return the key instead of the value. ) ---> Returns: The first value (or key) in the dictionary. | Returns the first item in the dictionary. if the dictionary is empty, an AccessError is raised. : dict = The dictionary on which to operate., If true, remove the dictionary entry too. = , If true, return the key instead of the value. = 
Function dictGet ( dict, key ) ---> Returns: The value associated with a key, or an out-of-band nil if not found. | Retreives a value associated with the given key : dict = A dictionary., key = The key to be found.
Function dictKeys ( dict ) ---> Returns: An array containing all the keys. | Returns an array containing all the keys in the dictionary. : dict = A dictionary.
Function dictMerge ( destDict, sourceDict ) ---> Merges two dictionaries. : destDict = The dictionary where the merge will take place., sourceDict = A dictionary that will be inserted in destDict
Function dictRemove ( dict, key ) ---> Returns: True if the key is found and removed, false otherwise. | Removes a given key from the dictionary. : dict = A dictionary., key = The key to be removed
Function dictSet ( dict, key, value ) ---> Returns: True if the value was overwritten, false if it has been inserted anew. | Stores a value in a dictionary : dict = A dictionary., key = The key to be found., value = The key to be set.
Function dictValues ( dict ) ---> Returns: An array containing all the values. | Extracts all the values in the dictionary. : dict = A dictionary.
Function dirChange ( newDir ) ---> Changes the current working directory. on system error., an IoError is raised. : newDir = The new working directory.
Function dirCurrent (  ) ---> Returns: A string representing the current working directory. | Returns the current working directory. on system error., an IoError is raised.
Function dirMake ( dirname, Create also the full pat to the given directory. ) ---> Creates a directory. on system error., an IoError is raised. : dirname = The name of the directory to be created., Create also the full pat to the given directory. = 
Function dirMakeLink ( source, dest ) ---> Creates a soft link to a file. : source = The original file path., dest = The path to the link file.
Function dirReadLink ( linkPath ) ---> On systems supporting symbolic links, returns the linked file. : linkPath = A path to a symbolic link.
Function dirRemove ( dir ) ---> Removes an empty directory. on system error., an IoError is raised. : dir = The path to the directory to be removed.
Function div ( a, b ) ---> Returns: The result of the division. | Divides two numeric operands along the rules of VM '/' operator. : a = First operand, b = Second operand
Function dlaod ( uri, a Stream where to download the data. ) ---> Downloads file. : uri = The uri to be downloaded., a Stream where to download the data. = 
Function dolist ( processor, sequence, Optional parameters to be passed to the first callable item. ) ---> Returns: The return value of the last callable item. | Repeats an operation on a list of parameters. : processor = A callable item that will receive data coming from the sequence., sequence = A list of items that will be fed in the processor one at a time., Optional parameters to be passed to the first callable item. = 
Function dynExt (  ) ---> Returns: A string containing the local platform dynamic library extension. | Return a system dependent dynamic library extension.
Function endCritical (  ) ---> Signals the VM that this coroutine can be interrupted.
Function epoch (  ) ---> Returns: An integer number of seconds. | Returns the number of seconds since the "epoch" (1 Jan 1970).
Function equal ( a, b ) ---> Returns: true if a == b, false otherwise. | Performs a lexicographic check for the first operand being equal to the second. : a = First operand, b = Second operand
Function eval ( sequence ) ---> Returns: The sigma-reduction (evaluation) result. | Evaluates a sequence in functional context. : sequence = A sequence to be evaluated.
Function exec ( command ) ---> Returns: Never returns. | Launches a process in place of the host process. if the process couldn't be created, an ProcessError is raised. : command = A single string with the system command, or an array of parameters.
Function exit ( value ) ---> Requires immediate termination of the program. : value = an item representing VM exit code.
Function exp ( x ) ---> Returns: The exponential of the argument. | Returns exponential (e^x) of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function factorial ( x ) ---> Returns: The factorial of the argument. | Returns the factorial of the argument. : x = Argument.
Function fileChgroup ( path, groupId ) ---> Changes UNIX group to a directory entry. on system error., an IoError is raised. : path = A file or otherwise valid directory entry., groupId = The new group id.
Function fileChmod ( path, mode ) ---> Changes UNIX access right to a directory entry. on system error., an IoError is raised. : path = A file or otherwise valid directory entry., mode = The new access mode.
Function fileChown ( path, ownerId ) ---> Changes UNIX owner to a directory entry. on system error., an IoError is raised. : path = A file or otherwise valid directory entry., ownerId = The new ownerId.
Function fileCopy ( source, dest ) ---> Copies a whole file from one position to another. on system error., an IoError is raised. : source = Source file to be copied, dest = Destination file.
Function fileExt ( fullpath ) ---> Returns: The extension part. | Return the extension in a complete filename. : fullpath = A string containing a path.
Function fileMove ( sourcePath, destPath ) ---> Renames a file locally. on system error., an IoError is raised. : sourcePath = The path of the file to be moved., destPath = The path of the destination file.
Function fileName ( path ) ---> Returns: The filename part in the path. | Determines the name of a file in a complete path. : path = A string containing a path.
Function fileNameMerge ( spec, path, filename, ext ) ---> Returns: A complete absolute path. | Merges a filename split up in four elements. : spec = The disk or server specification, an array containing all the, path = Path to the file, or nil., filename = Filename, or nil., ext = extension, or nil.
Function filePath ( fullpath ) ---> Returns: The path part. | Return the path specification part in a complete filename. : fullpath = A string containing a path.
Function fileRemove ( filename ) ---> Removes a file from the system. on system error., an IoError is raised. : filename = The name, relative or absolute path of the file to be removed.
Function fileType ( filename, Don't follow symlinks ) ---> Returns: A valid file type or FileStat.NOTFOUND if not found. | Determines the type of a file. : filename = Relative or absolute path to a file., Don't follow symlinks = 
Function fileUnit ( fullpath ) ---> Returns: The unit specificator part. | Return the unit specificator in a complete filename. : fullpath = A string containing a path.
Function filter ( ffunc, sequence ) ---> Returns: The filtered sequence. | Filters sequence using a filter function. : ffunc = A callable item used to filter the array., sequence = A sequence of arbitrary items.
Function fint ( x ) ---> Returns: A floating point number with fractional part zeroed. | Returns the integer part of a floating point number as a floating point number. : x = Argument.
Function firstOf ( ... ) ---> Returns: The first non-false item. | Returns the first non-false of its parameters. : ... = Any number of arbitrary parameters.
Function floop ( sequence ) ---> Repeats indefinitely a list of operations. : sequence = A sequence of callable items that gets called one after another.
Function floor ( x ) ---> Returns: The smallest integer near to the given value. | Returns the smallest integer near to the given value. : x = Argument.
Function fract ( x ) ---> Returns: The fractional part of a number. | Returns the fractional part of a number. : x = Argument.
Function ge ( a, b ) ---> Returns: true if a >= b, false otherwise. | Performs a lexicographic check for the first operand being greater or equal to the second. : a = First operand, b = Second operand
Function getAssert ( msg, If given, instead of raising in case the assertion is not found, return this item. ) ---> Returns the given assertion, if it exists. if the given message is not asserted., an MessageError is raised. : msg = The message slot on which the assertion is to be ckeched., If given, instead of raising in case the assertion is not found, return this item. = 
Function getenv ( varName ) ---> Returns: The value of the environment variable or nil if it is not present. | Get environment variable value. : varName = Environment variable name (as a string)
Function getEnviron() (  ) ---> Returns: A dictionary where each key is an environment variable. | Return a dictionary containing all the environment variables.
Function getHostName (  ) ---> Returns: A string containing the local machine name. | Retreives the host name of the local machine. if the host name can't be determined., an NetError is raised.
Function getProperty ( obj, propName ) ---> Returns: the property | Returns the value of a property in an object. if the property can't be found., an AccessError is raised. : obj = the source object, array or (blessed) dictionary., propName = A string representing the name of a property or a method inside the object.
Function getSlot ( msg, If true (default) create the slot if it doesn't exist. ) ---> Returns: The message slot coresponding with this name. | Retreives a MOP Message slot. : msg = The message slot that must be taken or created., If true (default) create the slot if it doesn't exist. = 
Function getStruct ( struct, offset, size ) ---> Returns: An integer containing the binary value of the data (in local endianity). | Gets raw data from a structure. : struct = Memory buffer or raw pointer pointing to the structure., offset = Offset in bytes of the retreived data., size = Size in bytes of the retreived data.
Function getSupportedHashes (  ) ---> Returns: An array containing the names of all hashes supported by this module | Returns an array containing the names of all supported hashes.
Function getSystemEncoding (  ) ---> Returns: The system encoding name. | Returns the "official" system encoding, if it matches with one known by Falcon.
Function glog ( level, message, A numeric code representing an application specific message ID. ) ---> Shortcut to log on the generic area. : level = The level of the log entry., message = The message to be logged., A numeric code representing an application specific message ID. = 
Function glogd ( message, A numeric code representing an application specific message ID. ) ---> Shortcut to log a debug message on the generic area. : message = The message to be logged at debug level., A numeric code representing an application specific message ID. = 
Function gloge ( A numeric code representing an application specific message ID., message ) ---> Shortcut to log an error on the generic area. : A numeric code representing an application specific message ID. = , message = The message to be logged at error level.
Function glogf ( message, A numeric code representing an application specific message ID. ) ---> Shortcut to log a fatal error on the generic area. : message = The message to be logged at fatal level., A numeric code representing an application specific message ID. = 
Function glogi ( message, A numeric code representing an application specific message ID. ) ---> Shortcut to log an information message on the generic area. : message = The message to be logged at info level., A numeric code representing an application specific message ID. = 
Function glogw ( message, A numeric code representing an application specific message ID. ) ---> Shortcut to log a warning on the generic area. : message = The message to be logged at warn level., A numeric code representing an application specific message ID. = 
Function gminlog (  ) ---> Returns: A number representing a log severity, or -1 | Determines what is the minimum log severity active on the GeneircLog area.
Function gt ( a, b ) ---> Returns: true if a > b, false otherwise. | Performs a lexicographic check for the first operand being greater than the second. : a = First operand, b = Second operand
Function hash ( raw, which, Arbitrary amount of parameters that should be fed into the chosen hash function. ) ---> Returns: A lowercase hexadecimal string with the output of the chosen hash if @i raw is false, or a 1-byte wide MemBuf if true. | Convenience function that calculates a hash. if @i which is a hash object that was already finalized., an AccessError is raised. : raw = If set to true, return a raw MemBuf instead of a string., which = Hash that should be used, Arbitrary amount of parameters that should be fed into the chosen hash function. = 
Function hmac ( raw, which, key, data ) ---> Returns: A lowercase hexadecimal string with the HMAC-result of the chosen hash if @i raw is false, or a 1-byte wide MemBuf if true. | Provides HMAC authentication for a block of data if @i which evaluates to a hash object that was already finalized., an AccessError is raised. : raw = If set to true, return a raw MemBuf instead of a string., which = Hash that should be used, key = Secret authentication key, data = The data to be authenticated
Function htmlEscape ( string, A stream where to place the output. ) ---> Returns: A converted string, or nil if writing to a string. | Escapes a string converting HTML special characters. : string = The string to be converted., A stream where to place the output. = 
Function iff ( cfr, whenTrue, Value to be called and/or returned in case cfr evaluates to false. ) ---> Returns: The evaluation result of one of the two branches (or nil). | Performs a functional if; if the first parameter evaluates to true, the second parameter is evaluated and then returned, else the third one is evaluated and returned. : cfr = A condition or a callable item., whenTrue = Value to be called and/or returned in case cfr evaluates to true., Value to be called and/or returned in case cfr evaluates to false. = 
Function include ( file, Input encoding., A string of ';' separated search paths., Symbols to be queried (or nil). ) ---> Dynamically loads a module as a plugin. if the module cannot be found or loaded., an IoError is raised. : file = The relative filename of the module., Input encoding. = , A string of ';' separated search paths. = , Symbols to be queried (or nil). = 
Function initscr ( Initialization params. ) ---> Initializes the screen. on initialization failed., an ConioError is raised. : Initialization params. = 
Function input (  ) ---> Get some text from the user (standard input stream).
Function InputStream ( fileName, If given, the share mode. ) ---> Returns: A new valid @a Stream instance on success. | Open a system file for reading. : fileName = A relative or absolute path to a file to be opened for input, If given, the share mode. = 
Function inspect ( item, Maximum inspect depth., Limit the display size of possibly very long items as i.e. strings or membufs., Different stream where to send the dump. ) ---> Displays the deep contents of an item. : item = The item to be inspected., Maximum inspect depth. = , Limit the display size of possibly very long items as i.e. strings or membufs. = , Different stream where to send the dump. = 
Function int ( item ) ---> Returns: An integer value. | Converts the given parameter to integer. if a given floating point value is too large to be converted to an integer., an MathError is raised. : item = The item to be converted
Function IOStream ( fileName, If given, the ownership of the created file., If given, the share mode. ) ---> Returns: A new valid @a Stream instance on success. | Creates a stream for input and output. : fileName = A relative or absolute path to a file to be opened for input, If given, the ownership of the created file. = , If given, the share mode. = 
Function isBound ( item ) ---> Returns: True if the item is bound. | Determines if an item is bound or not. : item = 
Function isCallable ( item ) ---> Returns: true if the item is callable, false otheriwse. | Determines if an item is callable. : item = The item to be converted
Function isoob ( item ) ---> Returns: True if the item is out of band, false otherwise. | Checks for the out-of-band status of an item. : item = The item to be checked.
Function JSONdecode ( source ) ---> Returns: a string containing the JSON string, if @b stream is nil | Decode an item stored in JSON format. in case of error on the source stream., an IoError is raised. : source = A string or a stream from which to read the JSON data.
Function JSONencode ( item, A stream on which to send the encoded result., Add spacing around separators and puntaction., Put each item in lists on a separate line. ) ---> Returns: a string containing the JSON string, if @b stream is nil | Encode an item in JSON format. in case of error on target stream., an IoError is raised. : item = the item to be encoded in JSON format., A stream on which to send the encoded result. = , Add spacing around separators and puntaction. = , Put each item in lists on a separate line. = 
Function lambda (  ) ---> Returns: The lambda which is arg1 raised to itself, raised to arg2 - 1. | Returns the lambda of two arguments. If the value is to large., an MathError is raised.
Function lbind ( name, A future binding value. ) ---> Returns: A newly created late binding name. | Creates a dynamic late binding symbol. : name = A string representing a late binding name., A future binding value. = 
Function le ( a, b ) ---> Returns: true if a <= b, false otherwise. | Performs a lexicographic check for the first operand being less or equal to the second. : a = First operand, b = Second operand
Function len ( item ) ---> Returns: the count of items in the sequence, or 0. | Retrieves the length of a collection : item = an item of any kind
Function let ( dest, source ) ---> Returns: The assigned (source) value. | Assigns a value to another in a functional context. : dest = Destination value (passed by reference)., source = Source value.
Function limitMembuf ( mb, The size at which to cut the memory buffer. ) ---> Returns: The resized Memory Buffer. | Sizes a memory buffer to a zero terminated string. : mb = The memory buffer to be sized., The size at which to cut the memory buffer. = 
Function limitMembufW ( mb, The size at which to cut the memory buffer. ) ---> Sizes a memory buffer to a zero terminated string. : mb = The memory buffer to be sized., The size at which to cut the memory buffer. = 
Function lit ( item ) ---> Returns: The parameter unevaluated. | Return its parameter as-is : item = A condition or a callable item.
Function log ( x ) ---> Returns: The natural logarithm of the argument. | Returns the natural logarithm of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function log10 ( x ) ---> Returns: The common logarithm of the argument. | Returns the common (base 10) logarithm of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function lt ( a, b ) ---> Returns: true if a < b, false otherwise. | Performs a lexicographic check for the first operand being less than the second. : a = First operand, b = Second operand
Function makeHash ( name, Return @b nil instead of throwing an exception, if the hash was not found ) ---> Returns: A new instance of a hash object of the the given algorithm name | Creates a hash object based on the algorithm name in case a hash with that name was not found, an ParamError is raised. : name = The name of the algorithm (case insensitive), Return @b nil instead of throwing an exception, if the hash was not found = 
Function map ( mfunc, sequence ) ---> Returns: The parameter unevaluated. | Creates a new vector of items transforming each item in the original array through the mapping function. : mfunc = A function or sigma used to map the array., sequence = A sequence of arbitrary items.
Function max ( ... ) ---> Returns: The greatest item in the sequence. | Picks the maximum value among its parameters. : ... = The items to be checked.
Function md2 (  ) ---> Returns: A lowercase hexadecimal string with the MD2 hash. | Convenience function that calculates a 128 bits long MD2 hash
Function md4 (  ) ---> Returns: A lowercase hexadecimal string with the MD4 hash. | Convenience function that calculates a 128 bits long MD4 hash
Function md5 (  ) ---> Returns: A lowercase hexadecimal string with the MD5 hash. | Convenience function that calculates a 128 bits long MD5 hash
Function MemBufFromPtr ( data, size, Size of each word in bytes (1, 2, 3 or 4). ) ---> Creates a memory buffer to store raw memory coming from external providers. : data = A pointer to the raw memory (as an integer value)., size = The maximum size of the memory., Size of each word in bytes (1, 2, 3 or 4). = 
Function memBufFromPtr ( ptr, size ) ---> Returns: A memory buffer pointing to the memory data. | Creates a memory buffer out from a raw pointer. : ptr = The raw memory pointer., size = The size of the memory buffer.
Function memBufToPtr ( mb ) ---> Returns: The memory pointer to the memory buffer data. | Returns the inner data of a memory buffer. : mb = The memory buffer to be placed in the foreign structure.
Function memSet ( struct, value, size ) ---> sets the given memory to a given byte value : struct = The structure raw pointer o MemBuf, value = The value to be set in the structure (0-255), size = The size of the memory to be set.
Function metaclass ( item ) ---> Returns: The metaclass of this item. | Returns the metaclass associated with the given item. : item = The item of which the metaclass must be found.
Function min ( ... ) ---> Returns: The smallest item in the sequence. | Picks the minimal value among its parameters. : ... = The items to be checked.
Function mod ( a, b ) ---> Returns: The result of the modulo. | Performs a modulo division on numeric operands along the rules of VM '%' operator. : a = First operand, b = Second operand
Function mod ( x, y ) ---> Returns: The modulo of the two argument; x mod y. | Returns the modulo of two arguments. If the argument is out of domain., an MathError is raised. : x = Argument., y = Argument.
Function mul ( a, b ) ---> Returns: The result of the multiplication. | Multiplies two items along the rules of VM '*' operator. : a = First operand, b = Second operand
Function neq ( a, b ) ---> Returns: true if a == b, false otherwise. | Performs a lexicographic check for the first operand being not equal to the second. : a = First operand, b = Second operand
Function numeric ( item ) ---> Returns: A numeric value. | Converts the given parameter to numeric. if a given floating point value is too large to be converted to an integer., an MathError is raised. : item = The item to be converted
Function oob ( The item to be declared out of band. ) ---> Returns: An oob version of the item, or an oob @b nil if no item is given. | Generates an out-of-band item. : The item to be declared out of band. = 
Function ord ( string ) ---> Returns: the UNICODE value of the first element in the string. | Returns the numeric UNICODE ID of a given character. : string = The character for which the ID is requested.
Function OutputStream ( fileName, If given, the ownership of the created file., If given, the share mode. ) ---> Returns: A new valid @a Stream instance on success. | Creates a stream for output only. : fileName = A relative or absolute path to a file to be opened for input, If given, the ownership of the created file. = , If given, the share mode. = 
Function PageDict ( pageSize ) ---> Returns: A new dictionary. | Creates a paged dictionary (which is internally represented as a B-Tree). : pageSize = size of pages expressed in maximum items.
Function paramCount (  ) ---> Returns: The parameter count. | Returns number of parameter that have been passed to the current function or method.
Function parameter ( pnum ) ---> Returns: The nth paramter (zero based) or NIL if the parameter is not given. | Gets the Nth parameter if @b pnum is out of range., an AccessError is raised. : pnum = The ordinal number of the paremeter, zero based
Function paramIsRef ( number ) ---> Returns: true if the parameter has been passed by reference, false otherwise. | Checks whether the nth parameter has been passed by reference or not. if @b number is out of range., an AccessError is raised. : number = The paramter that must be checked (zero based)
Function paramSet ( number, value ) ---> Changes the nth paramter if it has been passed by reference. if @b number is out of range., an AccessError is raised. : number = the paramter to be changed (zero based), value = the new value for the parameter
Function ParseRFC2822 (  ) ---> Returns: A valid @a TimeStamp instance or nil if the format is invalid. | Parses a RFC2822 formatted date and returns a timestamp instance.
Function passvp ( Callable item on which to pass the parameters. ) ---> Returns: An array containing unnamed parameters, or the return value \b citem. | Returns all the undeclared parameters, or passes them to a callable item : Callable item on which to pass the parameters. = 
Function permutations ( x, y ) ---> Returns: The permutation of the arguments. | Returns the permutation of the arguments. : x = First argument., y = Second arguments.
Function pow ( x, y ) ---> Returns: x^y | Returns the first argument elevated to the second one (x^y) If the argument is out of domain., an MathError is raised. : x = Base., y = Exponent.
Function pread ( command, background ) ---> Returns: The full output generated by the rpcess. | Executes an external process and waits for its termination. if the process couldn't be created., an ProcessError is raised. : command = A string representing the program to be executed, background = If given and true, the process runs hidden.
Function print ( ... ) ---> Prints the contents of various items to the standard output stream. : ... = An arbitrary list of parameters.
Function printl ( ... ) ---> Prints the contents of various items to the VM standard output stream, and adds a newline. : ... = An arbitrary list of parameters.
Function processId (  ) ---> Returns: a numeric process ID. | Returns the process ID of the process hosting the Falcon VM.
Function processKill ( pid, If given and true, use the maximum severity allowable to stop the given process. ) ---> Returns: True on success, false on failure. | Terminates the given process given its ID, if possible. : pid = The Process ID of the process that should be terminated., If given and true, use the maximum severity allowable to stop the given process. = 
Function properties ( item ) ---> Returns: An array of strings representing property names. | Returns all the properties in the given item. : item = An item that can be accessed via dot accessor.
Function rad2deg ( x ) ---> Returns: The angle converted in degrees. | Converts an angle expressed in radians into degrees. : x = An angle expressed in radians.
Function random ( ... ) ---> Returns: A pseudo random number or a random item picked from parameters. | Returns a pseudo random number. : ... = See below.
Function randomChoice ( ... ) ---> Returns: One of the parameters, picked at random. | Selects one of the arguments at random and returns it. : ... = At least two items of any kind.
Function randomDice ( dices, Number of faces in the virtual dices. ) ---> Returns: A random value which is the sum of the virtual throws. | Performs a virtual dice set trow. : dices = Number of dices to be thrown., Number of faces in the virtual dices. = 
Function randomGrab ( series, Count of extracted items. ) ---> Returns: An array with some or all of the items grabbed from the original elements. | Grabs repeatedly random elements from an array. : series = An array from which items will be extracted., Count of extracted items. = 
Function randomPick ( series ) ---> Returns: One of the items in the array. | Grabs repeatedly random elements from an array. if the @b series is empty., an ParamError is raised. : series = An array containing one or more items.
Function randomSeed ( An integer number being used as random seed. ) ---> Seeds the random number generator. : An integer number being used as random seed. = 
Function randomWalk ( series, Desire size of the walk. ) ---> Returns: An array built from randomly picked items. | Performs a random walk in an array. : series = An array containing one or more items., Desire size of the walk. = 
Function readURI ( uri, The encoding. ) ---> Returns: A string containing the whole contents of the | Reads fully data from a given file or URI source. in case of read error., an IoError is raised. : uri = The item to be read (URI or string), The encoding. = 
Function reduce ( reductor, sequence, Optional startup value for the reduction. ) ---> Returns: The reduced result. | Uses the values in a given sequence and iteratively calls a reductor function to extract a single result. : reductor = A function or Sigma to reduce the array., sequence = A sequence of arbitrary items., Optional startup value for the reduction. = 
Function resolveAddress ( address ) ---> Returns: An array of IPv4 or IPv6 addresses. | Resolve a network address in a list of numeric IP fields. if the name resolution service is not available., an NetError is raised. : address = An host name, quad dot IP address or IPV6 address.
Function retract ( msg ) ---> Removes a previous assertion on a message. : msg = The message slot to be retracted.
Function ripemd128 (  ) ---> Returns: A lowercase hexadecimal string with the RIPEMD128 hash. | Convenience function that calculates a 128 bits long RIPEMD128 hash
Function ripemd160 (  ) ---> Returns: A lowercase hexadecimal string with the RIPEMD160 hash. | Convenience function that calculates a 160 bits long RIPEMD160 hash
Function ripemd256 (  ) ---> Returns: A lowercase hexadecimal string with the RIPEMD256 hash. | Convenience function that calculates a 256 bits long RIPEMD256 hash.
Function ripemd320 (  ) ---> Returns: A lowercase hexadecimal string with the RIPEMD320 hash. | Convenience function that calculates a 320 bits long RIPEMD320 hash
Function round ( x ) ---> Returns: Nearest integer to x. | Rounds a floating point to the nearest integer. : x = Argument.
Function sec (  ) ---> Returns: The reciprocal cosine ( 1 / cos() ) of the argument. | Returns the secant of the argument. If the argument is out of domain., an MathError is raised.
Function seconds (  ) ---> Returns: The number of seconds and fractions of seconds in a floating point value. | Returns the number of seconds and milliseconds from day, activity or program start.
Function serialize ( item, stream ) ---> Serializes an item on a stream. on underlying stream error., an IoError is raised. : item = The item to be serialized., stream = An instance of the Stream (or derived) class.
Function set Dictionary ( key, value ) ---> Returns: True if the value was overwritten, false if it has been inserted anew. | Stores a value in a dictionary : key = The key to be found., value = The key to be set.
Function setenv ( varName, value ) ---> Set environment variable value. on failure., an IoError is raised. : varName = Environment variable name (as a string), value = a value for the given variable.
Function setProperty ( obj, propName, value ) ---> Sets the value of a proprety in a given object If the property can't be found., an AccessError is raised. : obj = The source object., propName = A string representing the name of a property or a method inside the object., value = The property new value.
Function setStruct ( struct, offset, size, data ) ---> Sets raw data into a structure. : struct = Memory buffer or raw pointer pointing to the structure., offset = Offset in bytes of the set data., size = Size in bytes of the set data., data = The data to be set (numeric value)
Function sha1 (  ) ---> Returns: A lowercase hexadecimal string with the SHA1 hash. | Convenience function that calculates a 160 bits long SHA1 hash
Function sha224 (  ) ---> Returns: A lowercase hexadecimal string with the SHA224 hash. | Convenience function that calculates a 224 bits long SHA224 hash
Function sha256 (  ) ---> Returns: A lowercase hexadecimal string with the SHA256 hash. | Convenience function that calculates a 256 bits long SHA256 hash
Function sha384 (  ) ---> Returns: A lowercase hexadecimal string with the SHA384 hash. | Convenience function that calculates a 384 bits long SHA384 hash
Function sha512 (  ) ---> Returns: A lowercase hexadecimal string with the SHA512 hash. | Convenience function that calculates a 512 bits long SHA512 hash
Function sin ( x ) ---> Returns: The sine of the argument. | Returns the sine of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function sinh (  ) ---> Returns: The hyperbolic sine of the argument. | Returns the hyperbolic sine of the argument. If the argument is out of domain., an MathError is raised.
Function sleep ( time ) ---> Returns: an item posted by the embedding application. | Put the current coroutine at sleep for some time. in case of asynchronous interruption., an InterruptedError is raised. : time = Time, in seconds and fractions, that the coroutine wishes to sleep.
Function socketErrorDesc ( code ) ---> Returns: A string with a textual description of the error. | Describe the meaning of a networking related system error code. : code = The error code to be described.
Function sqrt ( x ) ---> Returns: The square root of the argument. | Returns the square root of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function stdErr (  ) ---> Returns: A new valid @a Stream instance on success. | Creates an object mapped to the standard error of the Virtual Machine.
Function stdErrRaw (  ) ---> Returns: A new valid @a Stream instance on success. | Creates a stream that interfaces the standard error stream of the host process.
Function stdIn (  ) ---> Returns: A new valid @a Stream instance on success. | Creates an object mapped to the standard input of the Virtual Machine.
Function stdInRaw (  ) ---> Returns: A new valid @a Stream instance on success. | Creates a stream that interfaces the standard input stream of the host process.
Function stdOut (  ) ---> Returns: A new valid @a Stream instance on success. | Creates an object mapped to the standard output of the Virtual Machine.
Function stdOutRaw (  ) ---> Returns: A new valid @a Stream instance on success. | Creates a stream that interfaces the standard output stream of the host process.
Function strBack ( str, Number of characters to be taken (defaults to 1)., If true, remove also the character., If true, returns a character value instead of a string. ) ---> Returns: The first element or nil if the string is empty. | Returns the last character(s) in a string. : str = The string on which to operate., Number of characters to be taken (defaults to 1). = , If true, remove also the character. = , If true, returns a character value instead of a string. = 
Function strBackFind ( string, needle, Optional position from which to start the search in string., Optional position at which to end the search in string. ) ---> Returns: The position where the substring is found, or -1. | Finds a substring backwards. : string = String where the search will take place., needle = Substring to search for., Optional position from which to start the search in string. = , Optional position at which to end the search in string. = 
Function strBackTrim ( string, A set of characters that must be removed. ) ---> Returns: The trimmed substring. | Removes white spaces at both the beginning and the end of the string. : string = The string to be trimmed., A set of characters that must be removed. = 
Function strBuffer ( size ) ---> Returns: The new string. | Pre-allocates an empty string. : size = Size of the pre-allocated string.
Function strCmpIgnoreCase ( string1, string2 ) ---> Returns: -1, 0 or 1. | Performs a lexicographic comparation of two strings, ignoring character case. : string1 = First string to be compared., string2 = Second string to be compared.
Function strEndsWith ( string, token, If true, pefroms a case neutral check ) ---> Returns: True if @b token matches the end of @b string, false otherwise. | Check if a strings ends with a substring. : string = The string that is going to be tested for the given token., token = The substring that will be compared with this string., If true, pefroms a case neutral check = 
Function strEscape ( string, If true, characters above UNICODE 127 are escaped as well. ) ---> Returns: A new escaped string. | Escape quotes and special characters in the string : string = the String to be escaped., If true, characters above UNICODE 127 are escaped as well. = 
Function strEsq ( string, if true, the source string is modified, saving memory. ) ---> Returns: A new escaped string, if @b inplace is not given, or the @b string parameter | Escape quotes in the given string. : string = the String to be escaped., if true, the source string is modified, saving memory. = 
Function strFill ( string, chr ) ---> Returns: The string itself. | Fills a string with a given character or substring. : string = The string to be filled., chr = The character (unicode value) or substring used to refill the @b string.
Function strFind ( string, needle, Optional position from which to start the search in string., Optional position at which to end the search in string. ) ---> Returns: The position where the substring is found, or -1. | Finds a substring. : string = String where the search will take place., needle = Substring to search for., Optional position from which to start the search in string. = , Optional position at which to end the search in string. = 
Function strFromMemBuf ( membuf ) ---> Returns: The resulting string. | Convets a MemBuf to a string. : membuf = A MemBuf that will be converted to a string.
Function strFront ( str, Number of characters to be taken (defaults to 1)., If true, remove also the character., If true, returns a character value instead of a string. ) ---> Returns: The first element or nil if the string is empty. | Returns the first character in a string. : str = The string on which to operate., Number of characters to be taken (defaults to 1). = , If true, remove also the character. = , If true, returns a character value instead of a string. = 
Function strFrontTrim ( string, A set of characters that must be removed. ) ---> Returns: The trimmed substring. | Removes white spaces from the front of the string. : string = The string to be trimmed., A set of characters that must be removed. = 
Function stringToPtr ( string ) ---> Returns: The memory pointer to the string data. | Returns the inner data of a string. : string = The string to be placed in a foreign structure.
Function strLower ( string ) ---> Returns: The lowercased string. | Returns a lowercase version of the given string. : string = String that must be lowercased.
Function strMerge ( array, A string placed between each merge., Maximum count of merges. ) ---> Returns: The merged string. |  Merges an array of strings into a string. : array = An array of strings to be merged., A string placed between each merge. = , Maximum count of merges. = 
Function strReplace ( string, substr, repstr, Optional start position in the string., Optional end position in the string. ) ---> Returns: A copy of the string with the occourences of the searched substring replaced. | Replaces the all the occurrences of a substring with another one. : string = The string where the replace will take place., substr = The substring that will be replaced., repstr = The string that will take the place of substr., Optional start position in the string. = , Optional end position in the string. = 
Function strReplicate ( string, times ) ---> Returns: The new string. | Returns a new string that is created by replicating the original one. : string = The string to be replicaeted., times = Number of times the string must be replicated.
Function strSplit ( string, The token by which the string should be split., Optional maximum split count. ) ---> Returns: An array of strings containing the split string. | Subdivides a string in an array of substrings given a token substring. : string = The string that must be split., The token by which the string should be split. = , Optional maximum split count. = 
Function strSplitTrimmed ( string, token, Optional maximum split count. ) ---> Returns: An array of strings containing the split string. | Subdivides a string in an array of substrings given a token substring. : string = The string that must be split., token = The token by which the string should be split., Optional maximum split count. = 
Function strStartsWith ( string, token, If true, pefroms a case neutral check ) ---> Returns: True if @b token matches the beginning of @b string, false otherwise. | Check if a strings starts with a substring. : string = The string that is going to be tested for the given token., token = The substring that will be compared with this string., If true, pefroms a case neutral check = 
Function strToMemBuf ( string, The memory buffer word width (defaults to string character size). ) ---> Returns: The resulting membuf. | Convets a string into a Memory Buffer : string = String to be converted in a membuf., The memory buffer word width (defaults to string character size). = 
Function strTrim ( string, A set of characters that must be removed. ) ---> Returns: The trimmed substring. | Removes the white spaces at the beginning and at the end of a string. : string = The string to be trimmed., A set of characters that must be removed. = 
Function strUnescape ( string, if true, the source string is modified, saving memory. ) ---> Returns: A new unescaped string, if @b inplace is not given, or the @b string parameter | Unescape quotes and special characters in the string : string = the String to be escaped., if true, the source string is modified, saving memory. = 
Function strUnesq ( string, if true, the source string is modified, saving memory. ) ---> Returns: A new unescaped string, if @b inplace is not given, or the @b string parameter | Unescape the quotes in given string. : string = the String to be unescaped., if true, the source string is modified, saving memory. = 
Function strUpper ( string ) ---> Returns: The uppercased string. | Returns an upper case version of the string. : string = String that must be uppercased.
Function strWildcardMatch ( string, wildcard, If true, the latin 26 base letters case is ignored in matches. ) ---> Returns: True if the string matches, false otherwise. | Perform an old-style file-like jolly-based wildcard match. : string = String that must match the wildcard., wildcard = A wildcard, possibly but not necessarily including a jolly character., If true, the latin 26 base letters case is ignored in matches. = 
Function sub ( a, b ) ---> Returns: The result of the subtraction. | Subtracts two items along the rules of VM '-' operator. : a = First operand, b = Second operand
Function subscribe ( msg, handler, Set to true to insert this subscription in front of the subscription list. ) ---> Registers a callback to a message slot. : msg = A string with the message name on which the item should be registered., handler = A callable item or instance providing callback support., Set to true to insert this subscription in front of the subscription list. = 
Function system ( command, background ) ---> Returns: Exit status of the process. | Executes an external process via command shell, and waits for its termination. if the process couldn't be created., an ProcessError is raised. : command = The command to be executed., background = If given and true, the process runs hidden.
Function systemCall ( command, background ) ---> Returns: Exit status of the process. | Executes an external process and waits for its termination. if the process couldn't be created., an ProcessError is raised. : command = The command to be executed., background = If given and true, the process runs hidden.
Function systemErrorDescription ( errorCode ) ---> Returns: A system-specific error description. | Returns a system dependent message explaining an integer error code. : errorCode = A (possibly) numeric error code that some system function has returned.
Function tan ( x ) ---> Returns: The tangent of the argument. | Returns the tangent of the argument. If the argument is out of domain., an MathError is raised. : x = Argument.
Function tanh (  ) ---> Returns: The hyperbolic tangent of the argument. | Returns the hyperbolic tangent of the argument. If the argument is out of domain., an MathError is raised.
Function tiger (  ) ---> Returns: A lowercase hexadecimal string with the Tiger hash. | Convenience function that calculates a 192 bits long Tiger hash
Function times ( count, sequence ) ---> Returns: Last index processed. | Repeats a sequence a determined number of times. : count = Count of times to be repeated or non-open range., sequence = A function or a Sigma sequence.
Function toString ( item, Specific object format. ) ---> Returns: the string representation of the item. | Returns a string representation of the item. : item = The item to be converted to string., Specific object format. = 
Function transcodeFrom ( string, encoding ) ---> Returns: On success, the transcoded string. | Returns a Falcon string created by parsing the given one as a binary sequence of bytes. if the encoding is not known., an ParamError is raised. : string = Falcon string or MemBuf to be encoded., encoding = Name of the encoding (as a string).
Function transcodeTo ( string, encoding ) ---> Returns: On success, the transcoded string. | Returns a binary buffer containing an encoded representation of a Falcon string. if the encoding is not known., an ParamError is raised. : string = Falcon string to be encoded., encoding = Name of the encoding (as a string).
Function ttString ( str ) ---> Write teletype a given string. : str = The string to be written.
Function typeOf ( item ) ---> Returns: A constant indicating the type of the item. | Returns an integer indicating the type of an item. : item = An item of any kind.
Function unsetenv ( varName ) ---> Clear environment variable value. : varName = Environment variable name (as a string)
Function unsubscribe ( msg, handler ) ---> Unregisters a registered callback from a slot. if the named message slot doesn't exist., an AccessError is raised. : msg = A string with the message name on which the item should be registered., handler = A callable item or instance providing callback support.
Function valof ( item ) ---> Returns: The item if it is not callable, or the call return value. | Calls callable items or returns non callable ones. : item = The item to be checked.
Function vmFalconPath (  ) ---> Returns: The default compiled-in load path, or the value of the | Returns default system path for Falcon load requests.
Function vmIsMain (  ) ---> Returns: True if the calling module is the main module. | Returns true if the calling module is the main module of the application.
Function vmModuleLine (  ) ---> Returns: An integer that represents a line number. | Returns the number of the line it has been called at.
Function vmModuleName (  ) ---> Returns: Logical name of this module. | Returns the logical name of this module.
Function vmModuleVersionInfo (  ) ---> Returns: Major, minor and revision numbers of the curerntly being executed module, | Returns an array containing current module version informations.
Function vmSearchPath (  ) ---> Returns: A module search path as set by the application when creating the virtual machine. | Returns the application specific load path.
Function vmSystemType (  ) ---> Returns: A string containing a small descriptiuon of the system architecture. | Returns a descriptive name of the overall system architecture.
Function vmVersionInfo (  ) ---> Returns: Major, minor and revision numbers of the running virtual machine in a 3 elements array. | Returns an array containing VM version informations.
Function vmVersionName (  ) ---> Returns: A string containing the symbolic name of this VM version. | Returns the nickname for this VM version.
Function whirlpool (  ) ---> Returns: A lowercase hexadecimal string with the Whirlpool hash. | Convenience function that calculates a 512 bits long Whirlpool hash
Function writeURI ( uri, data, The encoding. ) ---> Writes fully data to a given file or URI source. in case of write errors., an IoError is raised. : uri = The item to be read (URI or string), data = A string or membuf containing the data to be written., The encoding. = 
Function xmap ( mfunc, sequence ) ---> Returns: The mapped sequence. | Creates a new vector of items transforming each item in the original array through the mapping function, applying also filtering on undesired items. : mfunc = A function or sigma used to map the array., sequence = A sequence to be mapped.
Function yield (  ) ---> gives up the rest of the coroutine time slice.
Function yieldOut ( retval ) ---> Terminates current coroutine. : retval = a return value for the coroutine.
Method addFalconPath (  ) ---> {_BaseCompiler} Adds the default system paths to the path searched by this compiler.
Method setDirective ( dt, value ) ---> {_BaseCompiler} Returns: On success, a @a Module instance that contains the loaded module. | Compiles a script on the fly. if the input data is a file stream and there have been a read failure., an IoError is raised. : dt = Directive to be set., value = Value to be given to the directive.
Method add ( item ) ---> {Array} Adds an element to this array. : item = The item to be added.
Method back ( true to remove the front item. ) ---> {Array} Returns: The extracted item. | Returns and eventually extracts the last element in the array. if the array is empty., an AccessError is raised. : true to remove the front item. = 
Method comp ( source, A filtering function receiving one item at a time. ) ---> {Array} Returns: This array. | Appends elements to this array through a filter. : source = A sequence, a range or a callable generating items., A filtering function receiving one item at a time. = 
Method compact (  ) ---> {Array} Returns: Itself | Reduces the memory used by an array.
Method concat ( Separator to be put between the elements. ) ---> {Array} Returns: A single string. | Concatenate all the elements of an array in a string. : Separator to be put between the elements. = 
Method del ( item ) ---> {Array} Returns: true if at least one item has been removed, false otherwise. | Deletes the first element matching a given item. : item = The item that must be deleted.
Method delAll ( item ) ---> {Array} Returns: true if at least one item has been removed, false otherwise. | Deletes all the occurrences of a given item in this array. : item = The item that must be deleted.
Method fill ( item ) ---> {Array} Returns: This array. | Fills the array with the given element. : item = The item to be replicated.
Method find ( item, Optional first element to be searched., Optional last element +1 to be searched. ) ---> {Array} Returns: The position of the searched item in the array, or -1 if not found. | Searches for a given item in an array. : item = The array that will be searched., Optional first element to be searched. = , Optional last element +1 to be searched. = 
Method first (  ) ---> {Array} Returns: An iterator. | Returns an iterator to the head of this array.
Method front ( true to remove the front item. ) ---> {Array} Returns: The extracted item. | Returns and eventually extracts the first element in the array. if the array is empty., an AccessError is raised. : true to remove the front item. = 
Method head (  ) ---> {Array} Returns: The extracted item. | Extracts the first element from this array and returns it. if the array is empty., an AccessError is raised.
Method ins ( itempos, item ) ---> {Array} Inserts an item into this array array. : itempos =  The position where the item should be placed., item = The item to be inserted.
Method last (  ) ---> {Array} Returns: An iterator. | Returns an iterator to the last element in this array.
Method mcomp ( ... ) ---> {Array} Returns: This array. | Appends multiple elements to this array. : ... = One or more sequences or item generators.
Method merge ( array, Optional position of array 1 at which to place array2, First element of array to merge in this array, Last element - 1 of array2 to merge in this array ) ---> {Array} Merges the given array into this one. : array = Array containing the second half of the merge, read-only, Optional position of array 1 at which to place array2 = , First element of array to merge in this array = , Last element - 1 of array2 to merge in this array = 
Method mfcomp ( filter, ... ) ---> {Array} Returns: This array. | Appends multiple elements to this array through a filter. : filter = A filter function receiving each element before its insertion, or nil., ... = One or more sequences or item generators.
Method NM (  ) ---> {Array} Returns: The This array | Force an array to be non-method.
Method properties (  ) ---> {Array} Returns: An array with 0 or more strings. | Returns an array of properties (bindings) in the array.
Method remove ( itemPos, The last item to be removed, in range semantic. ) ---> {Array} Removes one or more elements in the array. : itemPos = The position of the item to be removed, or the first of the items to be removed., The last item to be removed, in range semantic. = 
Method scan ( func, Optional first element to be searched., Optional upper end of the range.. ) ---> {Array} Returns: The position of the searched item in the array, or -1 if not found. | Searches an array for an item satisfying arbitrary criteria. : func = Function that verifies the criterion., Optional first element to be searched. = , Optional upper end of the range.. = 
Method setProperty ( propName, value ) ---> {Array} Sets a binding (as a property) in the array. If the property can't be found., an AccessError is raised. : propName = A string representing the name of a property or a method inside the array., value = The property new value.
Method sort ( A function used to compare two items. ) ---> {Array} Sorts an array, possibly using an arbitrary ordering criterion. : A function used to compare two items. = 
Method tabField ( field ) ---> {Array} Returns: An item in the array or the default column value. | Returns one of the items in the array, given the field name. if the item is not an array., an AccessError is raised. : field = The field name or position to be retreived.
Method table (  ) ---> {Array} Returns: The table of which this item is a row. | Returns the table related with this array. if the item is not an array., an AccessError is raised.
Method tabRow (  ) ---> {Array} Returns: A number indicating the position of this row in the table, or | Returns the row ID of this element. if the item is not a table row (array)., an AccessError is raised.
Method tail (  ) ---> {Array} Returns: The extracted item. | Extracts the last element of an array and returns it.
Method close (  ) ---> {Barrier} Closes the barrier.
Method open (  ) ---> {Barrier} Opens the barrier.
Method decmb ( data ) ---> {Base64} Returns: The origianl data, as a binary sequence of bytes. | Decodes a previously encoded binary data. if the incoming data is not a correct base64 string., an ParseError is raised. : data = The data to be decoded.
Method decode ( data ) ---> {Base64} Returns: The original string (as an international text). | Decodes a previously encoded text data. if the incoming data is not a correct base64 string., an ParseError is raised. : data = The data to be decoded.
Method encode ( data ) ---> {Base64} Returns: The encoded string. | Transforms an input string or MemBuf into a Base64 encoded string. : data = The data to be encoded.
Method bitCount ( The amount of bits to use ) ---> {BitBuf} Returns: The BitBuf itself if @i bits was set, otherwise the amount of bits used in the bit-precise read/write functions. | Sets or gets the bit count used in writeBits() and readBits() : The amount of bits to use = 
Method bitsForInt ( n ) ---> {BitBuf} Returns: The amount of bits required to store an integer of the given value | Static. Returns the amount of bits required to store an integer of the given value : n = Integer to check
Method readableBits (  ) ---> {BitBuf} Returns: The remaining bits until the end of the BitBuf is reached | Returns the amount of bits left that can be read
Method readBits ( An arbitrary amount of integers ) ---> {BitBuf} Returns: An integer value. | Reads integers with a fixed bit width : An arbitrary amount of integers = 
Method rposBits (  ) ---> {BitBuf} Returns: The read position in bits if used as getter, otherwise the buffer itself | Returns the read position, in bits
Method sizeBits (  ) ---> {BitBuf} Returns: The buffer size, in bits | Returns the buffer size, in bits
Method wposBits (  ) ---> {BitBuf} Returns: The write position in bits if used as getter, otherwise the buffer itself | Returns the write position, in bits
Method writeBits ( An arbitrary amount of integers ) ---> {BitBuf} Returns: The BitBuf itself. | Writes integers with a fixed bit width : An arbitrary amount of integers = 
Method __add ( operand ) ---> {BOM} Returns: The value of @b self + @b operand. | Overrides binary addition operand. : operand = The second operand in the expression.
Method __call ( ... ) ---> {BOM} Returns: The value of @b self( ... ). | Overrides call operator "self()". : ... = The parameters passed to the original call.
Method __dec ( operand ) ---> {BOM} Returns: The value of -- @b self. | Overrides decrement unary prefix operand. : operand = The second operand in the expression.
Method __decpost ( operand ) ---> {BOM} Returns: The value of @b self --. | Overrides decrement unary postfix operand. : operand = The second operand in the expression.
Method __div ( operand ) ---> {BOM} Returns: The value of @b self / @b operand. | Overrides binary division operand. : operand = The second operand in the expression.
Method __getIndex ( index ) ---> {BOM} Returns: The value of @b self [@b index]. | Overrides array access operator [] : index = The index of the desired item.
Method __inc ( operand ) ---> {BOM} Returns: The value of ++ @b self. | Overrides increment unary prefix operand. : operand = The second operand in the expression.
Method __incpost ( operand ) ---> {BOM} Returns: The value of @b self ++. | Overrides increment unary postifx operand. : operand = The second operand in the expression.
Method __mod ( operand ) ---> {BOM} Returns: The value of @b self % @b operand. | Overrides modulo operand. : operand = The second operand in the expression.
Method __mul ( operand ) ---> {BOM} Returns: The value of @b self * @b operand. | Overrides binary multiplication operand. : operand = The second operand in the expression.
Method __pow ( operand ) ---> {BOM} Returns: The value of @b self ** @b operand. | Overrides power operand. : operand = The second operand in the expression.
Method __setIndex ( index, value ) ---> {BOM} Returns: The value of (@b self [@b index] = @b value). | Overrides array write operator [] : index = The index of the desired item., value = The value that must be set.
Method __sub ( operand ) ---> {BOM} Returns: The value of @b self - @b operand. | Overrides binary subtraction operand. : operand = The second operand in the expression.
Method baseClass (  ) ---> {BOM} Returns: A class item or nil. | Returns the class item from which an object has been instantiated.
Method bound (  ) ---> {BOM} Returns: True if the item is bound. | Determines if an item is bound or not.
Method className (  ) ---> {BOM} Returns: The class name of an object (a string) or nil. | Returns the name of the class an instance is instantiated from.
Method clone (  ) ---> {BOM} Returns: A copy of the item. | Performs a deep copy of the item. if the item is not cloneable., an CloneError is raised.
Method compare ( item ) ---> {BOM} Returns: -1, 0 or 1 depending on the comparation result. | Performs a lexicographical comparison. : item = The item to which this object must be compared.
Method derivedFrom ( cls ) ---> {BOM} Returns: true if the given class is one of the ancestors of this item. | Checks if this item has a given parent. : cls = A symbolic class name or a class instance.
Method describe ( Maximum inspect depth., Limit the display size of possibly very long items as i.e. strings or membufs. ) ---> {BOM} Returns the deep contents of an item on a string representation. : Maximum inspect depth. = , Limit the display size of possibly very long items as i.e. strings or membufs. = 
Method isCallable (  ) ---> {BOM} Returns: true if the item is callable, false otheriwse. | Determines if an item is callable.
Method len (  ) ---> {BOM} Returns: the count of items in the sequence, or 0. | Retrieves the length of a collection
Method metaclass (  ) ---> {BOM} Returns: The metaclass of this item. | Returns the metaclass associated with this item.
Method ptr (  ) ---> {BOM} Returns: An integer containing a pointer to this data. | Returns a raw memory pointer out of this data (as an integer).
Method serialize ( stream ) ---> {BOM} Serialize the item on a stream for persistent storage. on stream errors., an IoError is raised. : stream = The stream on which to perform serialization.
Method toString ( Optional object-specific format string. ) ---> {BOM} Coverts the object to string. : Optional object-specific format string. = 
Method typeId (  ) ---> {BOM} Returns: A constant indicating the type of the item. | Returns an integer indicating the type of this item.
Method append ( dict ) ---> {BSON} Returns: self | Append some data to the BSON object : dict = A dict (with keys that must be strings...)
Method asDict (  ) ---> {BSON} Return a dictionary representing the BSON object.
Method genOID ( Key name (default "_id") ) ---> {BSON} Returns: self | Generate and append an OID. : Key name (default "_id") = 
Method hasKey ( key ) ---> {BSON} Returns: true if BSON has that key |  : key = 
Method reset ( Reserve some space for internal buffer. ) ---> {BSON} Clear the BSON object, making it an "empty" one. : Reserve some space for internal buffer. = 
Method value ( key ) ---> {BSON} Returns: value for key given (might be nil), or nil. |  : key = The key of which the value should be changed or inserted.
Method find ( name ) ---> {BSONIter} Return true when (and set iterator position where) name is found in the BSON. : name = Key name
Method key (  ) ---> {BSONIter} Get the current BSON key string
Method next (  ) ---> {BSONIter} Return true if there is more data to iterate over
Method reset (  ) ---> {BSONIter} Reset to start of iterator.
Method value (  ) ---> {BSONIter} Get the current BSON value
Method __getIndex ( n ) ---> {ByteBuf} Returns: The byte at index n, as an integer [0..255] | Returns the byte at index n if n >= size(), an BufferError is raised. : n = Index.
Method __setIndex ( n, value ) ---> {ByteBuf} Sets the byte at index n if n >= size(), an BufferError is raised. : n = Index., value = Byte to set
Method capacity (  ) ---> {ByteBuf} Returns: The internal buffer size | Returns the internal buffer size
Method getEndian (  ) ---> {ByteBuf} Returns: One of ByteBuf.*_ENDIAN | Returns the currently used endian mode if used on anything that is not a ByteBuf base class object, an AccessError is raised.
Method growable (  ) ---> {ByteBuf} Returns: A boolean if used as getter, otherwise the buffer itself | Returns or sets whether the buffer is growable
Method ptr (  ) ---> {ByteBuf} Returns: A pointer to the inner memory | Returns a pointer to the inner memory
Method r16 ( Boolean indicating whether the short should be interpreted as a signed number ) ---> {ByteBuf} Returns: An integer | Reads one 16-bit integer (short) from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised. : Boolean indicating whether the short should be interpreted as a signed number = 
Method r32 ( Boolean indicating whether the integer should be interpreted as a signed number ) ---> {ByteBuf} Returns: An integer | Reads one 32-bit integer from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised. : Boolean indicating whether the integer should be interpreted as a signed number = 
Method r64 (  ) ---> {ByteBuf} Returns: An integer | Reads one signed 64-bit integer from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised.
Method r8 ( Boolean indicating whether the byte should be interpreted as a signed number ) ---> {ByteBuf} Returns: An integer | Reads one 8-bit integer (byte) from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised. : Boolean indicating whether the byte should be interpreted as a signed number = 
Method rb (  ) ---> {ByteBuf} Returns: A boolean | Reads one boolean from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised.
Method rd (  ) ---> {ByteBuf} Returns: A numeric value | Reads one 64-bit double/numeric from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised.
Method readable (  ) ---> {ByteBuf} Returns: The remaining readable bytes until the end is reached | Returns the remaining bytes that can be read
Method readPtr ( dest, bytes ) ---> {ByteBuf} Returns: The buffer itself | Reads data from the buffer and writes them to a memory address : dest = The memory address to read into, as an integer, bytes = Amount of bytes to copy
Method readString ( A existing string, or the char size of a new string to allocate. Default 1., Maximum amount of chars to read. Default 0., Reserve more space then required, for further operations. Default 0. ) ---> {ByteBuf} Returns: The resulting string | Reads a string from the buffer and returns it : A existing string, or the char size of a new string to allocate. Default 1. = , Maximum amount of chars to read. Default 0. = , Reserve more space then required, for further operations. Default 0. = 
Method readToBuf ( dest, Amount of bytes to copy. Default -1. ) ---> {ByteBuf} Returns: The amount of bytes actually copied | Reads data from the buffer and writes them to another buffer : dest = The MemBuf or ByteBuf to write to, Amount of bytes to copy. Default -1. = 
Method reserve ( size ) ---> {ByteBuf} Returns: The buffer itself | Enlarges the internal buffer size : size = New capacity
Method reset (  ) ---> {ByteBuf} Resets the buffer to an unused state.
Method resize (  ) ---> {ByteBuf} Returns: The buffer itself | Changes the actual used buffer size
Method rf (  ) ---> {ByteBuf} Returns: A numeric value | Reads one 32-bit float from the buffer if the end of the buffer is reached (as indicated by size()), an BufferError is raised.
Method rpos ( New read position ) ---> {ByteBuf} Returns: The read position if used as getter, otherwise the buffer itself | Returns or sets the read position : New read position = 
Method setEndian ( endian ) ---> {ByteBuf} Sets the used endian mode for read/write operations if used on anything that is not a ByteBuf base class object, an AccessError is raised. : endian = One of ByteBuf.*_ENDIAN
Method size (  ) ---> {ByteBuf} Returns: The buffer size in use | Returns the buffer size in use
Method toMemBuf ( If true, the MemBuf will be a copy of the buffer's memory ) ---> {ByteBuf} Returns: A 1-byte wide MemBuf | Exposes the inner memory as a MemBuf : If true, the MemBuf will be a copy of the buffer's memory = 
Method toString (  ) ---> {ByteBuf} Returns: A lowercase hexadecimal string | Returns the inner buffer memory as a string
Method w16 ( An arbitrary amount of integers ) ---> {ByteBuf} Returns: The buffer itself | Writes 16-bit integers (short) to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of integers = 
Method w32 ( An arbitrary amount of integers ) ---> {ByteBuf} Returns: The buffer itself | Writes 32-bit integers to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of integers = 
Method w64 ( An arbitrary amount of integers ) ---> {ByteBuf} Returns: The buffer itself | Writes 64-bit integers to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of integers = 
Method w8 ( An arbitrary amount of integers ) ---> {ByteBuf} Returns: The buffer itself | Writes 8-bit integers (byte) to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of integers = 
Method wb ( An arbitrary amount of booleans ) ---> {ByteBuf} Returns: The buffer itself | Writes booleans to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of booleans = 
Method wd ( An arbitrary amount of numbers ) ---> {ByteBuf} Returns: The buffer itself | Writes 64-bit doubles/numerics to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of numbers = 
Method wf ( An arbitrary amount of numbers ) ---> {ByteBuf} Returns: The buffer itself | Writes 32-bit floats to the buffer if the end of the buffer is reached and the buffer is not growable, an BufferError is raised. : An arbitrary amount of numbers = 
Method wpos ( New write position ) ---> {ByteBuf} Returns: The write position if used as getter, otherwise the buffer itself | Returns or sets the write position : New write position = 
Method write (  ) ---> {ByteBuf} Universal writing function
Method writeNoNT (  ) ---> {ByteBuf} Universal writing function, no null terminators
Method writePtr ( src, bytes ) ---> {ByteBuf} Returns: The buffer itself | Writes data from a memory address to the buffer : src = The memory address to read from, as an integer, bytes = Amount of bytes to copy
Method attributes (  ) ---> {Class} Returns: Nil if the class has no attributes, or a string-indexed dictionary. | Returns a dictionary containing annotation attributes of the given class.
Method properties (  ) ---> {Class} Returns: An array of strings representing property names. | Returns all the properties in the class.
Method attributes (  ) ---> {ClassMethod} Returns: Nil if the function has no attributes, or a string-indexed dictionary. | Returns the attributes associated with the method function.
Method expectValue (  ) ---> {CmdlineParser} Declares that current option needs a value.
Method onFree ( opt ) ---> {CmdlineParser} Called when the parser finds a free option. : opt = The free option being read.
Method onOption ( opt ) ---> {CmdlineParser} Called when the parser finds an option. : opt = The option being read.
Method onSwitchOff ( opt ) ---> {CmdlineParser} Called when the parser finds a switch being turned off. : opt = The switch being turned off.
Method onValue ( opt, value ) ---> {CmdlineParser} Called when the parser finds a value for a given option. : opt = The option being parsed., value = The given value for that option.
Method parse ( A specific string array that will be used as arguments to be parsed. ) ---> {CmdlineParser} Returns: true if the parsing is complete, false on error. | Starts command line parsing. : A specific string array that will be used as arguments to be parsed. = 
Method terminate (  ) ---> {CmdlineParser} Requests the parser to terminate parsing.
Method compile ( modName, data ) ---> {Compiler} Returns: On success, a @a Module instance that contains the compiled module. | Compiles a script on the fly. if the input data is a file stream and there have been a read failure., an IoError is raised. : modName = A logical unique that will be given to the module after compilation., data = The data to compile. It may be a string or a stream valid for input.
Method loadByName ( modName ) ---> {Compiler} Returns: On success, a @a Module instance that contains the loaded module. | Loads a module given its logical name. if the input data is a file stream and there have been a read failure., an IoError is raised. : modName = The logical name of the module to be loaded.
Method loadFile ( modPath, Alias under which the module should be loaded. ) ---> {Compiler} Returns: On success, a @a Module instance that contains the loaded module. | Loads a Falcon resource from a location on the filesystem. if the input data is a file stream and there have been a read failure., an IoError is raised. : modPath = Relative or absolute path to a loadable Falcon module or source., Alias under which the module should be loaded. = 
Method add ( key, value, If provided, the section where to add the entry ) ---> {ConfParser} Adds a key/value pairs to the INI file. : key = The key to which add the given value., value = The value, or value array, to be added., If provided, the section where to add the entry = 
Method addSection ( section ) ---> {ConfParser} Returns: True if the key is removed, false if the given key is not found. | Adds an empty section to the configuration file. : section = The name of the section to be added.
Method clearMain (  ) ---> {ConfParser} Clears the main section.
Method get ( key, If provided, the section where the key is found. ) ---> {ConfParser} Returns: The value (or values) of associated to the key, or nil if not found. | Retreives the value associated with a key. : key = The key of which the value is to be read., If provided, the section where the key is found. = 
Method getCategory ( category, If provided, the section where the category is defined. ) ---> {ConfParser} Returns: A dictionary containing a pair of key-values in the given category. | Retreives keys and values given under a certain category. : category = The category of which the values are required, If provided, the section where the category is defined. = 
Method getCategoryKeys ( category, If provided, the section where the category is defined. ) ---> {ConfParser} Returns: All the keys listed in the given category. | Get the keys filed under a given category. : category = The category of which the key list is required, If provided, the section where the category is defined. = 
Method getDictionary ( If given, the section from which to extract the dictionary. ) ---> {ConfParser} Returns: A dictionary containing a pair of key-values in the given section. | Retreives keys and values given under a certain category. : If given, the section from which to extract the dictionary. = 
Method getKeys ( An optional section on which to operate. ) ---> {ConfParser} Returns: All the keys listed in the given section, or in the main part. | Retreives the value associated with a key. : An optional section on which to operate. = 
Method getMultiple ( key, If provided, the section where the key is found. ) ---> {ConfParser} Returns: All the values of associated to the key, or nil if not found. | Retreives the value associated with a key. : key = The key of which the value is to be read., If provided, the section where the key is found. = 
Method getOne ( key, If provided, the section where the key is found. ) ---> {ConfParser} Returns: The value (or values) of associated to the key, or nil if not found. | Retreives the value associated with a key. : key = The key of which the value is to be read., If provided, the section where the key is found. = 
Method getSections (  ) ---> {ConfParser} Returns: All the values of associated to the key, or nil if not found. | Enumerates the sections that are declared in the file managed by this object.
Method read ( An optional input stream from where to read the file. ) ---> {ConfParser} Read the ini file. on read error., an IoError is raised. : An optional input stream from where to read the file. = 
Method remove ( key, If provided, the section where to remove the entry. ) ---> {ConfParser} Returns: True if the key is removed, false if the given key is not found. | Remove a key from the configuration file.. : key = The key to be removed., If provided, the section where to remove the entry. = 
Method removeCategory ( category, If provided, the section where to remove the entry. ) ---> {ConfParser} Remove a whole category from the configuration file.. : category = The category to be removed., If provided, the section where to remove the entry. = 
Method removeSection ( section ) ---> {ConfParser} Returns: True if the section is removed, false if the given section is not found. | Removes a whole section from the configuration file. : section = The name of the section to be removed.
Method set ( key, value, If provided, the section where to add the entry ) ---> {ConfParser} Sets the value of a certain key key. : key = The key to which add the given value., value = The value, or value array, to be added., If provided, the section where to add the entry = 
Method write ( An optional output stream on which to write the configuration file. ) ---> {ConfParser} Write the INI file. on write error., an IoError is raised. : An optional output stream on which to write the configuration file. = 
Method __call ( ... ) ---> {Continuation} Returns: The parameter passed to this method from inside the continuation. | Enters into or exit from a continuation. : ... = parameters passed to the callable stored in the instance, or to the return value.
Method complete (  ) ---> {Continuation} Returns: True if the continuation code has exited through any mean except calling the continuation. | Indicates if the continuation has been completely executed or not.
Method reset (  ) ---> {Continuation} Clears the continuation state.
Method close (  ) ---> {DBIHandle} Close the database handle.
Method close (  ) ---> {DBIRecordset} Close a recordset
Method getColumnCount (  ) ---> {DBIRecordset} Returns:  An integer number > 0. | Return the number of columns in the recordset.
Method getColumnNames (  ) ---> {DBIRecordset} Returns: an array of one or more strings, containing the | Gets the names of the recordset columns.
Method getCurrentRow (  ) ---> {DBIRecordset} Returns: An integer number >= 0 if the number of the current row is known, | Returns the number of the current row.
Method getRowCount (  ) ---> {DBIRecordset} Returns:  An integer number >= 0 if the number of the row count row is known, | Return the number of rows in the recordset.
Method addMatch ( The filter rule in DBUS rule specification format. ) ---> {DBus} Adds an active filter for incoming signals. in case of failure., an DBusError is raised. : The filter rule in DBUS rule specification format. = 
Method dispatch ( An optional timeout to be idle for messages to be sent or receive. ) ---> {DBus} Perform a dispatch loop on message queues. in case of failure., an DBusError is raised. : An optional timeout to be idle for messages to be sent or receive. = 
Method invoke ( destination, path, interface, name, ... ) ---> {DBus} Returns: an instance of @a DBusPendingCall class. | Invoke a remote DBUS method. in case of failure., an DBusError is raised. : destination = Well known name of the service provider where the method is searched., path = Path to the object in the service provider., interface = Interface in which the method is searched., name = Method name., ... = Parameters for the method invocation.
Method popMessage (  ) ---> {DBus} Returns: nil if no message is currently waiting, @a DBusMessage if a message was waiting. | Gets the next message waiting to be unqueued.
Method removeMatch ( The filter rule in DBUS rule specification format. ) ---> {DBus} Removes an active filter for incoming signals. in case of failure., an DBusError is raised. : The filter rule in DBUS rule specification format. = 
Method signal ( path, interface, name, ... ) ---> {DBus} Broadcast a message directed to all the potential DBUS listeners. in case of failure., an DBusError is raised. : path = the path from the object emitting the signal, interface = the interface the signal is emitted from, name = name of the signal, ... = Parameters for the signal.
Method startDispath (  ) ---> {DBus} 
Method stopDispatch (  ) ---> {DBus} 
Method cancel (  ) ---> {DBusPendingCall} Cancels a pending call.
Method completed ( set to true to force dispatching of messages (and state refresh). ) ---> {DBusPendingCall} Returns: True if the pending call can be waited on without blocking. | Checks if a pending call has completed. : set to true to force dispatching of messages (and state refresh). = 
Method wait (  ) ---> {DBusPendingCall} Returns: An item or an array of items returned by the remote method. | Wait for a pending call to complete and returns the remote method result. if the method call couldn't be performed, of if the remote, an DBusError is raised.
Method back ( If true, remove the dictionary entry too., If true, return the key instead of the value. ) ---> {Dictionary} Returns: The last value (or key) in the dictionary. | Returns the last item in the dictionary. if the dictionary is empty., an AccessError is raised. : If true, remove the dictionary entry too. = , If true, return the key instead of the value. = 
Method best ( key ) ---> {Dictionary} Returns: An iterator to the best possible position. | Returns an iterator set to a given key, or finds the best position for its insertion. : key = The key to be found.
Method clear (  ) ---> {Dictionary} Removes all the items from this dictionary.
Method comp ( source, A filtering function receiving one item at a time. ) ---> {Dictionary} Returns: This dictionary. | Appends elements to this dictionary through a filter. : source = A sequence, a range or a callable generating items., A filtering function receiving one item at a time. = 
Method do ( func, Accumulator item. ) ---> {Dictionary} Returns: The accumulator item, if provided, or nil. | Repeats a function for each key/value pair in the dictionary. : func = The function to be repeated., Accumulator item. = 
Method dop ( key, dflt, The operation to be applied. ) ---> {Dictionary} Returns: The value associated with @b key after the application of the | Dictionary default operation. : key = The key to be defaulted., dflt = The default value to be applied., The operation to be applied. = 
Method fill ( item ) ---> {Dictionary} Returns: This dictionary. | Fills the array with the given element. : item = The item to be replicated.
Method find ( key ) ---> {Dictionary} Returns: An iterator to the found item, or nil if not found. | Returns an iterator set to a given key. : key = The key to be found.
Method first (  ) ---> {Dictionary} Returns: An iterator. | Returns an iterator to the head of this dictionary.
Method front ( If true, remove the dictionary entry too., If true, return the key instead of the value. ) ---> {Dictionary} Returns: The first value (or key) in the dictionary. | Returns the first item in the dictionary. if the dictionary is empty, an AccessError is raised. : If true, remove the dictionary entry too. = , If true, return the key instead of the value. = 
Method get ( key ) ---> {Dictionary} Returns: The value associated with a key, or an out-of-band nil if not found. | Retreives a value associated with the given key : key = The key to be found.
Method keys (  ) ---> {Dictionary} Returns: An array containing all the keys. | Returns an array containing all the keys in this dictionary.
Method last (  ) ---> {Dictionary} Returns: An iterator. | Returns an iterator to the head of this dictionary.
Method mcomp ( ..., A filtering function receiving one item at a time. ) ---> {Dictionary} Returns: This dictionary. | Appends elements to this dictionary through a filter. : ... = One or more sequences, ranges or callables generating items., A filtering function receiving one item at a time. = 
Method merge ( sourceDict ) ---> {Dictionary} Merges a dictionary into this one. : sourceDict = A dictionary that will be inserted in destDict
Method mfcomp ( filter, ... ) ---> {Dictionary} Returns: This dictionary. | Appends elements to this dictionary through a filter. : filter = A filter function receiving each element before its insertion, or nil., ... = One or more sequences, ranges or callables generating items.
Method properties (  ) ---> {Dictionary} Returns: An array of strings representing property names. | Returns all the properties in the dictionary.
Method remove ( key ) ---> {Dictionary} Returns: True if the key is found and removed, false otherwise. | Removes a given key from the dictionary. : key = The key to be removed
Method setProperty ( propName, value ) ---> {Dictionary} Sets a property in dictionary based instances. If the property can't be found., an AccessError is raised. : propName = A string representing the name of a property or a method inside the dictionary., value = The property new value.
Method values (  ) ---> {Dictionary} Returns: An array containing all the values. | Extracts all the values in this dictionary.
Method close (  ) ---> {Directory} Closes the directory object.
Method descend ( Function to be called upon directories., Function to be called upon files. ) ---> {Directory} Descends into subdirectories, iteratively calling a function. : Function to be called upon directories. = , Function to be called upon files. = 
Method error (  ) ---> {Directory} Returns: A system error code. | Returns the last system error code that the directory operation causes.
Method read (  ) ---> {Directory} Returns: A string representing the next entry, or oob(0) when no new entries are left. | Returns the next entry in the directory.
Method addPage (  ) ---> {Doc} Returns: A new @a Page instance. | Creates a new page and adds it after the last page of a document.
Method getFont ( fontName, A @link "http://libharu.org/wiki/Documentation/Encodings" "valid encoding name". ) ---> {Doc} Returns: A @a Font instance. | Gets a font object for the specified font name. : fontName = A @link "http://libharu.org/wiki/Documentation/Fonts#Base14_Fonts" "valid font name"., A @link "http://libharu.org/wiki/Documentation/Encodings" "valid encoding name". = 
Method insertPage ( page ) ---> {Doc} Returns: A new @a Page instance. | Creates a new page and inserts it just before the specified page. : page = The page in front of which the new page will be inserted.
Method call__ ( [...] ) ---> {DynFunction} Returns: Either nil, a Falcon item or an instance of @a DynOpaque. | Calls the external dynamically loaded function. : [...] = 
Method toString (  ) ---> {DynFunction} Returns: A string representation of the function. | Returns a string representation of the function.
Method get ( decl, C Header declaration of a function ivoked at collection of generated items. ) ---> {DynLib} Returns: On success an instance of @a DynFunction class. | Gets a dynamic symbol in this library. in case of invalid declaration used as @b decl parameter., an ParseError is raised. : decl = The C header declaration., C Header declaration of a function ivoked at collection of generated items. = 
Method query ( decl, C Header declaration of a function ivoked at collection of generated items. ) ---> {DynLib} Returns: On success an instance of @a DynFunction class; nil if the symbol can't be found. | Gets a dynamic symbol in this library. in case of invalid declaration used as @b decl parameter., an ParseError is raised. : decl = The C header declaration., C Header declaration of a function ivoked at collection of generated items. = 
Method unload (  ) ---> {DynLib} Unloads a dynamic library from memory. on failure., an DynLibError is raised.
Method toString (  ) ---> {DynOpaque} Returns: A string representation of this object. | Returns s string representation of this object.
Method getSysErrDesc (  ) ---> {Error} Returns: System specific error description or nil if not available. | returns system specific error description.
Method heading (  ) ---> {Error} Creates a short textual representation of the error.
Method toString (  ) ---> {Error} Creates a textual representation of the error.
Method reset (  ) ---> {Event} Resets the event, preventing threads from acquiring it.
Method set (  ) ---> {Event} Sets the Event and allow a waiting thread to proceed.
Method read ( filename ) ---> {FileStat} Returns: True on success, false if the file cannot be queried. | Fills the data in this instance reading them from a system file. : filename = Relative or absolute path to a file for which stats must be read
Method format ( item, A string where to store the formatted data. ) ---> {Format} Returns: A formatted string | Performs desired formatting on a target item. if the format specifier can't be applied the item because of, an TypeError is raised. : item = The item to be formatted, A string where to store the formatted data. = 
Method parse ( fmtspec ) ---> {Format} Initializes the Format instance with an optional value. if the format specifier is not correct., an ParseError is raised. : fmtspec = Format specifier
Method toString (  ) ---> {Format} Returns: The format specifier. | Represents this format as a string.
Method attributes (  ) ---> {Function} Returns: Nil if the function has no attributes, or a string-indexed dictionary. | Returns a dictionary containing annotation attributes of the given function.
Method caller ( Caller level (starting from zero, the default). ) ---> {Function} Returns: The item having performed the nth call. | Gets the direct caller or one of the calling ancestors. : Caller level (starting from zero, the default). = 
Method name (  ) ---> {Function} Returns: A string containing the function name | Gets the symbolic name of the given function.
Method stack (  ) ---> {Function} Returns: A string containing all the stack trace up to this point. | Gets a string representation of the call stack.
Method trace ( Caller level (starting from zero, the default). ) ---> {Function} Returns: An array containing the data relative to the given trace level. | Gets a trace step in the call stack. : Caller level (starting from zero, the default). = 
Method ptr (  ) ---> {GarbagePointer} Returns: Deep data (as a pointer). | Returns the inner data stored in this pointer.
Method adjust ( The adjust mode used by the GC. ) ---> {GC} Returns: The mode currently set. | Sets or gets the automatic threshold levels adjust algorithm. : The adjust mode used by the GC. = 
Method enable ( mode ) ---> {GC} Turns automatic GC feature on or off. : mode = true to turn automatic GC on, false to turn it off.
Method perform ( Set to true to wait for the collection of free memory to be complete. ) ---> {GC} Returns: true if the gc has been actually performed, false otherwise. | Requests immediate check of garbage. : Set to true to wait for the collection of free memory to be complete. = 
Method change ( ncolors ) ---> {GdkColormap} Changes the value of the first ncolors in a private colormap to match the values in the colors array in the colormap. : ncolors = the number of colors to change.
Method get_screen (  ) ---> {GdkColormap} Returns: the screen for which this colormap was created. | Gets the screen for which this colormap was created.
Method get_system (  ) ---> {GdkColormap} Returns: the default colormap. | Gets the system's default colormap for the default screen.
Method get_system_size (  ) ---> {GdkColormap} Returns: the size of the system's default colormap. | Returns the size of the system's default colormap.
Method get_visual (  ) ---> {GdkColormap} Returns: the visual of the colormap. | Returns the visual for which a given colormap was created.
Method get_display (  ) ---> {GdkCursor} Returns: the GdkDisplay associated to cursor | Returns the display on which the GdkCursor is defined.
Method get_image (  ) ---> {GdkCursor} Returns: a GdkPixbuf representing cursor, or NULL | Returns a GdkPixbuf with the image used to display the cursor.
Method new_for_display ( display, cursor_type ) ---> {GdkCursor} Creates a new cursor from the set of builtin cursors. : display = the GdkDisplay for which the cursor will be created, cursor_type = cursor to create (GdkCursorType)
Method new_from_name ( name ) ---> {GdkCursor} Returns: a new GdkCursor, or NULL if there is no cursor with the given name | Creates a new cursor by looking up name in the current cursor theme. : name = the name of the cursor
Method new_from_pixbuf ( display, pixbuf, x, y ) ---> {GdkCursor} Returns: a new GdkCursor. | Creates a new cursor from a pixbuf. : display = the GdkDisplay for which the cursor will be created, pixbuf = the GdkPixbuf containing the cursor image, x = the horizontal offset of the 'hotspot' of the cursor., y = the vertical offset of the 'hotspot' of the cursor.
Method new_from_pixmap ( source, mask, fg, bg, x, y ) ---> {GdkCursor} Returns: a new GdkCursor. | Creates a new cursor from a given pixmap and mask. : source = the pixmap specifying the cursor (GdkPixmap)., mask = the pixmap specifying the mask, which must be the same size as source (GdkPixmap)., fg = the foreground color, used for the bits in the source which are 1 (GdkColor)., bg = the background color, used for the bits in the source which are 0 (GdkColor)., x = the horizontal offset of the 'hotspot' of the cursor., y = the vertical offset of the 'hotspot' of the cursor.
Method beep (  ) ---> {GdkDisplay} Emits a short beep on display
Method close (  ) ---> {GdkDisplay} Closes the connection to the windowing system for the given display, and cleans up associated resources.
Method device_is_grabbed ( device ) ---> {GdkDisplay} Returns: TRUE if there is a grab in effect for device. | Returns TRUE if there is an ongoing grab on device for display. : device = a GdkDevice
Method flush (  ) ---> {GdkDisplay} Flushes any requests queued for the windowing system.
Method get_default (  ) ---> {GdkDisplay} Returns: a GdkDisplay, or NULL if there is no default display. | Gets the default GdkDisplay.
Method get_default_screen (  ) ---> {GdkDisplay} Returns: the default GdkScreen object for display | Get the default GdkScreen for display.
Method get_n_screens (  ) ---> {GdkDisplay} Returns: number of screens. | Gets the number of screen managed by the display.
Method get_name (  ) ---> {GdkDisplay} Returns: a string representing the display name. | Gets the name of the display.
Method get_screen ( screen_num ) ---> {GdkDisplay} Returns: the GdkScreen object | Returns a screen object for one of the screens of the display. : screen_num = the screen number
Method keyboard_ungrab ( time ) ---> {GdkDisplay} Release any keyboard grab : time = a timestap (e.g GDK_CURRENT_TIME).
Method pointer_is_grabbed (  ) ---> {GdkDisplay} Returns: TRUE if an active X pointer grab is in effect | Test if the pointer is grabbed.
Method pointer_ungrab ( time ) ---> {GdkDisplay} Release any pointer grab. : time = a timestamp (e.g. GDK_CURRENT_TIME).
Method signal_closed (  ) ---> {GdkDisplay} The closed signal is emitted when the connection to the windowing system for display is closed.
Method signal_opened (  ) ---> {GdkDisplay} The opened signal is emitted when the connection to the windowing system for display is opened.
Method sync (  ) ---> {GdkDisplay} Flushes any requests queued for the windowing system and waits until all requests have been handled.
Method draw_line ( gc, x1, y1, x2, y2 ) ---> {GdkDrawable} Draws a line, using the foreground color and other attributes of the GdkGC. : gc = a GdkGC., x1 = the x coordinate of the start point., y1 = the y coordinate of the start point., x2 = the x coordinate of the end point., y2 = the y coordinate of the end point.
Method draw_point ( gc, x, y ) ---> {GdkDrawable} Draws a point, using the foreground color and other attributes of the GdkGC. : gc = a GdkGC., x = the x coordinate of the point., y = the y coordinate of the point.
Method draw_points ( gc, points ) ---> {GdkDrawable} Draws a number of points, using the foreground color and other attributes of the GdkGC. : gc = a GdkGC., points = an array of GdkPoint structures.
Method get_clip_region (  ) ---> {GdkDrawable} Returns: a GdkRegion. | Computes the region of a drawable that potentially can be written to by drawing primitives.
Method get_colormap (  ) ---> {GdkDrawable} Returns: the colormap, or NULL | Gets the colormap for drawable, if one is set; returns NULL otherwise.
Method get_depth (  ) ---> {GdkDrawable} Returns: number of bits per pixel | Obtains the bit depth of the drawable, that is, the number of bits that make up a pixel in the drawable's visual.
Method get_screen (  ) ---> {GdkDrawable} Returns: the GdkScreen associated with drawable | Gets the GdkScreen associated with a GdkDrawable.
Method get_size (  ) ---> {GdkDrawable} Returns: an array [ drawable's width, drawable's height ] | Returns the size of drawable.
Method get_visible_region (  ) ---> {GdkDrawable} Returns: a GdkRegion. | Computes the region of a drawable that is potentially visible.
Method get_visual (  ) ---> {GdkDrawable} Returns: a GdkVisual | Gets the GdkVisual describing the pixel format of drawable.
Method set_colormap ( colormap ) ---> {GdkDrawable} Sets the colormap associated with drawable. : colormap = a GdkColormap
Method copy (  ) ---> {GdkEvent} Returns: a copy of the event. | Copies a GdkEvent, copying or incrementing the reference count of the resources associated with it (e.g. GdkWindow's and strings).
Method events_pending (  ) ---> {GdkEvent} Returns: TRUE if any events are pending. | Checks if any events are ready to be processed for any display.
Method get (  ) ---> {GdkEvent} Returns: the next GdkEvent to be processed, or NULL if no events are pending. | Checks all open displays for a GdkEvent to process, to be processed on, fetching events from the windowing system if necessary.
Method get_axis ( axis_use ) ---> {GdkEvent} Returns: the value found or nil if the specified axis was not found. | Extract the axis value for a particular axis use from an event structure. : axis_use = the axis use to look for (GdkAxisUse).
Method get_coords (  ) ---> {GdkEvent} Returns: an array ( window x coordinate, window y coordinate ), or nil if the event did not deliver event window coordinates. | Extract the event window relative x/y coordinates from an event.
Method get_real_event (  ) ---> {GdkEvent} Returns: one of the Gdk event types. | Get a copy of the event cast to its real derived-type.
Method get_root_coords (  ) ---> {GdkEvent} Returns: an array ( window x coordinate, window y coordinate ), or nil if the event did not deliver root window coordinates | Extract the root window relative x/y coordinates from an event.
Method get_show_events (  ) ---> {GdkEvent} Returns: TRUE if event debugging output is enabled. | Gets whether event debugging output is enabled.
Method get_state (  ) ---> {GdkEvent} Returns: the state (GdkModifierType). | If the event contains a "state" field, returns it. Otherwise returns an empty state (0).
Method get_time (  ) ---> {GdkEvent} Returns: time stamp field from event | Returns the time stamp from event, if there is one; otherwise returns GDK_CURRENT_TIME.
Method peek (  ) ---> {GdkEvent} Returns: the first GdkEvent on some event queue, or NULL if no events are in any queues. | If there is an event waiting in the event queue of some open display, returns it.
Method put (  ) ---> {GdkEvent} Appends a copy of the given event onto the front of the event queue for event->any.window's display, or the default event queue if event->any.window is NULL.
Method set_show_events ( show_events ) ---> {GdkEvent} Sets whether a trace of received events is output. : show_events = TRUE to output event debugging information.
Method get_screen (  ) ---> {GdkGC} Returns: the GdkScreen for gc. | Gets the GdkScreen for which gc was created
Method get_values (  ) ---> {GdkGC} Returns: the GdkGCValues structure in which to store the results. | Retrieves the current values from a graphics context.
Method new_with_values ( drawable, values, values_mask ) ---> {GdkGC} Returns: the new graphics context. | Create a new GC with the given initial values. : drawable = a GdkDrawable. The created GC must always be used with drawables of the same depth as this one., values = a structure containing initial values for the GC (GdkGCValues)., values_mask = a bit mask indicating which fields in values are set (GdkGCValuesMask).
Method set_values ( values, values_mask ) ---> {GdkGC} Sets attributes of a graphics context in bulk. : values = struct containing the new values (GdkGCValues)., values_mask = mask indicating which struct fields are to be used (GdkGCValuesMask).
Method version (  ) ---> {GdkPixbuf} Returns: the full version of the gdk-pixbuf library as a string. | a static function returning the GdkPixbuf version.
Method create_from_data ( drawable, data, width, height, depth, fg, bg ) ---> {GdkPixmap} Returns: the GdkPixmap | Create a two-color pixmap from data in XBM data. : drawable = a GdkDrawable, used to determine default values for the new pixmap. Can be NULL, if the depth is given., data = the character data (string)., width = the width of the new pixmap in pixels., height = the height of the new pixmap in pixels., depth = the depth (number of bits per pixel) of the new pixmap., fg = the foreground color (GdkColor)., bg = the background color (GdkColor).
Method intersect ( src ) ---> {GdkRectangle} Returns: a GdkRectangle that is the intersection of this rectangle and the GdkRectangle specified by src. | Calculates the intersection of two rectangles. : src = a GdkRectangle
Method union ( src ) ---> {GdkRectangle} Returns: a GdkRectangle that is the smallest rectangle containing both this rectangle and the GdkRectangle specified by src. | Calculates the union of two rectangles. : src = a GdkRectangle.
Method copy (  ) ---> {GdkRegion} Returns: a new region identical to region | Copies region, creating an identical new region.
Method empty (  ) ---> {GdkRegion} Returns: TRUE if region is empty. | Finds out if the GdkRegion is empty.
Method equal ( region ) ---> {GdkRegion} Returns: TRUE if this and region are equal. | Finds out if the two regions are the same. : region = a GdkRegion
Method get_clipbox (  ) ---> {GdkRegion} Returns: a GdkRectangle | Obtains the smallest rectangle which includes the entire GdkRegion.
Method get_rectangles (  ) ---> {GdkRegion} Returns: an array of GdkRectangle | Obtains the area covered by the region as a list of rectangles.
Method intersect ( source ) ---> {GdkRegion} Sets the area of this instance to its intersection with the area of source. : source = a GdkRegion
Method offset ( dx, dy ) ---> {GdkRegion} Moves a region the specified distance. : dx = the distance to move the region horizontally, dy = the distance to move the region vertically
Method point_in ( x, y ) ---> {GdkRegion} Returns: TRUE if the point is in region. | Finds out if a point is in a region. : x = the x coordinate of a point, y = the y coordinate of a point
Method polygon ( points, fill_rule ) ---> {GdkRegion} Returns: a new GdkRegion based on the given polygon | Creates a new GdkRegion using the polygon defined by a number of points. : points = an array of GdkPoint, fill_rule = specifies which pixels are included in the region when the polygon overlaps itself (GdkFillRule).
Method rect_equal ( rectangle ) ---> {GdkRegion} Returns: TRUE if region and rectangle are equal. | Finds out if a regions is the same as a rectangle. : rectangle = a GdkRectangle
Method rect_in ( rectangle ) ---> {GdkRegion} Returns: GDK_OVERLAP_RECTANGLE_IN, GDK_OVERLAP_RECTANGLE_OUT, or GDK_OVERLAP_RECTANGLE_PART, depending on whether the rectangle is inside, outside, or partly inside the GdkRegion, respectively. | Tests whether a rectangle is within a region. : rectangle = a GdkRectangle
Method rectangle ( rectangle ) ---> {GdkRegion} Returns: a new region | Creates a new region containing the area rectangle. : rectangle = a GdkRectangle
Method shrink ( dx, dy ) ---> {GdkRegion} Resizes a region by the specified amount. Positive values shrink the region. Negative values expand it. : dx = the number of pixels to shrink the region horizontally, dy = the number of pixels to shrink the region vertically
Method subtract ( source ) ---> {GdkRegion} Subtracts the area of source from the area of this instance. : source = another GdkRegion
Method union ( source ) ---> {GdkRegion} Sets the area of this instance to the union of the areas this region and source. : source = a GdkRegion
Method union_with_rect ( rect ) ---> {GdkRegion} Sets the area of region to the union of the areas of region and rect. : rect = a GdkRectangle
Method xor ( source ) ---> {GdkRegion} Sets the area of this instance to the exclusive-OR of the areas of this region and source. : source = another GdkRegion
Method get_default (  ) ---> {GdkScreen} Returns: a GdkScreen, or nil if there is no default display. | Gets the default screen for the default display.
Method get_best (  ) ---> {GdkVisual} Returns: Best visual. | Get the visual with the most available colors for the default GDK screen.
Method get_best_depth (  ) ---> {GdkVisual} Returns: best available depth | Get the best available depth for the default GDK screen.
Method get_best_type (  ) ---> {GdkVisual} Returns: best visual type | Return the best available visual type for the default GDK screen.
Method get_best_with_both ( depth, visual_type ) ---> {GdkVisual} Returns: best visual. | Combines gdk_visual_get_best_with_depth() and gdk_visual_get_best_with_type(). : depth = a bit depth, visual_type = a visual type
Method get_best_with_depth ( depth ) ---> {GdkVisual} Returns: best visual for the given depth. | Get the best visual with depth depth for the default GDK screen. : depth = a bit depth
Method get_best_with_type ( visual_type ) ---> {GdkVisual} Returns: best visual of the given type | Get the best visual of the given visual_type for the default GDK screen. : visual_type = a visual type
Method get_screen (  ) ---> {GdkVisual} Returns: the screen to which this visual belongs (GdkScreen) | Gets the screen to which this visual belongs
Method get_system (  ) ---> {GdkVisual} Returns: System GdkVisual. | Get the system's default visual for the default GDK screen.
Method list_visuals (  ) ---> {GdkVisual} Returns: An array of available visuals. | Lists the available visuals for the default screen.
Method query_depths (  ) ---> {GdkVisual} Returns: An array of available depths. | This function returns the available bit depths for the default screen.
Method query_visual_types (  ) ---> {GdkVisual} Returns: An array of available visual types. | This function returns the available visual types for the default screen.
Method freeze_notify (  ) ---> {GObject} Increases the freeze count on object.
Method get_property ( property_name ) ---> {GObject} Returns: the property value | Gets a property of an object. : property_name = (string)
Method notify ( property_name ) ---> {GObject} Emits a "notify" signal for the property property_name on object. : property_name = (string)
Method ref (  ) ---> {GObject} Increases the reference count of object.
Method ref_sink (  ) ---> {GObject} Increase the reference count of object, and possibly remove the floating reference, if object has a floating reference.
Method set_property ( property_name, value ) ---> {GObject} Sets a property on an object. : property_name = name of the property to set, value = value for the property
Method signal_notify (  ) ---> {GObject} The notify signal is emitted on an object when one of its properties has been changed.
Method thaw_notify (  ) ---> {GObject} Reverts the effect of a previous call to freeze_notify().
Method unref (  ) ---> {GObject} Decreases the reference count of object.
Method get_artists (  ) ---> {GtkAboutDialog} Returns: string array containing the artists. | Returns the string which are displayed in the artists tab of the secondary credits dialog.
Method get_authors (  ) ---> {GtkAboutDialog} Returns: A string array containing the authors. | Returns the string which are displayed in the authors tab of the secondary credits dialog.
Method get_comments (  ) ---> {GtkAboutDialog} Returns: The comments. | Returns the comments string.
Method get_copyright (  ) ---> {GtkAboutDialog} Returns: The copyright string. | Returns the copyright string.
Method get_documenters (  ) ---> {GtkAboutDialog} Returns: string array containing the documenters. | Returns the string which are displayed in the documenters tab of the secondary credits dialog.
Method get_license (  ) ---> {GtkAboutDialog} Returns: The license information. | Returns the license information
Method get_logo (  ) ---> {GtkAboutDialog} Returns: the pixbuf displayed as logo (or nil). | Returns the pixbuf displayed as logo in the about dialog.
Method get_logo_icon_name (  ) ---> {GtkAboutDialog} Returns: the icon name displayed as logo. | Returns the icon name displayed as logo in the about dialog.
Method get_name (  ) ---> {GtkAboutDialog} Returns: The program name. |  Returns the program name displayed in the about dialog.
Method get_program_name (  ) ---> {GtkAboutDialog} Returns: The program name. | Returns the program name displayed in the about dialog.
Method get_translators_credits (  ) ---> {GtkAboutDialog} Returns: The translator credits string. | Returns the translator credits string which is displayed in the translators tab of the secondary credits dialog.
Method get_version (  ) ---> {GtkAboutDialog} Returns: The version string. | Returns the version string.
Method get_website (  ) ---> {GtkAboutDialog} Returns: The website URL. | Returns the website URL.
Method get_website_label (  ) ---> {GtkAboutDialog} Returns: The label used for the website link. | Returns the label used for the website link.
Method get_wrap_license (  ) ---> {GtkAboutDialog} Returns: true if the license text is wrapped | Returns whether the license text in about is automatically wrapped.
Method set_artists ( artists ) ---> {GtkAboutDialog} Sets the strings which are displayed in the artists tab of the secondary credits dialog. : artists = array of strings
Method set_authors ( authors ) ---> {GtkAboutDialog} Sets the strings which are displayed in the authors tab of the secondary credits dialog. : authors = array of strings
Method set_comments ( comments ) ---> {GtkAboutDialog} Sets the comments string to display in the about dialog. : comments = a comments string (or nil).
Method set_copyright ( copyright ) ---> {GtkAboutDialog} Sets the copyright string to display in the about dialog. : copyright = the copyright string (or nil).
Method set_documenters ( documenters ) ---> {GtkAboutDialog} Sets the strings which are displayed in the documenters tab of the secondary credits dialog. : documenters = array of strings.
Method set_email_hook ( func, data ) ---> {GtkAboutDialog} Installs a global function to be called whenever the user activates an email link in an about dialog. : func = a function to call when an email link is activated, or nil., data = data to pass to func, or nil.
Method set_license ( license ) ---> {GtkAboutDialog} Sets the license information to be displayed in the secondary license dialog. : license = the license information or nil.
Method set_logo ( logo ) ---> {GtkAboutDialog} Sets the pixbuf to be displayed as logo in the about dialog. : logo = a GdkPixbuf, or nil.
Method set_logo_icon_name ( icon_name ) ---> {GtkAboutDialog} Sets the pixbuf to be displayed as logo in the about dialog. : icon_name = an icon name, or nil.
Method set_name ( name ) ---> {GtkAboutDialog} Sets the name to display in the about dialog. : name = the program name (or nil).
Method set_program_name ( name ) ---> {GtkAboutDialog} Sets the name to display in the about dialog. : name = the program name
Method set_translator_credits ( translator_credits ) ---> {GtkAboutDialog} Sets the translator credits string which is displayed in the translators tab of the secondary credits dialog. : translator_credits = the translator credits (or nil).
Method set_url_hook ( func, data ) ---> {GtkAboutDialog} Installs a global function to be called whenever the user activates a URL link in an about dialog. : func = a function to call when a URL link is activated, or nil., data = data to pass to func, or nil.
Method set_version ( the ) ---> {GtkAboutDialog} Sets the version string to display in the about dialog. : the = version string (or nil).
Method set_website ( a ) ---> {GtkAboutDialog} Sets the URL to use for the website link. : a = URL string starting with "http://" (or nil).
Method set_website_label ( website_label ) ---> {GtkAboutDialog} Sets the label to be used for the website link. It defaults to the website URL. : website_label = the label used for the website link
Method set_wrap_license ( wrap_license ) ---> {GtkAboutDialog} Sets whether the license text in about is automatically wrapped. : wrap_license = wether to wrap the license
Method activate (  ) ---> {GtkAction} Emits the "activate" signal on the specified action, if it isn't insensitive.
Method block_activate (  ) ---> {GtkAction} Disable activation signals from the action
Method connect_accelerator (  ) ---> {GtkAction} Installs the accelerator for action if action has an accel path and group.
Method create_icon ( icon_size ) ---> {GtkAction} Returns: a widget that displays the icon for this action (GtkImage). | This function is intended for use by action implementations to create icons displayed in the proxy widgets. : icon_size = the size of the icon that should be created (GtkIconSize).
Method create_menu (  ) ---> {GtkAction} Returns: the menu item provided by the action (GtkMenu), or nil. | If action provides a GtkMenu widget as a submenu for the menu item or the toolbar item it creates, this function returns an instance of that menu.
Method create_menu_item (  ) ---> {GtkAction} Returns: a menu item connected to the action (GtkMenuItem). | Creates a menu item widget that proxies for the given action.
Method create_tool_item (  ) ---> {GtkAction} Returns: a toolbar item connected to the action (GtkToolItem). | Creates a toolbar item widget that proxies for the given action.
Method disconnect_accelerator (  ) ---> {GtkAction} Undoes the effect of one call to connect_accelerator().
Method get_accel_path (  ) ---> {GtkAction} Returns: the accel path for this action, or nil if none is set. | Returns the accel path for this action.
Method get_always_show_image (  ) ---> {GtkAction} Returns: true if the menu item proxies will always show their image | Returns whether action's menu item proxies will ignore the "gtk-menu-images" setting and always show their image, if available.
Method get_icon_name (  ) ---> {GtkAction} Returns: the icon name. | Gets the icon name of action.
Method get_is_important (  ) ---> {GtkAction} Returns: whether action is important | Checks whether action is important or not
Method get_label (  ) ---> {GtkAction} Returns: the label text | Gets the label text of action.
Method get_name (  ) ---> {GtkAction} Returns: the name of the action | Returns the name of the action.
Method get_proxies (  ) ---> {GtkAction} Returns: an array of proxy widgets (GtkWidget). | Returns the proxy widgets for an action.
Method get_sensitive (  ) ---> {GtkAction} Returns: true if the action itself is sensitive. | Returns whether the action itself is sensitive.
Method get_short_label (  ) ---> {GtkAction} Returns: the short label text | Gets the short label text of action.
Method get_stock_id (  ) ---> {GtkAction} Returns: the stock id | Gets the stock id of action.
Method get_tooltip (  ) ---> {GtkAction} Returns: the tooltip text | Gets the tooltip text of action.
Method get_visible (  ) ---> {GtkAction} Returns: true if the action itself is visible. | Returns whether the action itself is visible.
Method get_visible_horizontal (  ) ---> {GtkAction} Returns: whether action is visible when horizontal | Checks whether action is visible when horizontal
Method get_visible_vertical (  ) ---> {GtkAction} Returns: whether action is visible when horizontal | Checks whether action is visible when horizontal
Method is_sensitive (  ) ---> {GtkAction} Returns: true if the action and its associated action group are both sensitive. | Returns whether the action is effectively sensitive.
Method is_visible (  ) ---> {GtkAction} Returns: true if the action and its associated action group are both visible. | Returns whether the action is effectively visible.
Method set_accel_path ( accel_path ) ---> {GtkAction} Sets the accel path for this action. : accel_path = the accelerator path (string)
Method set_always_show_image (  ) ---> {GtkAction} Sets whether action's menu item proxies will ignore the "gtk-menu-images" setting and always show their image, if available.
Method set_icon_name ( icon_name ) ---> {GtkAction} Sets the icon name on action : icon_name = the icon name to set
Method set_is_important ( is_important ) ---> {GtkAction} Sets whether the action is important. : is_important = TRUE to make the action important
Method set_label ( label ) ---> {GtkAction} Sets the label of action. : label = the label text to set
Method set_sensitive ( sensitive ) ---> {GtkAction} Sets the sensitive property of the action to sensitive. : sensitive = true to make the action sensitive
Method set_short_label ( short_label ) ---> {GtkAction} Sets a shorter label text on action. : short_label = the label text to set
Method set_stock_id ( stock_id ) ---> {GtkAction} Sets the stock id on action : stock_id = the stock id
Method set_tooltip ( tooltip ) ---> {GtkAction} Sets the tooltip text on action : tooltip = the tooltip text
Method set_visible ( true ) ---> {GtkAction} Sets the visible property of the action to visible. : true = to make the action visible
Method set_visible_horizontal ( visible_horizontal ) ---> {GtkAction} Sets whether action is visible when horizontal : visible_horizontal = whether the action is visible horizontally
Method set_visible_vertical ( visible_vertical ) ---> {GtkAction} Sets whether action is visible when vertical : visible_vertical = whether the action is visible vertically
Method signal_activate (  ) ---> {GtkAction} The "activate" signal is emitted when the action is activated.
Method unblock_activate (  ) ---> {GtkAction} Reenable activation signals from the action
Method do_set_related_action ( action ) ---> {GtkActivatable} This is a utility function for GtkActivatable implementors. : action = the GtkAction to set
Method get_related_action (  ) ---> {GtkActivatable} Returns: the related GtkAction if one is set. | Gets the related GtkAction for activatable.
Method get_use_action_appearance (  ) ---> {GtkActivatable} Returns: whether activatable uses its actions appearance. | Gets whether this activatable should reset its layout and appearance when setting the related action or when the action changes appearance.
Method set_related_action ( action ) ---> {GtkActivatable} Sets the related action on the activatable object. : action = the GtkAction to set
Method set_use_action_appearance ( use_appearance ) ---> {GtkActivatable} Sets whether this activatable should reset its layout and appearance when setting the related action or when the action changes appearance : use_appearance = whether to use the actions appearance
Method sync_action_properties ( action ) ---> {GtkActivatable} This is called to update the activatable completely, this is called internally when the "related-action" property is set or unset and by the implementing class when "use-action-appearance" changes. : action = the related GtkAction or NULL.
Method changed (  ) ---> {GtkAdjustment} Emits a "changed" signal from the GtkAdjustment.
Method clamp_page ( lower, upper ) ---> {GtkAdjustment} Updates the GtkAdjustment value to ensure that the range between lower and upper is in the current page (i.e. between value and value + page_size). : lower = the lower value, upper = the upper value
Method configure ( value, lower, upper, step_increment, page_increment, page_size ) ---> {GtkAdjustment} Sets all properties of the adjustment at once. : value = the new value., lower = the new minimum value., upper = the new maximum value., step_increment = the step increment., page_increment = the page increment., page_size = the page size.
Method get_lower (  ) ---> {GtkAdjustment} Returns: The current minimum value of the adjustment. | Retrieves the minimum value of the adjustment.
Method get_page_increment (  ) ---> {GtkAdjustment} Returns: The current page increment of the adjustment. | Retrieves the page increment of the adjustment.
Method get_page_size (  ) ---> {GtkAdjustment} Returns: The current page size of the adjustment. | Retrieves the page size of the adjustment.
Method get_step_increment (  ) ---> {GtkAdjustment} Returns: The current step increment of the adjustment. | Retrieves the step increment of the adjustment.
Method get_upper (  ) ---> {GtkAdjustment} Returns: The current maximum value of the adjustment. | Retrieves the maximum value of the adjustment.
Method get_value (  ) ---> {GtkAdjustment} Returns: The current value of the adjustment. | Gets the current value of the adjustment.
Method set_lower ( lower ) ---> {GtkAdjustment} Sets the minimum value of the adjustment. : lower = the new minimum value
Method set_page_increment ( page_increment ) ---> {GtkAdjustment} Sets the page increment of the adjustment. : page_increment = the new page increment
Method set_page_size ( page_size ) ---> {GtkAdjustment} Sets the page size of the adjustment. : page_size = the new page size
Method set_step_increment ( step_increment ) ---> {GtkAdjustment} Sets the step increment of the adjustment. : step_increment = the new step increment
Method set_upper (  ) ---> {GtkAdjustment} Sets the maximum value of the adjustment.
Method set_value ( value ) ---> {GtkAdjustment} Sets the GtkAdjustment value. : value = the new value
Method signal_changed (  ) ---> {GtkAdjustment} Emitted when one or more of the GtkAdjustment fields have been changed, other than the value field.
Method signal_value_changed (  ) ---> {GtkAdjustment} Emitted when the GtkAdjustment value field has been changed.
Method value_changed (  ) ---> {GtkAdjustment} Emits a "value_changed" signal from the GtkAdjustment.
Method get_padding (  ) ---> {GtkAlignment} Returns: [ top, bottom, left, right ] | Gets the padding on the different sides of the widget.
Method set ( xalign, yalign, xscale, yscale ) ---> {GtkAlignment} Sets the GtkAlignment values. : xalign = , yalign = , xscale = , yscale = 
Method set_padding ( padding_top, padding_bottom, padding_left, padding_right ) ---> {GtkAlignment} Sets the padding on the different sides of the widget. : padding_top = the padding at the top of the widget, padding_bottom = the padding at the bottom of the widget, padding_left = the padding at the left of the widget, padding_right = the padding at the right of the widget.
Method set ( arrow_type, shadow_type ) ---> {GtkArrow} Sets the direction and style of the GtkArrow. : arrow_type = a valid GtkArrowType, shadow_type = a valid GtkShadowType
Method set ( xalign, yalign, ratio, obey_child ) ---> {GtkAspectFrame} Set parameters for an existing GtkAspectFrame. : xalign = Horizontal alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned), yalign = Vertical alignment of the child within the allocation of the GtkAspectFrame. This ranges from 0.0 (left aligned) to 1.0 (right aligned), ratio = The desired aspect ratio., obey_child = If true, ratio is ignored, and the aspect ratio is taken from the requistion of the child.
Method get_child (  ) ---> {GtkBin} Gets the child of the GtkBin, or Nil if the bin contains no child widget.
Method get_homogeneous (  ) ---> {GtkBox} Returns: TRUE if the box is homogeneous. | Returns whether the box is homogeneous (all children are the same size).
Method get_spacing (  ) ---> {GtkBox} Returns: spacing between children | Gets the value set by gtk_box_set_spacing().
Method pack_end ( child, expand, fill, padding ) ---> {GtkBox} Adds child to box, packed with reference to the end of box. : child = the GtkWidget to be added to box, expand = TRUE if the new child is to be given extra space allocated to box. The extra space will be divided evenly between all children of box that use this option., fill = TRUE if space given to child by the expand option is actually allocated to child, rather than just padding it. This parameter has no effect if expand is set to FALSE. A child is always allocated the full height of a GtkHBox and the full width of a GtkVBox. This option affects the other dimension., padding = extra space in pixels to put between this child and its neighbors, over and above the global amount specified by "spacing" property. If child is a widget at one of the reference ends of box, then padding pixels are also put between child and the reference edge of box.
Method pack_end_defaults ( widget ) ---> {GtkBox} Adds widget to box, packed with reference to the end of box. : widget = the GtkWidget to be added to box
Method pack_start ( child, expand, fill, padding ) ---> {GtkBox} Adds child to box, packed with reference to the start of box. : child = the GtkWidget to be added to box, expand = TRUE if the new child is to be given extra space allocated to box. The extra space will be divided evenly between all children of box that use this option., fill = TRUE if space given to child by the expand option is actually allocated to child, rather than just padding it. This parameter has no effect if expand is set to FALSE. A child is always allocated the full height of a GtkHBox and the full width of a GtkVBox. This option affects the other dimension., padding = extra space in pixels to put between this child and its neighbors, over and above the global amount specified by "spacing" property. If child is a widget at one of the reference ends of box, then padding pixels are also put between child and the reference edge of box.
Method pack_start_defaults ( widget ) ---> {GtkBox} Adds widget to box, packed with reference to the start of box. : widget = the GtkWidget to be added to box
Method query_child_packing ( child ) ---> {GtkBox} Returns: an array [ expand, fill, padding, GtkPackType ] | Obtains information about how child is packed into box. : child = the GtkWidget of the child to query
Method reorder_child ( child, position ) ---> {GtkBox} Moves child to a new position in the list of box children. : child = the GtkWidget to move, position = the new position for child in the list of children of box, starting from 0. If negative, indicates the end of the list
Method set_child_packing ( child, expand, fill, padding, pack_type ) ---> {GtkBox} Sets the way child is packed into box. : child = the GtkWidget of the child to set, expand = the new value of the "expand" child property, fill = the new value of the "fill" child property, padding = the new value of the "padding" child property, pack_type = the new value of the "pack-type" child property
Method set_homogeneous ( homogeneous ) ---> {GtkBox} Sets the "homogeneous" property of box, controlling whether or not all children of box are given equal space in the box. : homogeneous = a boolean value, TRUE to create equal allotments, FALSE for variable allotments.
Method get_name (  ) ---> {GtkBuildable} Returns: the name set with gtk_buildable_set_name() | Gets the name of the buildable object.
Method set_name ( name ) ---> {GtkBuildable} Sets the name of the buildable object. : name = name to set
Method clicked (  ) ---> {GtkButton} Emits a "clicked" signal to the given GtkButton.
Method enter (  ) ---> {GtkButton} Emits a "enter" signal to the given GtkButton.
Method get_alignment (  ) ---> {GtkButton} Returns: an array [ horizontal alignment, vertical alignment ] | Gets the alignment of the child in the button.
Method get_focus_on_click (  ) ---> {GtkButton} Returns: TRUE if the button grabs focus when it is clicked with the mouse. | Returns whether the button grabs focus when it is clicked with the mouse.
Method get_image (  ) ---> {GtkButton} Returns: a GtkWidget or nil in case there is no image | Gets the widget that is currenty set as the image of button.
Method get_image_position (  ) ---> {GtkButton} Returns: the position (GtkPositionType). | Gets the position of the image relative to the text inside the button.
Method get_label (  ) ---> {GtkButton} Returns: The text of the label widget, or nil. | Fetches the text from the label of the button.
Method get_relief (  ) ---> {GtkButton} Returns: The current GtkReliefStyle. | Returns the current relief style of the given GtkButton.
Method get_use_stock (  ) ---> {GtkButton} Returns: TRUE if the button label is used to select a stock item instead of being used directly as the label text. | Returns whether the button label is a stock item.
Method get_use_underline (  ) ---> {GtkButton} Returns: TRUE if an embedded underline in the button label indicates the mnemonic accelerator keys. | Returns whether an embedded underline in the button label indicates a mnemonic.
Method leave (  ) ---> {GtkButton} Emits a "leave" signal to the given GtkButton.
Method new_from_stock ( stock_id ) ---> {GtkButton} Returns: a new GtkButton | Creates a new GtkButton containing the image and text from a stock item. : stock_id = the name of the stock item
Method new_with_label ( label ) ---> {GtkButton} Returns: The newly created GtkButton widget. | Creates a GtkButton widget with a GtkLabel child containing the given text. : label = The text you want the GtkLabel to hold.
Method new_with_mnemonic ( label ) ---> {GtkButton} Returns: a new GtkButton | Creates a new GtkButton containing a label. : label = The text of the button, with an underscore in front of the mnemonic character
Method pressed (  ) ---> {GtkButton} Emits a "pressed" signal to the given GtkButton.
Method released (  ) ---> {GtkButton} Emits a "released" signal to the given GtkButton.
Method set_alignment ( xalign, yalign ) ---> {GtkButton} Sets the alignment of the child. : xalign = the horizontal position of the child, 0.0 is left aligned, 1.0 is right aligned, yalign = the vertical position of the child, 0.0 is top aligned, 1.0 is bottom aligned
Method set_focus_on_click ( focus_on_click ) ---> {GtkButton} Sets whether the button will grab focus when it is clicked with the mouse. : focus_on_click = whether the button grabs focus when clicked with the mouse
Method set_image ( image ) ---> {GtkButton} Set the image of button to the given widget. : image = a widget to set as the image for the button.
Method set_image_position ( position ) ---> {GtkButton} Sets the position of the image relative to the text inside the button. : position = the position (GtkPositionType).
Method set_label ( label ) ---> {GtkButton} Sets the text of the label of the button. : label = a string
Method set_relief ( newstyle ) ---> {GtkButton} Sets the relief style of the edges of the given GtkButton widget. : newstyle = The new GtkReliefStyle.
Method set_use_stock ( use_stock ) ---> {GtkButton} Use a stock id. : use_stock = TRUE if the button should use a stock item
Method set_use_underline ( use_underline ) ---> {GtkButton} Sets an underline. : use_underline = TRUE if underlines in the text indicate mnemonics
Method signal_activate (  ) ---> {GtkButton} The activate signal on GtkButton is an action signal and emitting it causes the button to animate press then release.
Method signal_clicked (  ) ---> {GtkButton} Emitted when the button has been activated (pressed and released).
Method signal_enter (  ) ---> {GtkButton} Emitted when the pointer enters the button.
Method signal_leave (  ) ---> {GtkButton} Emitted when the pointer leaves the button.
Method signal_pressed (  ) ---> {GtkButton} Emitted when the button is pressed.
Method signal_released (  ) ---> {GtkButton} Emitted when the button is released.
Method get_child_ipadding (  ) ---> {GtkButtonBox} Returns: an array ( pad_x, pad_y ). | Gets the default number of pixels that pad the buttons in a given button box.
Method get_child_secondary ( child ) ---> {GtkButtonBox} Returns: whether child should appear in a secondary group of children. | Returns whether child should appear in a secondary group of children. : child = a child of widget
Method get_child_size (  ) ---> {GtkButtonBox} Returns: an array ( minimum width, minimum height ). | Retrieves the current width and height of all child widgets in a button box.
Method get_layout (  ) ---> {GtkButtonBox} Returns: the method used to layout buttons in widget (GtkButtonBoxStyle). | Retrieves the method being used to arrange the buttons in a button box.
Method set_child_secondary ( child, is_secondary ) ---> {GtkButtonBox} Sets whether child should appear in a secondary group of children. : child = a child of widget, is_secondary = if TRUE, the child appears in a secondary group of the button box.
Method set_layout ( layout_style ) ---> {GtkButtonBox} Changes the way buttons are arranged in their container. : layout_style = the new layout style (GtkButtonBoxStyle).
Method editing_done (  ) ---> {GtkCellEditable} Emits the "editing-done" signal.
Method remove_widget (  ) ---> {GtkCellEditable} Emits the "remove-widget" signal.
Method signal_editing_done (  ) ---> {GtkCellEditable} This signal is a sign for the cell renderer to update its value from the cell_editable.
Method signal_remove_widget (  ) ---> {GtkCellEditable} This signal is meant to indicate that the cell is finished editing, and the widget may now be destroyed.
Method start_editing ( event ) ---> {GtkCellEditable} Begins editing on a cell_editable. : event = A GdkEvent, or NULL.
Method activate ( event, widget, path, background_area, cell_area, flags ) ---> {GtkCellRenderer} Returns: TRUE if the event was consumed/handled | Passes an activate event to the cell renderer for possible processing. : event = a GdkEvent, widget = widget that received the event (GtkWidget)., path = widget-dependent string representation of the event location; e.g. for GtkTreeView, a string representation of GtkTreePath, background_area = background area as passed to gtk_cell_renderer_render() (GdkRectangle)., cell_area = cell area as passed to gtk_cell_renderer_render() (GdkRectangle), flags = render flags (GtkCellRendererState)
Method get_alignment (  ) ---> {GtkCellRenderer} Returns: an array [ x alignment, y alignment ] | Returns xalign and yalign of the cell.
Method get_fixed_size (  ) ---> {GtkCellRenderer} Returns: an array [ fixed width of the cell, fixed height of the cell ]. | Fills in width and height with the appropriate size of cell.
Method get_padding (  ) ---> {GtkCellRenderer} Returns: an array ( x padding, y padding ) | Returns xpad and ypad of the cell.
Method get_sensitive (  ) ---> {GtkCellRenderer} Returns: TRUE if the cell renderer is sensitive | Returns the cell renderer's sensitivity.
Method get_size ( widget, cell_area ) ---> {GtkCellRenderer} Returns: an array ( xoffset, yoffset, width, height ). | Obtains the width and height needed to render the cell. : widget = the widget the renderer is rendering to, cell_area = The area a cell will be allocated (GdkRectangle), or nil.
Method get_visible (  ) ---> {GtkCellRenderer} Returns: TRUE if the cell renderer is visible | Returns the cell renderer's visibility.
Method render ( window, widget, background_area, cell_area, expose_area, flags ) ---> {GtkCellRenderer} Invokes the virtual render function of the GtkCellRenderer. : window = a GdkDrawable to draw to, widget = the widget owning window, background_area = entire cell area (GdkRectangle) (including tree expanders and maybe padding on the sides), cell_area = area normally rendered by a cell renderer (GdkRectangle), expose_area = area that actually needs updating (GdkRectangle), flags = flags that affect rendering (GtkCellRendererState)
Method set_alignment ( x, y ) ---> {GtkCellRenderer} Sets the renderer's alignment within its available space. : x = the x alignment of the cell renderer, y = the y alignment of the cell renderer
Method set_fixed_size ( width, height ) ---> {GtkCellRenderer} Sets the renderer size to be explicit, independent of the properties set. : width = the width of the cell renderer, or -1, height = the height of the cell renderer, or -1
Method set_padding ( xpad, ypad ) ---> {GtkCellRenderer} Sets the renderer's padding. : xpad = the x padding of the cell renderer, ypad = the y padding of the cell renderer
Method set_sensitive ( sensitive ) ---> {GtkCellRenderer} Sets the cell renderer's sensitivity. : sensitive = the sensitivity of the cell
Method set_visible ( visible ) ---> {GtkCellRenderer} Sets the cell renderer's visibility. : visible = the visibility of the cell
Method signal_editing_canceled (  ) ---> {GtkCellRenderer} This signal gets emitted when the user cancels the process of editing a cell.
Method signal_editing_started (  ) ---> {GtkCellRenderer} This signal gets emitted when a cell starts to be edited.
Method start_editing ( event, widget, path, background_area, cell_area, flags ) ---> {GtkCellRenderer} Returns: A new GtkCellEditable, or NULL | Passes an activate event to the cell renderer for possible processing. : event = a GdkEvent, widget = widget that received the event (GtkWidget)., path = widget-dependent string representation of the event location; e.g. for GtkTreeView, a string representation of GtkTreePath, background_area = background area as passed to gtk_cell_renderer_render() (GdkRectangle)., cell_area = cell area as passed to gtk_cell_renderer_render() (GdkRectangle), flags = render flags (GtkCellRendererState)
Method stop_editing ( canceled ) ---> {GtkCellRenderer} Informs the cell renderer that the editing is stopped. : canceled = TRUE if the editing has been canceled
Method signal_accel_cleared (  ) ---> {GtkCellRendererAccel} Gets emitted when the user has removed the accelerator.
Method signal_accel_edited (  ) ---> {GtkCellRendererAccel} Gets emitted when the user has selected a new accelerator.
Method signal_changed (  ) ---> {GtkCellRendererCombo} This signal is emitted each time after the user selected an item in the combo box, either by using the mouse or the arrow keys.
Method set_fixed_height_from_font ( number_of_rows ) ---> {GtkCellRendererText} Sets the height of a renderer to explicitly be determined by the "font" and "y_pad" property set on it. : number_of_rows = Number of rows of text each cell renderer is allocated, or -1
Method signal_edited (  ) ---> {GtkCellRendererText} This signal is emitted after renderer has been edited.
Method get_activatable (  ) ---> {GtkCellRendererToggle} Returns: TRUE if the cell renderer is activatable. | Returns whether the cell renderer is activatable.
Method get_active (  ) ---> {GtkCellRendererToggle} Returns: TRUE if the cell renderer is active. | Returns whether the cell renderer is active.
Method get_radio (  ) ---> {GtkCellRendererToggle} Returns: TRUE if we're rendering radio toggles rather than checkboxes | Returns whether we're rendering radio toggles rather than checkboxes.
Method set_activatable ( activatable ) ---> {GtkCellRendererToggle} Makes the cell renderer activatable. : activatable = TRUE to make the cell renderer activatable
Method set_active ( active ) ---> {GtkCellRendererToggle} Activates or deactivates a cell renderer. : active = TRUE to activate the cell renderer
Method set_radio ( radio ) ---> {GtkCellRendererToggle} If radio is TRUE, the cell renderer renders a radio toggle (i.e. a toggle in a group of mutually-exclusive toggles). : radio = TRUE to make the toggle look like a radio button
Method signal_toggled (  ) ---> {GtkCellRendererToggle} The toggled signal is emitted when the cell is toggled.
Method new_with_label ( label ) ---> {GtkCheckButton} Returns: a new GtkCheckButton | Creates a new GtkCheckButton with a GtkLabel to the right of it. : label = the text for the check button.
Method new_with_mnemonic ( label ) ---> {GtkCheckButton} Returns: a new GtkCheckButton | Creates a new GtkCheckButton containing a label. : label = The text of the button, with an underscore in front of the mnemonic character
Method get_active (  ) ---> {GtkCheckMenuItem} Returns: TRUE if the menu item is checked. | Returns whether the check menu item is active.
Method get_draw_as_radio (  ) ---> {GtkCheckMenuItem} Returns: Whether check_menu_item looks like a GtkRadioMenuItem | Returns whether check_menu_item looks like a GtkRadioMenuItem
Method get_inconsistent (  ) ---> {GtkCheckMenuItem} Returns: TRUE if inconsistent | Retrieves the value set by gtk_check_menu_item_set_inconsistent().
Method new_with_label ( label ) ---> {GtkCheckMenuItem} Returns: a new GtkCheckMenuItem. | Creates a new GtkCheckMenuItem with a label. : label = the string to use for the label.
Method new_with_mnemonic ( label ) ---> {GtkCheckMenuItem} Returns: a new GtkCheckMenuItem | Creates a new GtkCheckMenuItem containing a label. : label = the text of the button, with an underscore in front of the mnemonic character
Method set_active ( is_active ) ---> {GtkCheckMenuItem} Sets the active state of the menu item's check box. : is_active = boolean value indicating whether the check box is active.
Method set_draw_as_radio ( draw_as_radio ) ---> {GtkCheckMenuItem} Sets whether check_menu_item is drawn like a GtkRadioMenuItem : draw_as_radio = whether check_menu_item is drawn like a GtkRadioMenuItem
Method set_inconsistent ( setting ) ---> {GtkCheckMenuItem} Sets the CheckMenuItem inconsistent. : setting = TRUE to display an "inconsistent" third state check
Method signal_toggled (  ) ---> {GtkCheckMenuItem} This signal is emitted when the state of the check box is changed.
Method toggled (  ) ---> {GtkCheckMenuItem} Emits the GtkCheckMenuItem::toggled signal.
Method get_alpha (  ) ---> {GtkColorButton} Returns: an integer between 0 and 65535. | Returns the current alpha value.
Method get_color (  ) ---> {GtkColorButton} Returns: GdkColor of the widget. | Gets the current color.
Method get_title (  ) ---> {GtkColorButton} Returns: The title. | Gets the title of the color selection dialog.
Method get_use_alpha (  ) ---> {GtkColorButton} Returns: true if the color sample uses alpha channel, false if not. | Does the color selection dialog use the alpha channel?
Method new_with_color ( color ) ---> {GtkColorButton} Returns: a new color button. | Creates a new color button. : color = A GdkColor to set the current color with.
Method set_alpha ( alpha ) ---> {GtkColorButton} Sets the current opacity to be alpha. : alpha = an integer between 0 and 65535.
Method set_color ( color ) ---> {GtkColorButton} Sets the current color to be color. : color = A GdkColor to set the current color with.
Method set_title ( title ) ---> {GtkColorButton} Sets the title for the color selection dialog. : title = String containing new window title.
Method set_use_alpha ( use_alpha ) ---> {GtkColorButton} Sets whether or not the color button should use the alpha channel. : use_alpha = true if color button should use alpha channel, false if not.
Method signal_color_set (  ) ---> {GtkColorButton} The color-set signal is emitted when the user selects a color.
Method get_color_selection (  ) ---> {GtkColorSelectionDialog} Returns: the embedded GtkColorSelection. | Retrieves the GtkColorSelection widget embedded in the dialog.
Method append_text ( text ) ---> {GtkComboBox} Appends string to the list of strings stored in combo_box. : text = a string
Method get_active (  ) ---> {GtkComboBox} Returns: An integer which is the index of the currently active item, or -1 if there's no active item. | Returns the index of the currently active item, or -1 if there's no active item.
Method get_active_text (  ) ---> {GtkComboBox} Returns: the currently active text | Returns the currently active string in combo_box or NULL if none is selected.
Method get_add_tearoffs (  ) ---> {GtkComboBox} Returns: the current value of the :add-tearoffs property. | Gets the current value of the :add-tearoffs property.
Method get_button_sensitivity (  ) ---> {GtkComboBox} Returns: GTK_SENSITIVITY_ON if the dropdown button is sensitive when the model is empty, GTK_SENSITIVITY_OFF  if the button is always insensitive or GTK_SENSITIVITY_AUTO if it is only sensitive as long as the model has one item to be selected. | Returns whether the combo box sets the dropdown button sensitive or not when there are no items in the model.
Method get_column_span_column (  ) ---> {GtkComboBox} Returns: the column span column | Returns the column with column span information for combo_box.
Method get_focus_on_click (  ) ---> {GtkComboBox} Returns: TRUE if the combo box grabs focus when it is clicked with the mouse. | Returns whether the combo box grabs focus when it is clicked with the mouse.
Method get_row_span_column (  ) ---> {GtkComboBox} Returns: the row span column. | Returns the column with row span information for combo_box.
Method get_title (  ) ---> {GtkComboBox} Returns: the menu's title in tearoff mode. | Gets the current title of the menu in tearoff mode.
Method insert_text ( position, text ) ---> {GtkComboBox} Inserts string at position in the list of strings stored in combo_box. : position = An index to insert text, text = A string
Method new_text (  ) ---> {GtkComboBox} Returns: A new text combo box | Convenience function which constructs a new text combo box, which is a GtkComboBox just displaying strings.
Method popdown (  ) ---> {GtkComboBox} Hides the menu or dropdown list of combo_box.
Method popup (  ) ---> {GtkComboBox} Pops up the menu or dropdown list of combo_box.
Method prepend_text ( text ) ---> {GtkComboBox} Prepends string to the list of strings stored in combo_box. : text = A string
Method remove_text ( position ) ---> {GtkComboBox} Removes the string at position from combo_box. : position = Index of the item to remove
Method set_active ( index ) ---> {GtkComboBox} Sets the active item of combo_box to be the item at index. : index = An index in the model passed during construction, or -1 to have no active item
Method set_add_tearoffs ( add_tearoffs ) ---> {GtkComboBox} Sets whether the popup menu should have a tearoff menu item. : add_tearoffs = true to add tearoff menu items
Method set_button_sensitivity ( sensitivity ) ---> {GtkComboBox} Sets whether the dropdown button of the combo box should be always sensitive (GTK_SENSITIVITY_ON), never sensitive (GTK_SENSITIVITY_OFF) or only if there is at least one item to display (GTK_SENSITIVITY_AUTO). : sensitivity = (GtkSensitivityType) specify the sensitivity of the dropdown button
Method set_column_span_column ( column_span ) ---> {GtkComboBox} Sets the column with column span information for combo_box to be column_span. : column_span = A column in the model passed during construction
Method set_focus_on_click ( focus_on_click ) ---> {GtkComboBox} Sets whether the combo box will grab focus when it is clicked with the mouse. : focus_on_click = whether the combo box grabs focus when clicked with the mouse
Method set_row_span_column ( row_span ) ---> {GtkComboBox} Sets the column with row span information for combo_box to be row_span. : row_span = A column in the model passed during construction.
Method set_title ( title ) ---> {GtkComboBox} Sets the menu's title in tearoff mode. : title = a title for the menu in tearoff mode
Method set_wrap_width ( width ) ---> {GtkComboBox} Sets the wrap width of combo_box to be width. : width = Preferred number of columns
Method signal_changed (  ) ---> {GtkComboBox} Connect a VMSlot to the combo box changed signal and return it
Method signal_move_active (  ) ---> {GtkComboBox} Connect a VMSlot to the combo box move-active signal and return it
Method signal_popdown (  ) ---> {GtkComboBox} Connect a VMSlot to the combo box popdown signal and return it
Method signal_popup (  ) ---> {GtkComboBox} Connect a VMSlot to the combo box popup signal and return it
Method get_text_column (  ) ---> {GtkComboBoxEntry} Returns: A column in the data source model of entry box. | Returns the column which entry_box is using to get the strings from.
Method new_text (  ) ---> {GtkComboBoxEntry} Create a new text GtkComboBoxEntry.
Method set_text_column ( text_column ) ---> {GtkComboBoxEntry} Sets the model column which entry_box should use to get strings from to be text_column. : text_column = A column in model to get the strings from.
Method get_wrap_width (  ) ---> {GtkComBox} Returns: the wrap width | Returns the wrap width which is used to determine the number of columns for the popup menu.
Method add ( widget ) ---> {GtkContainer} Add a widget to the container. : widget = The widget
Method check_resize (  ) ---> {GtkContainer} ???
Method child_type (  ) ---> {GtkContainer} Returns: type identifier (integer) | Returns the type of the children supported by the container.
Method get_border_width (  ) ---> {GtkContainer} Returns: (integer) | Retrieves the border width of the container.
Method get_focus_child (  ) ---> {GtkContainer} Returns the current focus child widget inside container.
Method get_resize_mode (  ) ---> {GtkContainer} Returns the resize mode for the container.
Method remove ( widget ) ---> {GtkContainer} Removes widget from container. Widget must be inside container. : widget = 
Method resize_children (  ) ---> {GtkContainer} ???
Method set_border_width (  ) ---> {GtkContainer} Sets the border width of the container.
Method set_focus_child ( widget ) ---> {GtkContainer} Sets, or unsets if child is NULL, the focused child of container. : widget = 
Method set_reallocate_redraws ( need_redraws ) ---> {GtkContainer} Sets the reallocate_redraws flag of the container to the given value. : need_redraws = (boolean)
Method set_resize_mode (  ) ---> {GtkContainer} Sets the resize mode for the container.
Method add_action_widget ( child, response_id ) ---> {GtkDialog} Adds an activatable widget to the action area of a GtkDialog, connecting a signal handler that will emit the "response" signal on the dialog when the widget is activated. : child = an activatable widget, response_id = response ID for child
Method add_button ( button_text, response_id ) ---> {GtkDialog} Returns: the button widget that was added (GtkWidget) | Adds a button with the given text (or a stock button, if button_text is a stock ID) and sets things up so that clicking the button will emit the "response" signal with the given response_id. : button_text = text of button, or stock ID, response_id = response ID for the button
Method get_action_area (  ) ---> {GtkDialog} Returns: the action area. | Returns the action area of dialog.
Method get_content_area (  ) ---> {GtkDialog} Returns: the content area. | Returns the content area of dialog.
Method get_has_separator (  ) ---> {GtkDialog} Returns: true if the dialog has a separator. | Accessor for whether the dialog has a separator.
Method get_response_for_widget ( widget ) ---> {GtkDialog} Returns: the response id of widget, or GTK_RESPONSE_NONE if widget doesn't have a response id set. | Gets the response id of a widget in the action area of a dialog. : widget = a widget in the action area of dialog
Method get_widget_for_response ( response_id ) ---> {GtkDialog} Returns: the widget button that uses the given response_id, or nil. | Gets the widget button that uses the given response ID in the action area of a dialog. : response_id = the response ID used by the dialog widget
Method response ( response_id ) ---> {GtkDialog} Emits the "response" signal with the given response ID. : response_id = response ID
Method run (  ) ---> {GtkDialog} Returns: response ID | To be completed..
Method set_default_response ( response_id ) ---> {GtkDialog} Sets the last widget in the dialog's action area with the given response_id as the default widget for the dialog. : response_id = a response ID
Method set_has_separator ( setting ) ---> {GtkDialog} Sets whether the dialog has a separator above the buttons. TRUE by default. : setting = true to have a separator
Method set_response_sensitive ( response_id, setting ) ---> {GtkDialog} Calls gtk_widget_set_sensitive (widget, setting) for each widget in the dialog's action area with the given response_id. : response_id = a response ID, setting = true for sensitive
Method copy_clipboard (  ) ---> {GtkEditable} Copies the contents of the currently selected content in the editable and puts it on the clipboard.
Method cut_clipboard (  ) ---> {GtkEditable} Removes the contents of the currently selected content in the editable and puts it on the clipboard.
Method delete_selection (  ) ---> {GtkEditable} Deletes the currently selected text of the editable. This call doesn't do anything if there is no selected text.
Method delete_text ( start_pos, end_pos ) ---> {GtkEditable} Deletes a sequence of characters. : start_pos = start of text, end_pos = end of text
Method get_chars ( start of text (default 0), end of text (default -1) ) ---> {GtkEditable} Returns: contents of the widget as a string. | Retrieves a sequence of characters. : start of text (default 0) = , end of text (default -1) = 
Method get_editable (  ) ---> {GtkEditable} Returns: TRUE if editable is editable. | Retrieves whether editable is editable.
Method get_position (  ) ---> {GtkEditable} Returns: the cursor position | Retrieves the current position of the cursor relative to the start of the content of the editable.
Method get_selection_bounds (  ) ---> {GtkEditable} Returns: [ result (boolean), start_pos, end_pos ]. Result is true if an area is selected, false otherwise. | Retrieves the selection bound of the editable.
Method insert_text ( new_text, location of the position text will be inserted at. (default 0) ) ---> {GtkEditable} Returns: position | Inserts new_text into the contents of the widget, at position position. : new_text = the text to append, location of the position text will be inserted at. (default 0) = 
Method paste_clipboard (  ) ---> {GtkEditable} Pastes the content of the clipboard to the current position of the cursor in the editable.
Method select_region ( start_pos, end_pos ) ---> {GtkEditable} Selects a region of text. : start_pos = start of region, end_pos = end of region
Method set_editable ( is_editable ) ---> {GtkEditable} Determines if the user can edit the text in the editable widget or not. : is_editable = true if the user is allowed to edit the text in the widget
Method set_position ( position ) ---> {GtkEditable} Sets the cursor position in the editable to the given value. : position = the position of the cursor
Method get_activates_default (  ) ---> {GtkEntry} Returns: (boolean) true if the entry will activate the default widget | Retrieves the value set by set_activates_default().
Method get_alignment (  ) ---> {GtkEntry} Returns: the alignment | Gets the value set by gtk_entry_set_alignment().
Method get_buffer (  ) ---> {GtkEntry} Returns: A GtkEntryBuffer object. | Get the GtkEntryBuffer object which holds the text for this widget.
Method get_cursor_hadjustment (  ) ---> {GtkEntry} Returns: the horizontal cursor adjustment, or NULL  if none has been set. | Retrieves the horizontal cursor adjustment for the entry
Method get_has_frame (  ) ---> {GtkEntry} Returns: whether the entry has a beveled frame | Gets the value set by gtk_entry_set_has_frame().
Method get_icon_activatable ( icon_pos ) ---> {GtkEntry} Returns: TRUE if the icon is activatable. | Returns whether the icon is activatable. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_at_pos ( x, y ) ---> {GtkEntry} Returns: the index of the icon at the given position, or -1. | Finds the icon at the given position and return its index. : x = the x coordinate of the position to find, y = the y coordinate of the position to find
Method get_icon_name ( icon_pos ) ---> {GtkEntry} Returns: An icon name, or NULL if no icon is set or if the icon wasn't set from an icon name | Retrieves the icon name used for the icon, or NULL if there is no icon or if the icon was set by some other method (e.g., by pixbuf, stock or gicon). : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_pixbuf ( icon_pos ) ---> {GtkEntry} Returns: A GdkPixbuf, or NULL if no icon is set for this position. | Retrieves the image used for the icon. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_sensitive ( icon_pos ) ---> {GtkEntry} Returns: TRUE if the icon is sensitive. | Returns whether the icon appears sensitive or insensitive. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_stock ( icon_pos ) ---> {GtkEntry} Returns: A stock id, or NULL if no icon is set or if the icon wasn't set from a stock id. | Retrieves the stock id used for the icon, or NULL if there is no icon or if the icon was set by some other method (e.g., by pixbuf, icon name or gicon). : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_storage_type ( icon_pos ) ---> {GtkEntry} Returns: image representation being used | Gets the type of representation being used by the icon to store image data. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_tooltip_markup ( icon_pos ) ---> {GtkEntry} Returns: the tooltip text, or NULL. | Gets the contents of the tooltip on the icon at the specified position in entry. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_icon_tooltip_text ( icon_pos ) ---> {GtkEntry} Returns: the tooltip text, or NULL. | Gets the contents of the tooltip on the icon at the specified position in entry. : icon_pos = Icon position (GtkEntryIconPosition).
Method get_invisible_char (  ) ---> {GtkEntry} Returns: the current invisible char, or "", if the entry does not show invisible text at all. | Retrieves the character displayed in place of the real characters for entries with visibility set to false.
Method get_layout_offsets (  ) ---> {GtkEntry} Returns: an array ( X offset, Y offset ). | Obtains the position of the PangoLayout used to render text in the entry, in widget coordinates.
Method get_max_length (  ) ---> {GtkEntry} Returns: the maximum allowed number of characters in GtkEntry, or 0 if there is no maximum. | Retrieves the maximum allowed length of the text in entry.
Method get_overwrite_mode (  ) ---> {GtkEntry} Returns: whether the text is overwritten when typing. | Gets the value set by gtk_entry_set_overwrite_mode().
Method get_progress_fraction (  ) ---> {GtkEntry} Returns: a fraction from 0.0 to 1.0 | Returns the current fraction of the task that's been completed.
Method get_progress_pulse_step (  ) ---> {GtkEntry} Returns: a fraction from 0.0 to 1.0 | Retrieves the pulse step set with gtk_entry_set_progress_pulse_step().
Method get_text (  ) ---> {GtkEntry} Returns: the contents of the widget as a string. | Retrieves the contents of the entry widget.
Method get_text_length (  ) ---> {GtkEntry} Returns: the current number of characters in GtkEntry, or 0 if there are none. | Retrieves the current length of the text in entry.
Method get_visibility (  ) ---> {GtkEntry} Returns: TRUE if the text is currently visible | Retrieves whether the text in entry is visible.
Method get_width_chars (  ) ---> {GtkEntry} Returns: number of chars to request space for, or negative if unset | Gets the value set by gtk_entry_set_width_chars().
Method layout_index_to_text_index ( layout_index ) ---> {GtkEntry} Returns: byte index into the entry contents | Converts from a position in the entry contents (returned by gtk_entry_get_text()) to a position in the entry's PangoLayout (returned by gtk_entry_get_layout(), with text retrieved via pango_layout_get_text()). : layout_index = byte index into the entry layout text
Method new_with_buffer ( buffer ) ---> {GtkEntry} Creates a new entry with the specified text buffer. : buffer = The GtkEntryBuffer to use for the new GtkEntry.
Method new_with_max_length ( max ) ---> {GtkEntry} Creates a new GtkEntry widget with the given maximum length. : max = the maximum length of the entry, or 0 for no maximum. (other than the maximum length of entries.) The value passed in will be clamped to the range 0-65536.
Method progress_pulse (  ) ---> {GtkEntry} Indicates that some progress is made, but you don't know how much.
Method set_activates_default ( setting ) ---> {GtkEntry} If setting is TRUE, pressing Enter in the entry will activate the default widget for the window containing the entry. : setting = TRUE to activate window's default widget on Enter keypress
Method set_alignment ( xalign ) ---> {GtkEntry} Sets the alignment for the contents of the entry. : xalign = The horizontal alignment, from 0 (left) to 1 (right). Reversed for RTL layouts
Method set_buffer ( buffer ) ---> {GtkEntry} Set the GtkEntryBuffer object which holds the text for this widget. : buffer = a GtkEntryBuffer
Method set_cursor_hadjustment ( adjustment ) ---> {GtkEntry} Hooks up an adjustment to the cursor position in an entry, so that when the cursor is moved, the adjustment is scrolled to show that position. : adjustment = an adjustment which should be adjusted when the cursor is moved, or NULL
Method set_has_frame ( setting ) ---> {GtkEntry} Sets whether the entry has a beveled frame around it. : setting = new value (boolean).
Method set_icon_activatable ( icon_pos, activatable ) ---> {GtkEntry} Sets whether the icon is activatable. : icon_pos = Icon position (GtkEntryIconPosition)., activatable = TRUE if the icon should be activatable.
Method set_icon_from_icon_name ( icon_pos, icon_name ) ---> {GtkEntry} Sets the icon shown in the entry at the specified position from the current icon theme. : icon_pos = The position at which to set the icon (GtkEntryIconPosition)., icon_name = An icon name, or NULL.
Method set_icon_from_pixbuf ( icon_pos, pixbuf ) ---> {GtkEntry} Sets the icon shown in the specified position using a pixbuf. : icon_pos = Icon position (GtkEntryIconPosition)., pixbuf = A GdkPixbuf, or NULL.
Method set_icon_from_stock ( icon_pos, stock_id ) ---> {GtkEntry} Sets the icon shown in the entry at the specified position from a stock image. : icon_pos = Icon position (GtkEntryIconPosition)., stock_id = The name of the stock item, or NULL.
Method set_icon_sensitive ( icon_pos, sensitive ) ---> {GtkEntry} Sets the sensitivity for the specified icon. : icon_pos = Icon position (GtkEntryIconPosition)., sensitive = Specifies whether the icon should appear sensitive or insensitive
Method set_icon_tooltip_markup ( icon_pos, tooltip ) ---> {GtkEntry} Sets tooltip as the contents of the tooltip for the icon at the specified position. : icon_pos = Icon position (GtkEntryIconPosition)., tooltip = the contents of the tooltip for the icon, or NULL.
Method set_icon_tooltip_text ( icon_pos, tooltip ) ---> {GtkEntry} Sets tooltip as the contents of the tooltip for the icon at the specified position. : icon_pos = Icon position (GtkEntryIconPosition)., tooltip = the contents of the tooltip for the icon, or NULL.
Method set_invisible_char ( ch ) ---> {GtkEntry} Sets the entry invisible char : ch = a character
Method set_max_length ( max ) ---> {GtkEntry} Sets the maximum allowed length of the contents of the widget. : max = the maximum length of the entry, or 0 for no maximum. (other than the maximum length of entries.)
Method set_overwrite_mode ( overwrite ) ---> {GtkEntry} Sets whether the text is overwritten when typing in the GtkEntry. : overwrite = new value (boolean).
Method set_progress_fraction ( fraction ) ---> {GtkEntry} Causes the entry's progress indicator to "fill in" the given fraction of the bar. : fraction = fraction of the task that's been completed.
Method set_progress_pulse_step ( fraction ) ---> {GtkEntry} Sets the fraction of total entry width to move the progress bouncing block for each call to gtk_entry_progress_pulse(). : fraction = fraction between 0.0 and 1.0
Method set_text ( text ) ---> {GtkEntry} Sets the text in the widget to the given value, replacing the current contents. : text = the new text
Method set_visiblity ( visible ) ---> {GtkEntry} Sets whether the contents of the entry are visible or not. : visible = (boolean) true if the contents of the entry are displayed as plaintext
Method set_width_chars ( n_chars ) ---> {GtkEntry} Changes the size request of the entry to be about the right size for n_chars characters. : n_chars = width in chars
Method signal_activate (  ) ---> {GtkEntry} A keybinding signal which gets emitted when the user activates the entry.
Method signal_backspace (  ) ---> {GtkEntry} The backspace signal is a keybinding signal which gets emitted when the user asks for it.
Method signal_copy_clipboard (  ) ---> {GtkEntry} The copy-clipboard signal is a keybinding signal which gets emitted to copy the selection to the clipboard.
Method signal_cut_clipboard (  ) ---> {GtkEntry} The cut-clipboard signal is a keybinding signal which gets emitted to cut the selection to the clipboard.
Method signal_delete_from_cursor (  ) ---> {GtkEntry} The delete-from-cursor signal is a keybinding signal which gets emitted when the user initiates a text deletion.
Method signal_icon_press (  ) ---> {GtkEntry} The ::icon-press signal is emitted when an activatable icon is clicked.
Method signal_icon_release (  ) ---> {GtkEntry} The icon-release signal is emitted on the button release from a mouse click over an activatable icon.
Method signal_insert_at_cursor (  ) ---> {GtkEntry} The insert-at-cursor signal is a keybinding signal which gets emitted when the user initiates the insertion of a fixed string at the cursor.
Method signal_move_cursor (  ) ---> {GtkEntry} The move-cursor signal is a keybinding signal which gets emitted when the user initiates a cursor movement.
Method signal_paste_clipboard (  ) ---> {GtkEntry} The paste-clipboard signal is a keybinding signal which gets emitted to paste the contents of the clipboard into the text view.
Method signal_populate_popup (  ) ---> {GtkEntry} The populate-popup signal gets emitted before showing the context menu of the entry.
Method signal_preedit_changed (  ) ---> {GtkEntry} If an input method is used, the typed text will not immediately be committed to the buffer. So if you are interested in the text, connect to this signal.
Method signal_toggle_overwrite (  ) ---> {GtkEntry} The toggle-overwrite signal is a keybinding signal which gets emitted to toggle the overwrite mode of the entry.
Method text_index_to_layout_index ( text_index ) ---> {GtkEntry} Returns: byte index into the entry layout text | Converts from a position in the entry's PangoLayout (returned by gtk_entry_get_layout()) to a position in the entry contents (returned by gtk_entry_get_text()). : text_index = byte index into the entry contents
Method unset_invisible_char (  ) ---> {GtkEntry} Unsets the invisible char previously set with set_invisible_char().
Method get_bytes (  ) ---> {GtkEntryBuffer} Returns: The byte length of the buffer. | Retrieves the length in bytes of the buffer.
Method get_length (  ) ---> {GtkEntryBuffer} Returns: The number of characters in the buffer. | Retrieves the length in characters of the buffer.
Method get_max_length (  ) ---> {GtkEntryBuffer} Returns: the maximum allowed number of characters in GtkEntryBuffer, or 0 if there is no maximum. | Retrieves the maximum allowed length of the text in buffer.
Method get_text (  ) ---> {GtkEntryBuffer} Returns: (string) contents of buffer | Retrieves the contents of the buffer.
Method set_max_length ( max_length ) ---> {GtkEntryBuffer} Sets the maximum allowed length of the contents of the buffer. : max_length = the maximum length of the entry buffer, or 0 for no maximum.
Method set_text ( text ) ---> {GtkEntryBuffer} Sets the text in the buffer. : text = the new text
Method get_above_child (  ) ---> {GtkEventBox} Returns: true if the event box window is above the window of its child. | Returns whether the event box window is above or below the windows of its child.
Method get_visible_window (  ) ---> {GtkEventBox} Returns: true if the event box window is visible | Returns whether the event box has a visible window.
Method set_above_child ( above_child ) ---> {GtkEventBox} Set whether the event box window is positioned above the windows of its child, as opposed to below it. : above_child = (bollean) true if the event box window is above the windows of its child
Method set_visible_window ( visible_window ) ---> {GtkEventBox} Set whether the event box uses a visible or invisible child window. : visible_window = (boolean)
Method get_expanded (  ) ---> {GtkExpander} Returns: the current state of the expander. | Queries a GtkExpander and returns its current state.
Method get_label (  ) ---> {GtkExpander} Returns: The text of the label widget. | Fetches the text from a label widget including any embedded underlines indicating mnemonics and Pango markup, as set by gtk_expander_set_label().
Method get_label_widget (  ) ---> {GtkExpander} Returns: the label widget, or nil if there is none | Retrieves the label widget for the frame.
Method get_spacing (  ) ---> {GtkExpander} Returns: spacing between the expander and child. | Gets the value set by gtk_expander_set_spacing().
Method get_use_markup (  ) ---> {GtkExpander} Returns: true if the label's text will be parsed for markup | Returns whether the label's text is interpreted as marked up with the Pango text markup language.
Method get_use_underline (  ) ---> {GtkExpander} Returns: true if an embedded underline in the expander label indicates the mnemonic accelerator keys. | Returns whether an embedded underline in the expander label indicates a mnemonic.
Method new_with_mnemonic ( label ) ---> {GtkExpander} Creates a new expander using label as the text of the label. : label = the text of the label
Method set_expanded ( expanded ) ---> {GtkExpander} Sets the state of the expander. : expanded = whether the child widget is revealed
Method set_label ( a string ) ---> {GtkExpander} Sets the text of the label of the expander to label. : a string = 
Method set_label_widget ( label_widget ) ---> {GtkExpander} Set the label widget for the expander. This is the widget that will appear embedded alongside the expander arrow. : label_widget = the new label widget (or nil)
Method set_spacing ( distance ) ---> {GtkExpander} Sets the spacing field of expander, which is the number of pixels to place between expander and the child. : distance = between the expander and child in pixels.
Method set_use_markup ( use_markup ) ---> {GtkExpander} Sets whether the text of the label contains markup in Pango's text markup language. : use_markup = true if the label's text should be parsed for markup
Method set_use_underline ( use_underline ) ---> {GtkExpander} If true, an underline in the text of the expander label indicates the next character should be used for the mnemonic accelerator key. : use_underline = true if underlines in the text indicate mnemonics
Method get_action (  ) ---> {GtkFileChooser} Returns: the action that the file selector is performing (GtkFileChooserAction). | Gets the type of operation that the file chooser is performing.
Method get_create_folders (  ) ---> {GtkFileChooser} Returns: TRUE if the New Folder button should be displayed. | Gets whether file choser will offer to create new folders.
Method get_current_folder (  ) ---> {GtkFileChooser} Returns: the full path of the current folder, or nil if the current path cannot be represented as a local filename. | Gets the current folder of chooser as a local filename.
Method get_current_folder_uri (  ) ---> {GtkFileChooser} Returns: the URI for the current folder (or nil). | Gets the current folder of chooser as an URI.
Method get_do_overwrite_confirmation (  ) ---> {GtkFileChooser} Returns: TRUE if the file chooser will present a confirmation dialog; FALSE otherwise. | Queries whether a file chooser is set to confirm for overwriting when the user types a file name that already exists.
Method get_extra_widget (  ) ---> {GtkFileChooser} Returns: the current extra widget, or NULL | Gets the current preview widget.
Method get_filename (  ) ---> {GtkFileChooser} Returns: The currently selected filename, or nil if no file is selected, or the selected file can't be represented with a local filename. | Gets the filename for the currently selected file in the file selector.
Method get_filenames (  ) ---> {GtkFileChooser} Returns: An array of strings | Lists all the selected files and subfolders in the current folder of chooser.
Method get_local_only (  ) ---> {GtkFileChooser} Returns: true if only local files can be selected. | Gets whether only local files can be selected in the file selector.
Method get_preview_filename (  ) ---> {GtkFileChooser} Returns: the filename to preview, or NULL if no file is selected, or if the selected file cannot be represented as a local filename. | Gets the filename that should be previewed in a custom preview widget.
Method get_preview_uri (  ) ---> {GtkFileChooser} Returns: the URI for the file to preview, or NULL if no file is selected. | Gets the URI that should be previewed in a custom preview widget.
Method get_preview_widget (  ) ---> {GtkFileChooser} Returns: the current preview widget, or nil. | Gets the current preview widget.
Method get_preview_widget_active (  ) ---> {GtkFileChooser} Returns: true if the preview widget is active for the current filename | Gets whether the preview widget set by gtk_file_chooser_set_preview_widget() should be shown for the current filename.
Method get_select_multiple (  ) ---> {GtkFileChooser} Returns: TRUE if multiple files can be selected. | Gets whether multiple files can be selected in the file selector.
Method get_show_hidden (  ) ---> {GtkFileChooser} Returns: true if hidden files and folders are displayed. | Gets whether hidden files and folders are displayed in the file selector.
Method get_uri (  ) ---> {GtkFileChooser} Returns: The currently selected URI, or NULL if no file is selected. | Gets the URI for the currently selected file in the file selector.
Method get_uris (  ) ---> {GtkFileChooser} Returns: An array of strings. | Lists all the selected files and subfolders in the current folder of chooser.
Method get_use_preview_label (  ) ---> {GtkFileChooser} Returns: TRUE if the file chooser is set to display a label with the name of the previewed file, FALSE otherwise | Gets whether a stock label should be drawn with the name of the previewed file.
Method select_all (  ) ---> {GtkFileChooser} Selects all the files in the current folder of a file chooser.
Method select_filename ( filename ) ---> {GtkFileChooser} Returns: true if both the folder could be changed and the file was selected successfully, false otherwise | Selects a filename. : filename = the filename to select
Method select_uri ( uri ) ---> {GtkFileChooser} Returns: true if both the folder could be changed and the URI was selected successfully, false otherwise | Selects the file to by uri. : uri = the URI to set as current
Method set_action ( action ) ---> {GtkFileChooser} Sets the type of operation that the chooser is performing; the user interface is adapted to suit the selected action. : action = the action that the file selector is performing (GtkFileChooserAction).
Method set_create_folders ( create_folders ) ---> {GtkFileChooser} Sets whether file choser will offer to create new folders. : create_folders = TRUE if the New Folder button should be displayed
Method set_current_folder ( filename ) ---> {GtkFileChooser} Returns: true if the folder could be changed successfully, false otherwise. | Sets the current folder for chooser from a local filename. : filename = the full path of the new current folder
Method set_current_folder_uri ( uri ) ---> {GtkFileChooser} Returns: true if the folder could be changed successfully, false otherwise | Sets the current folder for chooser from an URI. : uri = the URI for the new current folder
Method set_current_name ( the ) ---> {GtkFileChooser} Sets the current name in the file selector, as if entered by the user. : the = filename to use, as a UTF_8 string.
Method set_do_overwrite_confirmation ( do_overwrite_confirmation ) ---> {GtkFileChooser} Sets whether a file chooser in GTK_FILE_CHOOSER_ACTION_SAVE mode will present a confirmation dialog if the user types a file name that already exists. : do_overwrite_confirmation = whether to confirm overwriting in save mode
Method set_extra_widget ( extra_widget ) ---> {GtkFileChooser} Sets an application_supplied widget to provide extra options to the user. : extra_widget = widget for extra options
Method set_filename ( filename ) ---> {GtkFileChooser} Returns: true if both the folder could be changed and the file was selected successfully, false otherwise. | Sets filename as the current filename for the file chooser, by changing to the file's parent folder and actually selecting the file in list. : filename = the filename to set as current
Method set_local_only ( local_only ) ---> {GtkFileChooser} Sets whether only local files can be selected in the file selector. : local_only = true if only local files can be selected
Method set_preview_widget ( preview_widget ) ---> {GtkFileChooser} Sets an application_supplied widget to use to display a custom preview of the currently selected file. : preview_widget = widget for displaying preview.
Method set_preview_widget_active ( active ) ---> {GtkFileChooser} Sets whether the preview widget set by gtk_file_chooser_set_preview_widget() should be shown for the current filename. : active = whether to display the user_specified preview widget
Method set_select_multiple ( select_multiple ) ---> {GtkFileChooser} Sets whether multiple files can be selected in the file selector. : select_multiple = true if multiple files can be selected.
Method set_show_hidden ( show_hidden ) ---> {GtkFileChooser} Sets whether hidden files and folders are displayed in the file selector. : show_hidden = true if hidden files and folders should be displayed.
Method set_uri ( uri ) ---> {GtkFileChooser} Returns: true if both the folder could be changed and the URI was selected successfully, false otherwise. | Sets the file referred to by uri as the current file for the file chooser, by changing to the URI's parent folder and actually selecting the URI in the list. : uri = the URI to set as current
Method set_use_preview_label ( use_label ) ---> {GtkFileChooser} Sets whether the file chooser should display a stock label with the name of the file that is being previewed. : use_label = whether to display a stock label with the name of the previewed file
Method signal_confirm_overwrite (  ) ---> {GtkFileChooser} This signal gets emitted whenever it is appropriate to present a confirmation dialog when the user has selected a file name that already exists.
Method signal_current_folder_changed (  ) ---> {GtkFileChooser} This signal is emitted when the current folder in a GtkFileChooser changes.
Method signal_file_activated (  ) ---> {GtkFileChooser} This signal is emitted when the user "activates" a file in the file chooser.
Method signal_selection_changed (  ) ---> {GtkFileChooser} This signal is emitted when there is a change in the set of selected files in a GtkFileChooser.
Method signal_update_preview (  ) ---> {GtkFileChooser} This signal is emitted when the preview in a file chooser should be regenerated.
Method unselect_all (  ) ---> {GtkFileChooser} Unselects all the files in the current folder of a file chooser.
Method unselect_filename ( filename ) ---> {GtkFileChooser} Unselects a currently selected filename. : filename = the filename to unselect
Method unselect_uri ( uri ) ---> {GtkFileChooser} Unselects the file referred to by uri. : uri = the URI to unselect
Method get_focus_on_click (  ) ---> {GtkFileChooserButton} Returns: true if the button grabs focus when it is clicked with the mouse | Returns whether the button grabs focus when it is clicked with the mouse.
Method get_title (  ) ---> {GtkFileChooserButton} Returns: the browse dialog's title. | Retrieves the title of the browse dialog used by button.
Method get_width_chars (  ) ---> {GtkFileChooserButton} Returns: an integer width (in characters) that the button will use to size itself. | Retrieves the width in characters of the button widget's entry and/or label.
Method new_with_dialog ( dialog ) ---> {GtkFileChooserButton} Returns: a new button widget. | Creates a GtkFileChooserButton widget which uses dialog as its file-picking window. : dialog = the widget to use as dialog
Method set_focus_on_click ( focus_on_click ) ---> {GtkFileChooserButton} Sets whether the button will grab focus when it is clicked with the mouse. : focus_on_click = whether the button grabs focus when clicked with the mouse
Method set_title ( title ) ---> {GtkFileChooserButton} Modifies the title of the browse dialog used by button. : title = the new browse dialog title.
Method set_width_chars ( n_chars ) ---> {GtkFileChooserButton} Sets the width (in characters) that button will use to n_chars. : n_chars = the new width, in characters.
Method signal_file_set (  ) ---> {GtkFileChooserButton} The file-set signal is emitted when the user selects a file.
Method add_custom ( bitfield, func, data ) ---> {GtkFileFilter} Adds rule to a filter that allows files based on a custom callback function. : bitfield = bitfield of flags (GtkFileFilterFlags) indicating the information that the custom filter function needs., func = callback function; if the function returns TRUE, then the file will be displayed., data = data to pass to func, or nil
Method add_mime_type ( mime_type ) ---> {GtkFileFilter} Adds a rule allowing a given mime type to filter. : mime_type = name of a MIME type
Method add_pattern ( pattern ) ---> {GtkFileFilter} Adds a rule allowing a shell style glob to a filter. : pattern = a shell style glob
Method add_pixbuf_formats (  ) ---> {GtkFileFilter} Adds a rule allowing image files in the formats supported by GdkPixbuf.
Method filter ( filter_info ) ---> {GtkFileFilter} Returns: TRUE if the file should be displayed | Tests whether a file should be displayed according to filter. : filter_info = a GtkFileFilterInfo structure containing information about a file.
Method get_name (  ) ---> {GtkFileFilter} Returns: The human-readable name of the filter, or NULL. | Gets the human-readable name for the filter.
Method get_needed (  ) ---> {GtkFileFilter} Returns: bitfield of flags (GtkFileFilterFlags) indicating needed fields when calling gtk_file_filter_filter() | Gets the fields that need to be filled in for the structure passed to gtk_file_filter_filter()
Method set_name ( name ) ---> {GtkFileFilter} Sets the human-readable name of the filter. : name = the human-readable-name for the filter, or NULL to remove any existing name.
Method get_has_window (  ) ---> {GtkFixed} Returns: true if fixed has its own window. | Gets whether the GtkFixed has its own GdkWindow.
Method move ( x, y ) ---> {GtkFixed} Moves a child of a GtkFixed container to the given position. : x = the horizontal position to move the widget to., y = the vertical position to move the widget to.
Method put ( x, y ) ---> {GtkFixed} Adds a widget to a GtkFixed container at the given position. : x = the horizontal position to place the widget at., y = the vertical position to place the widget at.
Method set_has_window ( has_window ) ---> {GtkFixed} Sets whether a GtkFixed widget is created with a separate GdkWindow for widget->window or not. : has_window = true if a separate window should be created
Method get_font_name (  ) ---> {GtkFontButton} Returns: the font name. | Retrieves the name of the currently selected font.
Method get_show_size (  ) ---> {GtkFontButton} Returns: whether the font size will be shown in the label. | Returns whether the font size will be shown in the label.
Method get_show_style (  ) ---> {GtkFontButton} Returns: whether the font style will be shown in the label. | Returns whether the name of the font style will be shown in the label.
Method get_title (  ) ---> {GtkFontButton} Returns: the title string | Retrieves the title of the font selection dialog.
Method get_use_font (  ) ---> {GtkFontButton} Returns: whether the selected font is used in the label. | Returns whether the selected font is used in the label.
Method get_use_size (  ) ---> {GtkFontButton} Returns: whether the selected size is used in the label. | Returns whether the selected size is used in the label.
Method new_with_font ( fontname ) ---> {GtkFontButton} Returns: a new font picker widget. | Creates a new font picker widget. : fontname = Name of font to display in font selection dialog
Method set_font_name ( fontname ) ---> {GtkFontButton} Returns: Return value of gtk_font_selection_dialog_set_font_name() if the font selection dialog exists, otherwise FALSE. | Sets or updates the currently-displayed font in font picker dialog. : fontname = Name of font to display in font selection dialog
Method set_show_size ( show_size ) ---> {GtkFontButton} If show_size is TRUE, the font size will be displayed along with the name of the selected font. : show_size = TRUE if font size should be displayed in dialog.
Method set_show_style ( show_style ) ---> {GtkFontButton} If show_style is TRUE, the font style will be displayed along with name of the selected font. : show_style = TRUE if font style should be displayed in label.
Method set_title ( title ) ---> {GtkFontButton} Sets the title for the font selection dialog. : title = a string containing the font selection dialog title
Method set_use_font ( use_font ) ---> {GtkFontButton} If use_font is TRUE, the font name will be written using the selected font. : use_font = If TRUE, font name will be written using font chosen.
Method set_use_size ( use_size ) ---> {GtkFontButton} If use_size is TRUE, the font name will be written using the selected size. : use_size = If TRUE, font name will be written using the selected size.
Method signal_font_set (  ) ---> {GtkFontButton} The font-set signal is emitted when the user selects a font.
Method get_label (  ) ---> {GtkFrame} Returns: the text in the label, or nil if there was no label widget or the lable widget was not a GtkLabel. | If the frame's label widget is a GtkLabel, returns the text in the label widget, else return nil
Method get_label_align (  ) ---> {GtkFrame} Returns: [ xalign, yalign ] | Retrieves the X and Y alignment of the frame's label.
Method get_label_widget (  ) ---> {GtkFrame} Returns: the label widget, or nil if there is none. | Retrieves the label widget for the frame.
Method get_shadow_type (  ) ---> {GtkFrame} Returns: (GtkShadowType) the current shadow type of the frame. | Retrieves the shadow type of the frame.
Method set_label ( the ) ---> {GtkFrame} Sets the text of the label. If label is nil, the current label is removed. : the = text to use as the label of the frame (or nil)
Method set_label_align ( xalign, yalign ) ---> {GtkFrame} Sets the alignment of the frame widget's label. : xalign = The position of the label along the top edge of the widget. A value of 0.0 represents left alignment; 1.0 represents right alignment., yalign = The y alignment of the label. A value of 0.0 aligns under the frame; 1.0 aligns above the frame. If the values are exactly 0.0 or 1.0 the gap in the frame won't be painted because the label will be completely above or below the frame.
Method set_label_widget ( label_widget ) ---> {GtkFrame} Sets the label widget for the frame. : label_widget = the new label widget
Method set_shadow_type ( type ) ---> {GtkFrame} Sets the shadow type for frame. : type = (GtkShadowType) the new GtkShadowType
Method new_with_range ( min, max, step ) ---> {GtkHScale} Returns: a new GtkHScale | Creates a new horizontal scale widget that lets the user input a number between min and max (including min and max) with the increment step. : min = minimum value, max = maximum value, step = step increment (tick size) used with keyboard shortcuts
Method clear (  ) ---> {GtkImage} Resets the image to be empty.
Method new_from_stock ( stock_id, size ) ---> {GtkImage} Returns: a new GtkImage displaying the stock icon | Creates a GtkImage displaying a stock icon. : stock_id = a stock icon name (string), size = (GtkIconSize)
Method set_from_file ( a ) ---> {GtkImage} Sets the image from a file. : a = filename or nil
Method set_from_stock ( stock_id, size ) ---> {GtkImage} Sets an image from stock. : stock_id = a stock icon name (string), size = (GtkIconSize)
Method get_always_show_image (  ) ---> {GtkImageMenuItem} Returns: TRUE if the menu item will always show the image | Returns whether the menu item will ignore the "gtk-menu-images" setting and always show the image, if available.
Method get_image (  ) ---> {GtkImageMenuItem} Returns: the widget set as image of image_menu_item. | Gets the widget that is currently set as the image of image_menu_item.
Method get_use_stock (  ) ---> {GtkImageMenuItem} Returns: TRUE if the label set in the menuitem is used as a stock id to select the stock item for the item | Checks whether the label set in the menuitem is used as a stock id to select the stock item for the item.
Method new_from_stock ( stock_id, accel_group ) ---> {GtkImageMenuItem} Returns: a new GtkImageMenuItem. | Creates a new GtkImageMenuItem containing the image and text from a stock item. : stock_id = the name of the stock item., accel_group = TODO the GtkAccelGroup to add the menu items accelerator to, or NULL.
Method new_with_label ( label ) ---> {GtkImageMenuItem} Returns: a new GtkImageMenuItem. | Creates a new GtkImageMenuItem containing a label. : label = the text of the menu item.
Method new_with_mnemonic ( label ) ---> {GtkImageMenuItem} Returns: a new GtkImageMenuItem. | Creates a new GtkImageMenuItem containing a label. : label = the text of the menu item, with an underscore in front of the mnemonic character
Method set_always_show_image ( always_show ) ---> {GtkImageMenuItem} If TRUE, the menu item will ignore the "gtk-menu-images" setting and always show the image, if available. : always_show = TRUE if the menuitem should always show the image
Method set_image ( image ) ---> {GtkImageMenuItem} Sets the image of image_menu_item to the given widget. : image = a widget to set as the image for the menu item (or nil).
Method set_use_stock ( use_stock ) ---> {GtkImageMenuItem} If TRUE, the label set in the menuitem is used as a stock id to select the stock item for the item. : use_stock = TRUE if the menuitem should use a stock item
Method add_action_widget ( child, response_id ) ---> {GtkInfoBar} Add an activatable widget to the action area of a GtkInfoBar, connecting a signal handler that will emit the "response" signal on the message area when the widget is activated. : child = an activatable widget, response_id = response ID for child (integer).
Method add_button ( button_text, response_id ) ---> {GtkInfoBar} Returns: the button widget that was added | Adds a button with the given text (or a stock button, if button_text is a stock ID) and sets things up so that clicking the button will emit the "response" signal with the given response_id. : button_text = text of button, or stock ID, response_id = response ID for the button
Method get_action_area (  ) ---> {GtkInfoBar} Returns: the action area. | Returns the action area of info_bar.
Method get_content_area (  ) ---> {GtkInfoBar} Returns: the content area. | Returns the content area of info_bar.
Method get_message_type (  ) ---> {GtkInfoBar} Returns: the message type of the message area. | Returns the message type of the message area.
Method response ( response_id ) ---> {GtkInfoBar} Emits the 'response' signal with the given response_id. : response_id = a response ID
Method set_default_response (  ) ---> {GtkInfoBar} Sets the last widget in the info bar's action area with the given response_id as the default widget for the dialog.
Method set_message_type (  ) ---> {GtkInfoBar} Sets the message type of the message area (GtkMessageType).
Method set_response_sensitive ( response_id, setting ) ---> {GtkInfoBar} Calls gtk_widget_set_sensitive (widget, setting) for each widget in the info bars's action area with the given response_id. : response_id = a response ID, setting = true for sensitive
Method deselect (  ) ---> {GtkItem} Emits the "deselect" signal on the given item.
Method select (  ) ---> {GtkItem} Emits the "select" signal on the given item.
Method signal_deselect (  ) ---> {GtkItem} Emitted when the item is deselected.
Method signal_select (  ) ---> {GtkItem} Emitted when the item is selected.
Method signal_toggle (  ) ---> {GtkItem} Emitted when the item is toggled.
Method toggle (  ) ---> {GtkItem} Emits the "toggle" signal on the given item.
Method get_hadjustment (  ) ---> {GtkLayout} Returns: horizontal scroll adjustment | Returns the GtkAdjustment used for communication between the horizontal scrollbar and layout.
Method get_size (  ) ---> {GtkLayout} Returns: [ width, height ] | Gets the size that has been set on the layout, and that determines the total extents of the layout's scrollbar area.
Method get_vadjustment (  ) ---> {GtkLayout} Returns: vertical scroll adjustment | Returns the GtkAdjustment used for communication between the vertical scrollbar and layout.
Method move ( child_widget, x, y ) ---> {GtkLayout} Moves a current child of layout to a new position. : child_widget = a current child of layout, x = X position to move to, y = Y position to move to
Method put ( child, x, y ) ---> {GtkLayout} Adds child_widget to layout, at position (x,y). layout becomes the new parent container of child_widget. : child = (GtkWidget), x = X position of child widget, y = Y position of child widget
Method set_hadjustment ( adjustment ) ---> {GtkLayout} Sets the horizontal scroll adjustment for the layout. : adjustment = new scroll adjustment (or nil)
Method set_size ( width, height ) ---> {GtkLayout} Sets the size of the scrollable area of the layout. : width = width of entire scrollable area, height = height of entire scrollable area
Method set_vadjustment ( adjustment ) ---> {GtkLayout} Sets the vertical scroll adjustment for the layout. : adjustment = new scroll adjustment (or nil)
Method get_uri (  ) ---> {GtkLinkButton} Returns: a valid URI | Retrieves the URI set using gtk_link_button_set_uri().
Method get_visited (  ) ---> {GtkLinkButton} Returns: TRUE if the link has been visited, FALSE otherwise | Retrieves the 'visited' state of the URI where the GtkLinkButton points.
Method new_with_label ( uri, label ) ---> {GtkLinkButton} Returns: a new link button widget | Creates a new GtkLinkButton containing a label. : uri = a valid URI, label = the text of the button (or nil).
Method set_uri ( uri ) ---> {GtkLinkButton} Sets uri as the URI where the GtkLinkButton points. : uri = a valid URI.
Method set_uri_hook ( func, user ) ---> {GtkLinkButton} Sets func as the function that should be invoked every time a user clicks a GtkLinkButton. : func = a function called each time a GtkLinkButton is clicked, or NULL., user = data to be passed to func, or NULL.
Method set_visited ( visited ) ---> {GtkLinkButton} Sets the 'visited' state of the URI where the GtkLinkButton points. : visited = the new 'visited' state
Method append (  ) ---> {GtkListStore} Appends a new row to list_store.
Method clear (  ) ---> {GtkListStore} Removes all rows from the list store.
Method insert ( iter, position ) ---> {GtkListStore} Creates a new row at position. : iter = An unset GtkTreeIter to set to the new row, position = position to insert the new row
Method insert_after ( iter, sibling ) ---> {GtkListStore} Inserts a new row after sibling. : iter = An unset GtkTreeIter to set to the new row, sibling = A valid GtkTreeIter, or NULL.
Method insert_before ( iter, sibling ) ---> {GtkListStore} Inserts a new row before sibling. : iter = An unset GtkTreeIter to set to the new row, sibling = A valid GtkTreeIter, or NULL.
Method insert_with_values ( iter, pos, values ) ---> {GtkListStore} Creates a new row at position. : iter = An unset GtkTreeIter to set to the new row, or NULL., pos = position to insert the new row, values = an array of pairs [ column index, column value, ... ]
Method iter_is_valid ( iter ) ---> {GtkListStore} Returns: TRUE if the iter is valid, FALSE if the iter is invalid. | Checks if the given iter is a valid iter for this GtkListStore. : iter = a GtkTreeIter
Method move_after ( iter, position ) ---> {GtkListStore} Moves iter in store to the position after position. : iter = A GtkTreeIter., position = A GtkTreeIter, or NULL.
Method move_before ( iter, position ) ---> {GtkListStore} Moves iter in store to the position before position. : iter = A GtkTreeIter., position = A GtkTreeIter, or NULL.
Method prepend ( iter ) ---> {GtkListStore} Prepends a new row to list_store. : iter = An unset GtkTreeIter to set to the prepend row
Method remove ( iter ) ---> {GtkListStore} Returns: TRUE if iter is valid, FALSE if not. | Removes the given row from the list store. : iter = A valid GtkTreeIter
Method reorder ( new_order ) ---> {GtkListStore} Reorders store to follow the order indicated by new_order. : new_order = an array of integers mapping the new position of each child to its old position before the re-ordering, i.e. new_order[newpos] = oldpos.
Method set ( iter, values ) ---> {GtkListStore} Sets the value of one or more cells in the row referenced by iter. : iter = row iterator (GtkTreeIter), values = an array of pairs [ column index, column value, ... ]
Method set_column_types ( types ) ---> {GtkListStore} Sets the column types. : types = an array of GType
Method set_value ( iter, column, value ) ---> {GtkListStore} Sets the data in the cell specified by iter and column. : iter = A valid GtkTreeIter for the row being modified, column = column number to modify, value = new value for the cell
Method swap ( a, b ) ---> {GtkListStore} Swaps a and b in store. Note that this function only works with unsorted stores. : a = A GtkTreeIter., b = Another GtkTreeIter.
Method quit (  ) ---> {GtkMain} Makes the innermost invocation of the main loop return when it regains control.
Method run ( A window to be shown ) ---> {GtkMain} Start the event loop. Invalid window, an ParamError is raised. : A window to be shown = 
Method attach ( child, left_attach, right_attach, top_attach, bottom_attach ) ---> {GtkMenu} Adds a new GtkMenuItem to a (table) menu. : child = a GtkMenuItem., left_attach = The column number to attach the left side of the item to., right_attach = The column number to attach the right side of the item to., top_attach = The row number to attach the top of the item to., bottom_attach = The row number to attach the bottom of the item to.
Method attach_to_widget ( attach_widget ) ---> {GtkMenu} Attaches the menu to the widget and provides a callback function that will be invoked when the menu calls gtk_menu_detach() during its destruction. : attach_widget = the GtkWidget that the menu will be attached to.
Method detach (  ) ---> {GtkMenu} Detaches the menu from the widget to which it had been attached.
Method get_accel_path (  ) ---> {GtkMenu} Returns: the accelerator path set on the menu. | Retrieves the accelerator path set on the menu.
Method get_active (  ) ---> {GtkMenu} Returns: the GtkMenuItem that was last selected in the menu. If a selection has not yet been made, the first menu item is selected. | Returns the selected menu item from the menu.
Method get_attach_widget (  ) ---> {GtkMenu} Returns: the GtkWidget that the menu is attached to. | Returns the GtkWidget that the menu is attached to.
Method get_for_attach_widget ( widget ) ---> {GtkMenu} Returns: the list of menus attached to his widget | Returns a list of the menus which are attached to this widget. : widget = a GtkWidget
Method get_monitor (  ) ---> {GtkMenu} Returns: the number of the monitor on which the menu should be popped up or -1, if no monitor has been set | Retrieves the number of the monitor on which to show the menu.
Method get_reserve_toggle_size (  ) ---> {GtkMenu} Returns: Whether the menu reserves toggle space | Returns whether the menu reserves space for toggles and icons, regardless of their actual presence.
Method get_tearoff_state (  ) ---> {GtkMenu} Returns: true if the menu is currently torn off. | Returns whether the menu is torn off.
Method get_title (  ) ---> {GtkMenu} Returns: the title of the menu, or nil if the menu has no title set on it. | Returns the title of the menu.
Method popdown (  ) ---> {GtkMenu} Removes the menu from the screen.
Method popup ( parent_menu_shell, parent_menu_item, button, activate_time ) ---> {GtkMenu} Displays a menu and makes it available for selection. : parent_menu_shell = the menu shell containing the triggering menu item, or NULL., parent_menu_item = the menu item whose activation triggered the popup, or NULL., button = the mouse button which was pressed to initiate the event., activate_time = the time at which the activation event occurred.
Method reorder_child ( child, position ) ---> {GtkMenu} Moves a GtkMenuItem to a new position within the GtkMenu. : child = the GtkMenuItem to move., position = the new position to place child. Positions are numbered from 0 to n-1.
Method reposition (  ) ---> {GtkMenu} Repositions the menu according to its position function.
Method set_accel_group ( accel_group ) ---> {GtkMenu} Set the GtkAccelGroup which holds global accelerators for the menu. : accel_group = a GtkAccelGroup, or nil.
Method set_accel_path ( accel_path ) ---> {GtkMenu} Sets an accelerator path for this menu from which accelerator paths for its immediate children, its menu items, can be constructed. : accel_path = a valid accelerator path, or nil.
Method set_active ( index_ ) ---> {GtkMenu} Selects the specified menu item within the menu. : index_ = the index of the menu item to select. Index values are from 0 to n-1.
Method set_monitor ( monitor_num ) ---> {GtkMenu} Informs GTK+ on which monitor a menu should be popped up. : monitor_num = the number of the monitor on which the menu should be popped up
Method set_reserve_toggle_size ( reserve_toggle_size ) ---> {GtkMenu} Sets whether the menu should reserve space for drawing toggles or icons, regardless of their actual presence. : reserve_toggle_size = whether to reserve size for toggles
Method set_screen ( a ) ---> {GtkMenu} Sets the GdkScreen on which the menu will be displayed. : a = GdkScreen, or NULL if the screen should be determined by the widget the menu is attached to
Method set_tearoff_state ( torn_off ) ---> {GtkMenu} Changes the tearoff state of the menu. : torn_off = If true, menu is displayed as a tearoff menu.
Method set_title ( title ) ---> {GtkMenu} Sets the title string for the menu. : title = a string containing the title for the menu , or nil.
Method signal_move_scroll (  ) ---> {GtkMenu} .
Method get_child_pack_direction (  ) ---> {GtkMenuBar} Returns: the child pack direction | Retrieves the current child pack direction of the menubar.
Method get_pack_direction (  ) ---> {GtkMenuBar} Returns: the pack direction | Retrieves the current pack direction of the menubar.
Method set_child_pack_direction ( child_pack_dir ) ---> {GtkMenuBar} Sets how widgets should be packed inside the children of a menubar. : child_pack_dir = a new GtkPackDirection
Method set_pack_direction ( pack_dir ) ---> {GtkMenuBar} Sets how items should be packed inside a menubar. : pack_dir = a new GtkPackDirection
Method activate (  ) ---> {GtkMenuItem} Emits the "activate" signal on the given item.
Method deselect (  ) ---> {GtkMenuItem} Emits the "deselect" signal on the given item.
Method get_accel_path (  ) ---> {GtkMenuItem} Returns: the accelerator path corresponding to this menu item's functionality, or NULL if not set | Retrieve the accelerator path that was previously set on menu_item.
Method get_label (  ) ---> {GtkMenuItem} Returns: The text in the menu_item label. | Gets the text on the menu_item label
Method get_right_justified (  ) ---> {GtkMenuItem} Returns: TRUE if the menu item will appear at the far right if added to a menu bar. | Gets whether the menu item appears justified at the right side of the menu bar.
Method get_submenu (  ) ---> {GtkMenuItem} Returns: submenu for this menu item, or NULL if none. | Gets the submenu underneath this menu item, if any.
Method get_use_underline (  ) ---> {GtkMenuItem} Returns: TRUE if an embedded underline in the label indicates the mnemonic accelerator key. | Checks if an underline in the text indicates the next character should be used for the mnemonic accelerator key.
Method new_with_label ( label ) ---> {GtkMenuItem} Returns: the newly created GtkMenuItem | Creates a new GtkMenuItem whose child is a GtkLabel. : label = the text for the label
Method new_with_mnemonic ( label ) ---> {GtkMenuItem} Returns: a new GtkMenuItem | Creates a new GtkMenuItem containing a label. : label = The text of the button, with an underscore in front of the mnemonic character
Method select (  ) ---> {GtkMenuItem} Emits the "select" signal on the given item.
Method set_accel_path ( accel_path ) ---> {GtkMenuItem} Set the accelerator path on menu_item, through which runtime changes of the menu item's accelerator caused by the user can be identified and saved to persistant storage (see gtk_accel_map_save() on this). : accel_path = accelerator path, corresponding to this menu item's functionality, or NULL to unset the current path
Method set_label ( label ) ---> {GtkMenuItem} Sets text on the menu_item label : label = the text you want to set
Method set_right_justified ( right_justified ) ---> {GtkMenuItem} Sets whether the menu item appears justified at the right side of a menu bar. : right_justified = if TRUE the menu item will appear at the far right if added to a menu bar.
Method set_submenu ( submenu ) ---> {GtkMenuItem} Sets or replaces the menu item's submenu, or removes it when a NULL submenu is passed. : submenu = the submenu, or NULL.
Method set_use_underline ( setting ) ---> {GtkMenuItem} If true, an underline in the text indicates the next character should be used for the mnemonic accelerator key. : setting = TRUE if underlines in the text indicate mnemonics
Method signal_activate (  ) ---> {GtkMenuItem} Emitted when the item is activated.
Method signal_activate_item (  ) ---> {GtkMenuItem} Emitted when the item is activated, but also if the menu item has a submenu.
Method activate_item ( menu_item, force_deactivate ) ---> {GtkMenuShell} Activates the menu item within the menu shell. : menu_item = The GtkMenuItem to activate, force_deactivate = If true, force the deactivation of the menu shell after the menu item is activated.
Method append ( child ) ---> {GtkMenuShell} Adds a new GtkMenuItem to the end of the menu shell's item list. : child = The GtkMenuItem to add.
Method cancel (  ) ---> {GtkMenuShell} Cancels the selection within the menu shell.
Method deactivate (  ) ---> {GtkMenuShell} Deactivates the menu shell. Typically this results in the menu shell being erased from the screen.
Method deselect (  ) ---> {GtkMenuShell} Deselects the currently selected item from the menu shell, if any.
Method get_take_focus (  ) ---> {GtkMenuShell} Returns: true if the menu shell will take the keyboard focus on popup. | Returns true if the menu shell will take the keyboard focus on popup.
Method insert ( child, position ) ---> {GtkMenuShell} Adds a new GtkMenuItem to the menu shell's item list at the position indicated by position. : child = The GtkMenuItem to add., position = The position in the item list where child is added. Positions are numbered from 0 to n-1.
Method prepend ( child ) ---> {GtkMenuShell} Adds a new GtkMenuItem to the beginning of the menu shell's item list. : child = The GtkMenuItem to add.
Method select_first ( search_sensitive ) ---> {GtkMenuShell} Select the first visible or selectable child of the menu shell; don't select tearoff items unless the only item is a tearoff item. : search_sensitive = if true, search for the first selectable menu item, otherwise select nothing if the first item isn't sensitive. This should be false if the menu is being popped up initially.
Method select_item ( menu_item ) ---> {GtkMenuShell} Selects the menu item from the menu shell. : menu_item = The GtkMenuItem to select.
Method set_take_focus ( take_focus ) ---> {GtkMenuShell} If take_focus is TRUE (the default) the menu shell will take the keyboard focus so that it will receive all keyboard events which is needed to enable keyboard navigation in menus. : take_focus = true if the menu shell should take the keyboard focus on popup.
Method signal_activate_current (  ) ---> {GtkMenuShell} An action signal that activates the current menu item within the menu shell.
Method signal_cancel (  ) ---> {GtkMenuShell} An action signal which cancels the selection within the menu shell.
Method signal_cycle_focus (  ) ---> {GtkMenuShell} .
Method signal_deactivate (  ) ---> {GtkMenuShell} This signal is emitted when a menu shell is deactivated.
Method signal_move_current (  ) ---> {GtkMenuShell} An action signal which moves the current menu item in the direction specified by direction.
Method signal_move_selected (  ) ---> {GtkMenuShell} The move-selected signal is emitted to move the selection to another item.
Method signal_selection_done (  ) ---> {GtkMenuShell} This signal is emitted when a selection has been completed within a menu shell.
Method get_menu (  ) ---> {GtkMenuToolButton} Returns: the GtkMenu associated with GtkMenuToolButton | Gets the GtkMenu associated with GtkMenuToolButton.
Method new_from_stock ( stock_id ) ---> {GtkMenuToolButton} Returns: the new GtkMenuToolButton | Creates a new GtkMenuToolButton. : stock_id = the name of a stock item
Method set_arrow_tooltip_markup ( markup ) ---> {GtkMenuToolButton} Sets the tooltip markup text to be used as tooltip for the arrow button which pops up the menu. : markup = markup text to be used as tooltip text for button's arrow button
Method set_arrow_tooltip_text ( text ) ---> {GtkMenuToolButton} Sets the tooltip text to be used as tooltip for the arrow button which pops up the menu. : text = text to be used as tooltip text for button's arrow button
Method set_menu ( menu ) ---> {GtkMenuToolButton} Sets the GtkMenu that is popped up when the user clicks on the arrow. : menu = the GtkMenu associated with GtkMenuToolButton, or nil.
Method signal_show_menu (  ) ---> {GtkMenuToolButton} The show-menu signal is emitted before the menu is shown.
Method get_image (  ) ---> {GtkMessageDialog} Returns: the dialog's image (GtkWidget) | Gets the dialog's image.
Method new_with_markup ( parent, flags, type, buttons, message ) ---> {GtkMessageDialog} Returns: a new GtkMessageDialog. | Creates a new message dialog. : parent = transient parent (GtkWindow), or nil for none., flags = flags (GtkDialogFlags), type = type of message (GtkMessageType), buttons = set of buttons to use (GtkButtonsType), message = message string, or nil.
Method set_image ( the ) ---> {GtkMessageDialog} Sets the dialog's image to image : the = image (GtkWidget)
Method set_markup ( markup ) ---> {GtkMessageDialog} Sets the text of the message dialog to be str, which is marked up with the Pango text markup language. : markup = string
Method set_secondary_markup (  ) ---> {GtkMessageDialog} Sets the secondary text of the message dialog to be message, which is marked up with the Pango text markup language.
Method set_secondary_text ( message ) ---> {GtkMessageDialog} Sets the secondary text of the message dialog to be message. : message = string or nil.
Method get_alignment (  ) ---> {GtkMisc} Returns: [float x, float y] | Gets the X and Y alignment of the widget within its allocation.
Method get_padding (  ) ---> {GtkMisc} Returns: [int x, int y] | Gets the padding in the X and Y directions of the widget.
Method set_alignment ( xalign, yalign ) ---> {GtkMisc} Sets the alignment of the widget. : xalign = the horizontal alignment, from 0 (left) to 1 (right). (float), yalign = the vertical alignment, from 0 (top) to 1 (bottom). (float)
Method set_padding ( xpad, ypad ) ---> {GtkMisc} Sets the amount of space to add around the widget. : xpad = the amount of space to add on the left and right of the widget, in pixels., ypad = the amount of space to add on the top and bottom of the widget, in pixels.
Method destroy (  ) ---> {GtkObject} Emits the "destroy" signal.
Method signal_destroy (  ) ---> {GtkObject} Connect a VMSlot to the object destroy signal and return it
Method get_history (  ) ---> {GtkOptionMenu} Returns: index of the selected menu item, or -1 if there are no menu items | Retrieves the index of the currently selected menu item.
Method get_menu (  ) ---> {GtkOptionMenu} Returns: the GtkMenu associated with the GtkOptionMenu. | Returns the GtkMenu associated with the GtkOptionMenu.
Method remove_menu (  ) ---> {GtkOptionMenu} Removes the menu from the option menu.
Method set_history ( index ) ---> {GtkOptionMenu} Selects the menu item specified by index_ making it the newly selected value for the option menu. : index = the index of the menu item to select. Index values are from 0 to n-1.
Method set_menu ( menu ) ---> {GtkOptionMenu} Provides the GtkMenu that is popped up to allow the user to choose a new value. : menu = the GtkMenu to associate with the GtkOptionMenu.
Method signal_changed (  ) ---> {GtkOptionMenu} .
Method get_orientation (  ) ---> {GtkOrientable} Returns: the orientation of the orientable. | Retrieves the orientation of the orientable.
Method set_orientation ( orientation ) ---> {GtkOrientable} Sets the orientation of the orientable. : orientation = the orientable's new orientation.
Method add1 ( child ) ---> {GtkPaned} Adds a child to the top or left pane with default parameters. : child = (GtkWidget) the child to add
Method add2 ( child ) ---> {GtkPaned} Adds a child to the bottom or right pane with default parameters. : child = (GtkWidget) the child to add
Method get_child1 (  ) ---> {GtkPaned} Returns: first child, or nil if it is not set. | Obtains the first child of the paned widget.
Method get_child2 (  ) ---> {GtkPaned} Returns: second child, or nil if it is not set. | Obtains the second child of the paned widget.
Method get_handle_window (  ) ---> {GtkPaned} Returns: (GtkWindow) the paned's handle window. | Returns the GdkWindow of the handle.
Method get_position (  ) ---> {GtkPaned} Returns: position of the divider | Obtains the position of the divider between the two panes.
Method pack1 ( child, resize, shrink ) ---> {GtkPaned} Adds a child to the top or left pane. : child = (GtkWidget) the child to add, resize = (boolean) should this child expand when the paned widget is resized., shrink = (boolean) can this child be made smaller than its requisition.
Method pack2 ( child, resize, shrink ) ---> {GtkPaned} Adds a child to the bottom or right pane. : child = (GtkWidget) the child to add, resize = (boolean) should this child expand when the paned widget is resized., shrink = (boolean) can this child be made smaller than its requisition.
Method set_position ( position ) ---> {GtkPaned} Sets the position of the divider between the two panes. : position = pixel position of divider, a negative value means that the position is unset.
Method get_ellipsize (  ) ---> {GtkProgressBar} Returns: PangoEllipsizeMode | Returns the ellipsizing position of the progressbar.
Method get_fraction (  ) ---> {GtkProgressBar} Returns: a fraction from 0.0 to 1.0 | Returns the current fraction of the task that's been completed.
Method get_orientation (  ) ---> {GtkProgressBar} Returns: orientation of the progress bar | Retrieves the current progress bar orientation.
Method get_pulse_step (  ) ---> {GtkProgressBar} Returns: a fraction from 0.0 to 1.0 | Retrieves the pulse step set with gtk_progress_bar_set_pulse_step()
Method get_text (  ) ---> {GtkProgressBar} Returns: text, or nil. | Retrieves the text displayed superimposed on the progress bar, if any, otherwise nil.
Method pulse (  ) ---> {GtkProgressBar} Indicates that some progress is made, but you don't know how much. Causes the progress bar to enter "activity mode," where a block bounces back and forth. Each call to gtk_progress_bar_pulse() causes the block to move by a little bit (the amount of movement per pulse is determined by gtk_progress_bar_set_pulse_step()).
Method set_ellipsize ( mode ) ---> {GtkProgressBar} Sets the mode used to ellipsize (add an ellipsis: "...") the text if there is not enough space to render the entire string. : mode = a PangoEllipsizeMode
Method set_fraction ( fraction ) ---> {GtkProgressBar} Causes the progress bar to "fill in" the given fraction of the bar. : fraction = fraction of the task that's been completed
Method set_orientation ( orientation ) ---> {GtkProgressBar} Causes the progress bar to switch to a different orientation (left-to-right, right-to-left, top-to-bottom, or bottom-to-top). : orientation = orientation of the progress bar
Method set_pulse_step ( fraction ) ---> {GtkProgressBar} Sets the fraction of total progress bar length to move the bouncing block for each call to gtk_progress_bar_pulse(). : fraction = fraction between 0.0 and 1.0
Method set_text ( text ) ---> {GtkProgressBar} Causes the given text to appear superimposed on the progress bar. : text = a UTF-8 string, or nil.
Method get_current_value (  ) ---> {GtkRadioAction} Returns: The value of the currently active group member | Obtains the value property of the currently active member of the group to which action belongs.
Method set_current_value ( current_value ) ---> {GtkRadioAction} Sets the currently active group member to the member with value property current_value. : current_value = the new value
Method signal_changed (  ) ---> {GtkRadioAction} Connect a VMSlot to the action changed signal and return it
Method get_group (  ) ---> {GtkRadioButton} Returns: an array containing GtkRadioButton objects belonging to the group. | Retrieves the group assigned to a radio button.
Method new_with_label ( radio_group_member, label ) ---> {GtkRadioButton} Creates a new GtkRadioButton with a text label, adding it to the same group as radio_group_member. : radio_group_member = widget to get radio group from, or nil if you are creating a new group., label = the text label to display next to the radio button.
Method new_with_mnemonic ( radio_group_member, label ) ---> {GtkRadioButton} Creates a new GtkRadioButton containing a label. : radio_group_member = widget to get radio group from, or nil if you are creating a new group., label = the text of the button, with an underscore in front of the mnemonic character
Method set_group ( group_member ) ---> {GtkRadioButton} Sets a GtkRadioButton's group. : group_member = a GtkRadioButton belonging to the group
Method signal_group_changed (  ) ---> {GtkRadioButton} Emitted when the group of radio buttons that a radio button belongs to changes.
Method new_with_label ( group, label ) ---> {GtkRadioMenuItem} Returns: a new GtkRadioMenuItem | Creates a new GtkRadioMenuItem whose child is a simple GtkLabel. : group = an existing GtkRadioMenuItem, or nil to make a new group of items., label = the text for the label
Method new_with_mnemonic ( group, label ) ---> {GtkRadioMenuItem} Returns: a new GtkRadioMenuItem | Creates a new GtkRadioMenuItem containing a label. : group = An existing GtkRadioMenuItem, or nil to make a new group of items., label = the text of the button, with an underscore in front of the mnemonic character
Method signal_group_changed (  ) ---> {GtkRadioMenuItem} .
Method new_from_stock ( group, stock_id ) ---> {GtkRadioToolButton} Returns: The new GtkRadioToolItem | Creates a new GtkRadioToolButton, adding it to group. : group = An existing GtkRadioToolButton, or nil to create a new group of buttons., stock_id = the name of a stock item
Method get_adjustment (  ) ---> {GtkRange} Returns: a GtkAdjustment | Get the GtkAdjustment which is the "model" object for GtkRange.
Method get_fill_level (  ) ---> {GtkRange} Returns: The current fill level | Gets the current position of the fill level indicator.
Method get_flippable (  ) ---> {GtkRange} Returns: TRUE if the range is flippable | Gets the value set by gtk_range_set_flippable().
Method get_inverted (  ) ---> {GtkRange} Returns: TRUE if the range is inverted | Gets the value set by gtk_range_set_inverted().
Method get_lower_stepper_sensitivity (  ) ---> {GtkRange} Returns: The lower stepper's sensitivity policy. | Gets the sensitivity policy for the stepper that points to the 'lower' end of the GtkRange's adjustment.
Method get_min_slider_size (  ) ---> {GtkRange} Returns: The minimum size of the range's slider. | This function is useful mainly for GtkRange subclasses.
Method get_range_rect (  ) ---> {GtkRange} Returns: the range rectangle (GdkRectangle). | This function returns the area that contains the range's trough and its steppers, in widget->window coordinates.
Method get_restrict_to_fill_level (  ) ---> {GtkRange} Returns: TRUE if range is restricted to the fill level. | Gets whether the range is restricted to the fill level.
Method get_show_fill_level (  ) ---> {GtkRange} Returns: TRUE if range shows the fill level. | Gets whether the range displays the fill level graphically.
Method get_slider_range (  ) ---> {GtkRange} Returns: Array [ slider start, slider end ] | This function returns sliders range along the long dimension, in widget->window coordinates.
Method get_slider_size_fixed (  ) ---> {GtkRange} Returns: whether the range's slider has a fixed size. | This function is useful mainly for GtkRange subclasses.
Method get_update_policy (  ) ---> {GtkRange} Returns: The current update policy (GtkUpdateType). | Gets the update policy of range.
Method get_upper_stepper_sensitivity (  ) ---> {GtkRange} Returns: The upper stepper's sensitivity policy. | Gets the sensitivity policy for the stepper that points to the 'upper' end of the GtkRange's adjustment.
Method get_value (  ) ---> {GtkRange} Returns: current value of the range. | Gets the current value of the range.
Method set_adjustment ( adjustment ) ---> {GtkRange} Sets the adjustment to be used as the "model" object for this range widget. : adjustment = a GtkAdjustment
Method set_fill_level ( fill_level ) ---> {GtkRange} Set the new position of the fill level indicator. : fill_level = the new position of the fill level indicator
Method set_flippable ( flippable ) ---> {GtkRange} If a range is flippable, it will switch its direction if it is horizontal and its direction is GTK_TEXT_DIR_RTL. : flippable = TRUE to make the range flippable
Method set_increments ( step, page ) ---> {GtkRange} Sets the step and page sizes for the range. : step = step size, page = page size
Method set_inverted ( setting ) ---> {GtkRange} Ranges normally move from lower to higher values as the slider moves from top to bottom or left to right. : setting = TRUE to invert the range
Method set_lower_stepper_sensitivity ( sensitivity ) ---> {GtkRange} Sets the sensitivity policy for the stepper that points to the 'lower' end of the GtkRange's adjustment. : sensitivity = the lower stepper's sensitivity policy (GtkSensitivityType).
Method set_min_slider_size ( min_size ) ---> {GtkRange} Sets the minimum size of the range's slider. : min_size = The slider's minimum size
Method set_range ( min, max ) ---> {GtkRange} Sets the allowable values in the GtkRange, and clamps the range value to be between min and max. : min = minimum range value, max = maximum range value
Method set_restrict_to_fill_level ( restrict_to_fill_level ) ---> {GtkRange} Sets whether the slider is restricted to the fill level. : restrict_to_fill_level = Whether the fill level restricts slider movement.
Method set_show_fill_level ( show_fill_level ) ---> {GtkRange} Sets whether a graphical fill level is show on the trough. : show_fill_level = Whether a fill level indicator graphics is shown.
Method set_slider_size_fixed ( size_fixed ) ---> {GtkRange} Sets whether the range's slider has a fixed size, or a size that depends on it's adjustment's page size. : size_fixed = TRUE to make the slider size constant
Method set_update_policy ( policy ) ---> {GtkRange} Sets the update policy for the range. : policy = update policy (GtkUpdateType).
Method set_upper_stepper_sensitivity ( sensitivity ) ---> {GtkRange} Sets the sensitivity policy for the stepper that points to the 'upper' end of the GtkRange's adjustment. : sensitivity = the upper stepper's sensitivity policy.
Method set_value ( value ) ---> {GtkRange} Sets the current value of the range : value = new value of the range
Method signal_adjust_bounds (  ) ---> {GtkRange} The "adjust-bounds" signal is emitted when the range is adjusted by user action.
Method signal_change_value (  ) ---> {GtkRange} The change-value signal is emitted when a scroll action is performed on a range.
Method signal_move_slider (  ) ---> {GtkRange} Virtual function that moves the slider. Used for keybindings.
Method value_changed (  ) ---> {GtkRange} Emitted when the range value changes.
Method add_age ( age ) ---> {GtkRecentFilter} Adds a rule that allows resources based on their age - that is, the number of days elapsed since they were last modified. : age = number of days
Method add_application ( application ) ---> {GtkRecentFilter} Adds a rule that allows resources based on the name of the application that has registered them. : application = an application name
Method add_custom ( needed, func, data ) ---> {GtkRecentFilter} Adds a rule to a filter that allows resources based on a custom callback function. : needed = bitfield of flags (GtkRecentFilterFlags) indicating the information that the custom filter function needs., func = callback function; if the function returns TRUE, then the file will be displayed., data = data to pass to func, or nil
Method add_group ( group ) ---> {GtkRecentFilter} Adds a rule that allows resources based on the name of the group to which they belong : group = a group name
Method add_mime_type ( mime_type ) ---> {GtkRecentFilter} Adds a rule that allows resources based on their registered MIME type. : mime_type = a MIME type
Method add_pattern ( pattern ) ---> {GtkRecentFilter} Adds a rule that allows resources based on a pattern matching their display name. : pattern = a file pattern
Method add_pixbuf_formats (  ) ---> {GtkRecentFilter} Adds a rule allowing image files in the formats supported by GdkPixbuf.
Method filter ( filter_info ) ---> {GtkRecentFilter} Returns: TRUE if the file should be displayed | Tests whether a file should be displayed according to filter. : filter_info = a GtkRecentFilterInfo structure containing information about a recently used resource
Method get_name (  ) ---> {GtkRecentFilter} Returns: the name of the filter, or NULL. | Gets the human-readable name for the filter.
Method get_needed (  ) ---> {GtkRecentFilter} Returns: bitfield of flags indicating needed fields when calling gtk_recent_filter_filter() | Gets the fields that need to be filled in for the structure passed to gtk_recent_filter_filter()
Method set_name ( name ) ---> {GtkRecentFilter} Sets the human-readable name of the filter. : name = the human readable name of filter
Method get_metric (  ) ---> {GtkRuler} Returns: the units currently used for ruler | Gets the units used for a GtkRuler.
Method get_range (  ) ---> {GtkRuler} Returns: [ lower, upper, position, max_size ] | Retrieves values indicating the range and current position of a GtkRuler.
Method set_metric ( metric ) ---> {GtkRuler} This calls the GTKMetricType to set the ruler to units defined. : metric = the unit of measurement
Method set_range ( lower, upper, position, max_size ) ---> {GtkRuler} This sets the range of the ruler. : lower = the lower limit of the ruler, upper = the upper limit of the ruler, position = the mark on the ruler, max_size = the maximum size of the ruler used when calculating the space to leave for the text
Method get_digits (  ) ---> {GtkScale} Returns: the number of decimal places that are displayed | Gets the number of decimal places that are displayed in the value.
Method get_draw_value (  ) ---> {GtkScale} Returns: whether the current value is displayed as a string | Returns whether the current value is displayed as a string next to the slider.
Method get_value_pos (  ) ---> {GtkScale} Returns: the position in which the current value is displayed (GtkPositionType). | Gets the position in which the current value is displayed.
Method set_digits ( digits ) ---> {GtkScale} Sets the number of decimal places that are displayed in the value. : digits = the number of decimal places to display, e.g. use 1 to display 1.0, 2 to display 1.00, etc
Method set_draw_value ( TRUE ) ---> {GtkScale} Specifies whether the current value is displayed as a string next to the slider. : TRUE = to draw the value
Method set_value_pos ( pos ) ---> {GtkScale} Sets the position in which the current value is displayed. : pos = the position in which the current value is displayed (GtkPositionType).
Method signal_format_value (  ) ---> {GtkScale} Signal which allows you to change how the scale value is displayed.
Method signal_text_popped (  ) ---> {GtkScale} Is emitted whenever a new message is popped off a statusbar's stack.
Method signal_text_pushed (  ) ---> {GtkScale} Is emitted whenever a new message gets pushed onto a statusbar's stack.
Method get_adjustment (  ) ---> {GtkScaleButton} Returns: the adjustment associated with the scale | Gets the GtkAdjustment associated with the GtkScaleButton's scale.
Method get_minus_button (  ) ---> {GtkScaleButton} Returns: the minus button of the GtkScaleButton (as a GtkWidget). | Retrieves the minus button of the GtkScaleButton.
Method get_plus_button (  ) ---> {GtkScaleButton} Returns: the plus button of the GtkScaleButton (as a GtkWidget). | Retrieves the plus button of the GtkScaleButton.
Method get_popup (  ) ---> {GtkScaleButton} Returns: the popup of the GtkScaleButton (as a GtkWidget). | Retrieves the popup of the GtkScaleButton.
Method get_value (  ) ---> {GtkScaleButton} Returns: current value of the scale button | Gets the current value of the scale button.
Method set_adjustment ( adjustment ) ---> {GtkScaleButton} Sets the GtkAdjustment to be used as a model for the GtkScaleButton's scale. : adjustment = a GtkAdjustment
Method set_icons ( icons ) ---> {GtkScaleButton} Sets the icons to be used by the scale button. : icons = an array of icon names (strings).
Method set_value ( value ) ---> {GtkScaleButton} Sets the current value of the scale. : value = new value of the scale button
Method signal_popdown (  ) ---> {GtkScaleButton} The popdown signal is a keybinding signal which gets emitted to popdown the scale widget.
Method signal_popup (  ) ---> {GtkScaleButton} The popup signal is a keybinding signal which gets emitted to popup the scale widget.
Method signal_value_changed (  ) ---> {GtkScaleButton} The value-changed signal is emitted when the value field has changed.
Method get_draw (  ) ---> {GtkSeparatorToolItem} Returns: TRUE if item is drawn as a line, or just blank. | Returns whether item is drawn as a line, or just blank.
Method set_draw ( draw ) ---> {GtkSeparatorToolItem} Whether item is drawn as a vertical line, or just blank. : draw = whether item is drawn as a vertical line
Method configure ( adjustment, climb_rate, digits ) ---> {GtkSpinButton} Changes the properties of an existing spin button. : adjustment = a GtkAdjustment, or nil., climb_rate = the new climb rate., digits = the number of decimal places to display in the spin button.
Method get_adjustment (  ) ---> {GtkSpinButton} Returns: the GtkAdjustment of spin_button | Get the adjustment associated with a GtkSpinButton
Method get_digits (  ) ---> {GtkSpinButton} Returns: the current precision | Fetches the precision of spin_button.
Method get_increments (  ) ---> {GtkSpinButton} Returns: An array [ step increment, page increment ] | Gets the current step and page the increments used by spin_button.
Method get_numeric (  ) ---> {GtkSpinButton} Returns: TRUE if only numeric text can be entered | Returns whether non-numeric text can be typed into the spin button.
Method get_range (  ) ---> {GtkSpinButton} Returns: An array [ min range, max range ] | Gets the range allowed for spin_button.
Method get_snap_to_ticks (  ) ---> {GtkSpinButton} Returns: TRUE if values are snapped to the nearest step. | Returns whether the values are corrected to the nearest step.
Method get_update_policy (  ) ---> {GtkSpinButton} Returns: the current update policy (GtkSpinButtonUpdatePolicy) | Gets the update behavior of a spin button. See gtk_spin_button_set_update_policy().
Method get_value (  ) ---> {GtkSpinButton} Returns: the value of spin_button | Get the value in the spin_button.
Method get_value_as_int (  ) ---> {GtkSpinButton} Returns: the value of spin_button | Get the value spin_button represented as an integer.
Method get_wrap (  ) ---> {GtkSpinButton} Returns: TRUE if the spin button wraps around | Returns whether the spin button's value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. See gtk_spin_button_set_wrap().
Method new_with_range ( min, max, step ) ---> {GtkSpinButton} Returns: The new spin button. | This is a convenience constructor that allows creation of a numeric GtkSpinButton without manually creating an adjustment. : min = Minimum allowable value, max = Maximum allowable value, step = Increment added or subtracted by spinning the widget
Method set_adjustment ( adjustment ) ---> {GtkSpinButton} Replaces the GtkAdjustment associated with spin_button. : adjustment = a GtkAdjustment to replace the existing adjustment
Method set_digits ( digits ) ---> {GtkSpinButton} Set the precision to be displayed by spin_button. Up to 20 digit precision is allowed. : digits = the number of digits after the decimal point to be displayed for the spin button's value
Method set_increments ( step, page ) ---> {GtkSpinButton} Sets the step and page increments for spin_button. : step = increment applied for a button 1 press., page = increment applied for a button 2 press.
Method set_numeric ( numeric ) ---> {GtkSpinButton} Sets the flag that determines if non-numeric text can be typed into the spin button. : numeric = flag indicating if only numeric entry is allowed.
Method set_range ( min, max ) ---> {GtkSpinButton} Sets the minimum and maximum allowable values for spin_button : min = minimum allowable value, max = maximum allowable value
Method set_snap_to_ticks ( snap_to_ticks ) ---> {GtkSpinButton} Sets the policy as to whether values are corrected to the nearest step increment when a spin button is activated after providing an invalid value. : snap_to_ticks = a flag indicating if invalid values should be corrected.
Method set_update_policy ( policy ) ---> {GtkSpinButton} Sets the update behavior of a spin button. : policy = A GtkSpinButtonUpdatePolicy value
Method set_value ( value ) ---> {GtkSpinButton} Set the value of spin_button. : value = the new value
Method set_wrap ( wrap ) ---> {GtkSpinButton} Sets the flag that determines if a spin button value wraps around to the opposite limit when the upper or lower limit of the range is exceeded. : wrap = a flag indicating if wrapping behavior is performed.
Method signal_change_value (  ) ---> {GtkSpinButton} Connect a VMSlot to the spinbutton change-value signal and return it
Method signal_output (  ) ---> {GtkSpinButton} The output signal can be used to change to formatting of the value that is displayed in the spin buttons entry.
Method signal_value_changed (  ) ---> {GtkSpinButton} Connect a VMSlot to the spinbutton value_changed signal and return it
Method signal_wrapped (  ) ---> {GtkSpinButton} The wrapped signal is emitted right after the spinbutton wraps from its maximum to minimum value or vice-versa.
Method spin ( direction, increment ) ---> {GtkSpinButton} Increment or decrement a spin button's value in a specified direction by a specified amount. : direction = a GtkSpinType indicating the direction to spin., increment = step increment to apply in the specified direction.
Method update (  ) ---> {GtkSpinButton} Manually force an update of the spin button.
Method get_context_id ( context_description ) ---> {GtkStatusbar} Returns: an integer id | Returns a new context identifier, given a description of the actual context. : context_description = textual description of what context the new message is being used in
Method get_has_resize_grip (  ) ---> {GtkStatusbar} Returns: true if the statusbar has a resize grip. | Returns whether the statusbar has a resize grip.
Method get_message_area (  ) ---> {GtkStatusbar} Returns: a GtkHBox | Retrieves the box containing the label widget.
Method pop ( context_id ) ---> {GtkStatusbar} Removes the first message in the GtkStatusBar's stack with the given context id. : context_id = a context identifier
Method push ( context_id, text ) ---> {GtkStatusbar} Returns: a message id that can be used with remove(). | Pushes a new message onto a statusbar's stack. : context_id = the message's context id, as returned by get_context_id(), text = the message to add to the statusbar
Method remove ( context_id, message_id ) ---> {GtkStatusbar} Forces the removal of a message from a statusbar's stack. : context_id = a context identifier, message_id = a message identifier, as returned by push()
Method set_has_resize_grip ( setting ) ---> {GtkStatusbar} Sets whether the statusbar has a resize grip. true by default. : setting = true to have a resize grip
Method attach ( child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding ) ---> {GtkTable} Adds a widget to a table. : child = The widget to add., left_attach = the column number to attach the left side of a child widget to., right_attach = the column number to attach the right side of a child widget to., top_attach = the row number to attach the top of a child widget to., bottom_attach = the row number to attach the bottom of a child widget to., xoptions = (GtkAttachOptions) Used to specify the properties of the child widget when the table is resized., yoptions = (GtkAttachOptions) The same as xoptions, except this field determines behaviour of vertical resizing., xpadding = An integer value specifying the padding on the left and right of the widget being added to the table., ypadding = The amount of padding above and below the child widget.
Method attach_defaults ( child, left_attach, right_attach, top_attach, bottom_attach ) ---> {GtkTable} Adds a widget to a table. : child = The widget to add., left_attach = the column number to attach the left side of a child widget to., right_attach = the column number to attach the right side of a child widget to., top_attach = the row number to attach the top of a child widget to., bottom_attach = the row number to attach the bottom of a child widget to.
Method get_col_spacing ( column ) ---> {GtkTable} Returns: the column spacing | Gets the amount of space between column col, and column col + 1. : column = a column in the table, 0 indicates the first column
Method get_default_col_spacing (  ) ---> {GtkTable} Returns: the default column spacing | Gets the default column spacing for the table.
Method get_default_row_spacing (  ) ---> {GtkTable} Returns: the default row spacing | Gets the default row spacing for the table. This is the spacing that will be used for newly added rows.
Method get_homogeneous (  ) ---> {GtkTable} Returns: (boolean) true if the cells are all constrained to the same size | Returns whether the table cells are all constrained to the same width and height.
Method get_row_spacing ( row ) ---> {GtkTable} Returns: the row spacing | Gets the amount of space between row row, and row row + 1. : row = a row in the table, 0 indicates the first row
Method resize ( rows, columns ) ---> {GtkTable} Resizes the table. : rows = The new number of rows., columns = The new number of columns.
Method set_col_spacing ( column, spacing ) ---> {GtkTable} Alters the amount of space between a given table column and the following column. : column = the column whose spacing should be changed., spacing = number of pixels that the spacing should take up.
Method set_col_spacings ( spacing ) ---> {GtkTable} Sets the space between every column in table equal to spacing. : spacing = the number of pixels of space to place between every column in the table.
Method set_homogeneous ( homogeneous ) ---> {GtkTable} Changes the homogenous property of table cells, ie. whether all cells are an equal size or not. : homogeneous = Set to true to ensure all table cells are the same size. Set to false if this is not your desired behaviour.
Method set_row_spacing ( row, spacing ) ---> {GtkTable} Changes the space between a given table row and the subsequent row. : row = row number whose spacing will be changed., spacing = number of pixels that the spacing should take up.
Method set_row_spacings ( spacing ) ---> {GtkTable} Sets the space between every row in table equal to spacing. : spacing = the number of pixels of space to place between every row in the table.
Method add_mark ( mark, where ) ---> {GtkTextBuffer} Adds the mark at position where. : mark = the mark to add, where = location to place mark
Method apply_tag ( tag, start, end ) ---> {GtkTextBuffer} Emits the "apply-tag" signal on buffer. : tag = a GtkTextTag, start = one bound of range to be tagged, end = other bound of range to be tagged
Method apply_tag_by_name ( name, start, end ) ---> {GtkTextBuffer} Calls gtk_text_tag_table_lookup() on the buffer's tag table to get a GtkTextTag, then calls gtk_text_buffer_apply_tag(). : name = name of a named GtkTextTag, start = one bound of range to be tagged, end = other bound of range to be tagged
Method backspace ( iter, interactive, default_editable ) ---> {GtkTextBuffer} Returns: true if the buffer was modified | Performs the appropriate action as if the user hit the delete key with the cursor at the position specified by iter. : iter = a position in buffer, interactive = whether the deletion is caused by user interaction, default_editable = whether the buffer is editable by default
Method begin_user_action (  ) ---> {GtkTextBuffer} Called to indicate that the buffer operations between here and a call to gtk_text_buffer_end_user_action() are part of a single user-visible operation.
Method create_mark ( mark_name, where, left_gravity ) ---> {GtkTextBuffer} Creates a mark at position where. : mark_name = name for mark, or nil, where = (GtkTextIter) location to place mark, left_gravity = (boolean) whether the mark has left gravity
Method delete ( start, end ) ---> {GtkTextBuffer} Deletes text between start and end. : start = a position in buffer, end = another position in buffer
Method delete_interactive ( start, end, default_editable ) ---> {GtkTextBuffer} Returns: whether some text was actually deleted | Deletes all editable text in the given range. : start = a position in buffer, end = another position in buffer, default_editable = whether the buffer is editable by default
Method delete_mark ( amrk ) ---> {GtkTextBuffer} Deletes mark, so that it's no longer located anywhere in the buffer. : amrk = a GtkTextMark in buffer
Method delete_mark_by_name ( name ) ---> {GtkTextBuffer} Deletes the mark named name; the mark must exist. : name = name of a mark in buffer
Method delete_selection ( interactive, default_editable ) ---> {GtkTextBuffer} Returns: whether there was a non-empty selection to delete | Deletes the range between the "insert" and "selection_bound" marks, that is, the currently-selected text. : interactive = whether the deletion is caused by user interaction, default_editable = whether the buffer is editable by default
Method end_user_action (  ) ---> {GtkTextBuffer} Should be paired with a call to begin_user_action(). See that function for a full explanation.
Method get_bounds (  ) ---> {GtkTextBuffer} Returns: [ GtkTextIter, GtkTextIter ] | Retrieves the first and last iterators in the buffer, i.e. the entire buffer lies within the range [start,end].
Method get_char_count (  ) ---> {GtkTextBuffer} Gets the number of characters in the buffer.
Method get_end_iter (  ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Initializes iter with the "end iterator," one past the last valid character in the text buffer.
Method get_has_selection (  ) ---> {GtkTextBuffer} Returns: true if the there is text selected | Indicates whether the buffer has some text currently selected.
Method get_insert (  ) ---> {GtkTextBuffer} Returns: (GtkTextMark) insertion point mark. | Returns the mark that represents the cursor (insertion point).
Method get_iter_at_line ( line_number ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Initializes iter to the start of the given line. : line_number = line number counting from 0
Method get_iter_at_line_index ( line_number, byte_offset ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Obtains an iterator pointing to byte_index within the given line. : line_number = line number counting from 0, byte_offset = byte index from start of line
Method get_iter_at_line_offset ( line_number, line_offset ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Obtains an iterator pointing to char_offset within the given line. : line_number = line number counting from 0, line_offset = char offset from start of line
Method get_iter_at_offset ( char_offset ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Initializes iter to a position char_offset chars from the start of the entire buffer. : char_offset = char offset from start of buffer, counting from 0, or -1
Method get_line_count (  ) ---> {GtkTextBuffer} Returns: number of lines in the buffer | Obtains the number of lines in the buffer.
Method get_mark ( name ) ---> {GtkTextBuffer} Returns: a GtkTextMark, or nil. | Returns the mark named name in buffer buffer, or nil if no such mark exists in the buffer. : name = a mark name
Method get_modified (  ) ---> {GtkTextBuffer} Returns: true if the buffer has been modified | Indicates whether the buffer has been modified since the last call to set_modified() set the modification flag to false.
Method get_selection_bound (  ) ---> {GtkTextBuffer} Returns: (GtkTextMark) selection bound mark. | Returns the mark that represents the selection bound.
Method get_selection_bounds (  ) ---> {GtkTextBuffer} Returns: [ boolean (whether the selection has nonzero length ), (GtkTextIter) start, (GtkTextIter) end ] | Returns true if some text is selected; places the bounds of the selection in start and end (if the selection has length 0, then start and end are filled in with the same value).
Method get_slice ( start, end, include_hidden_chars ) ---> {GtkTextBuffer} Returns: an UTF-8 string | Returns the text in the range [start,end). : start = start of range, end = end of range, include_hidden_chars = whether to include invisible text
Method get_start_iter (  ) ---> {GtkTextBuffer} Returns: (GtkTextIter) | Initialize iter with the first position in the text buffer.
Method get_tag_table (  ) ---> {GtkTextBuffer} Returns: the buffer's tag table. | Get the GtkTextTagTable associated with this buffer.
Method get_text ( start, end, include_hidden_chars ) ---> {GtkTextBuffer} Returns: an UTF-8 string | Returns the text in the range [start,end). : start = start of range, end = end of range, include_hidden_chars = whether to include invisible text
Method insert ( iter, text, len ) ---> {GtkTextBuffer} Inserts len bytes of text at position iter. : iter = (GtkTextIter) a position in the buffer, text = some text in UTF-8 format, len = length of text, in bytes
Method insert_at_cursor ( text, len ) ---> {GtkTextBuffer} Simply calls insert(), using the current cursor position as the insertion point. : text = some text in UTF-8 format, len = length of text, in bytes
Method insert_interactive ( iter, text, len, default_editable ) ---> {GtkTextBuffer} Returns: whether text was actually inserted | Like insert(), but the insertion will not occur if iter is at a non-editable location in the buffer. : iter = (GtkTextIter) a position in the buffer, text = some text in UTF-8 format, len = length of text, in bytes, default_editable = (boolean)
Method insert_interactive_at_cursor ( text, len, default_editable ) ---> {GtkTextBuffer} Returns: whether text was actually inserted | Calls gtk_text_buffer_insert_interactive() at the cursor position. : text = some text in UTF-8 format, len = length of text, in bytes, default_editable = (boolean) default editability of buffer
Method insert_pixbuf ( iter, pixbuf ) ---> {GtkTextBuffer} Inserts an image into the text buffer at iter. : iter = location to insert the pixbuf, pixbuf = a GdkPixbuf
Method insert_range ( iter, start, end ) ---> {GtkTextBuffer} Copies text, tags, and pixbufs between start and end (the order of start and end doesn't matter) and inserts the copy at iter. : iter = (GtkTextIter) a position in buffer, start = (GtkTextIter) a position in a GtkTextBuffer, end = (GtkTextIter) another position in the same buffer as start
Method insert_range_interactive ( iter, start, end, default_editable ) ---> {GtkTextBuffer} Returns: whether an insertion was possible at iter | Like insert(), but the insertion will not occur if iter is at a non-editable location in the buffer. : iter = (GtkTextIter) a position in buffer, start = (GtkTextIter) a position in a GtkTextBuffer, end = (GtkTextIter) another position in the same buffer as start, default_editable = (boolean) default editability of buffer
Method move_mark ( mark, where ) ---> {GtkTextBuffer} Moves mark to the new location where. : mark = a GtkTextMark, where = new location for mark in buffer
Method move_mark_by_name ( name, where ) ---> {GtkTextBuffer} Moves the mark named name (which must exist) to location where. : name = name of a mark, where = new location for mark
Method place_cursor ( where ) ---> {GtkTextBuffer} This function moves the "insert" and "selection_bound" marks simultaneously. : where = (GtkTextIter) where to put the cursor
Method remove_all_tags ( start, end ) ---> {GtkTextBuffer} Removes all tags in the range between start and end. : start = one bound of range to be untagged, end = other bound of range to be untagged
Method remove_tag ( tag, start, end ) ---> {GtkTextBuffer} Emits the "remove-tag" signal. : tag = a GtkTextTag, start = one bound of range to be untagged, end = other bound of range to be untagged
Method remove_tag_by_name ( name, start, end ) ---> {GtkTextBuffer} Calls gtk_text_tag_table_lookup() on the buffer's tag table to get a GtkTextTag, then calls gtk_text_buffer_remove_tag(). : name = name of a named GtkTextTag, start = one bound of range to be untagged, end = other bound of range to be untagged
Method select_range ( ins, bound ) ---> {GtkTextBuffer} This function moves the "insert" and "selection_bound" marks simultaneously. : ins = (GtkTextIter) where to put the "insert" mark, bound = (GtkTextIter) where to put the "selection_bound" mark
Method set_modified ( setting ) ---> {GtkTextBuffer} Used to keep track of whether the buffer has been modified since the last time it was saved. : setting = modification flag setting
Method set_text ( text, len ) ---> {GtkTextBuffer} Deletes current contents of buffer, and inserts text instead. : text = UTF-8 text to insert, len = length of text in bytes
Method copy (  ) ---> {GtkTextIter} Returns: a copy of GtkTextIter | Creates a copy of an iterator.
Method get_char (  ) ---> {GtkTextIter} Returns: a Unicode character, or nil if iter is not dereferenceable | Returns the Unicode character at this iterator.
Method get_line (  ) ---> {GtkTextIter} Returns: a line number | Returns the line number containing the iterator.
Method get_line_index (  ) ---> {GtkTextIter} Returns: distance from start of line, in bytes | Returns the byte index of the iterator, counting from the start of a newline-terminated line.
Method get_line_offset (  ) ---> {GtkTextIter} Returns: offset from start of line | Returns the character offset of the iterator, counting from the start of a newline-terminated line.
Method get_offset (  ) ---> {GtkTextIter} Returns: a character offset | Returns the character offset of an iterator.
Method get_pixbuf (  ) ---> {GtkTextIter} Returns: the pixbuf | If the element at iter is a pixbuf, the pixbuf is returned. Otherwise, nil is returned.
Method get_slice ( end ) ---> {GtkTextIter} Returns: slice of text from the buffer | Returns the text in the given range. : end = iterator at end of a range
Method get_text ( end ) ---> {GtkTextIter} Returns: array of characters from the buffer | Returns text in the given range. : end = iterator at end of a range
Method get_visible_line_index (  ) ---> {GtkTextIter} Returns: byte index of iter with respect to the start of the line | Returns the number of bytes from the start of the line to the given iter, not counting bytes that are invisible due to tags with the "invisible" flag toggled on.
Method get_visible_line_offset (  ) ---> {GtkTextIter} Returns: offset in visible characters from the start of the line | Returns the offset in characters from the start of the line to the given iter, not counting characters that are invisible due to tags with the "invisible" flag toggled on.
Method get_visible_slice ( end ) ---> {GtkTextIter} Returns: slice of text from the buffer | Like get_slice(), but invisible text is not included. : end = iterator at end of a range
Method get_visible_text ( end ) ---> {GtkTextIter} Returns: string containing visible text in the range |  : end = iterator at end of a range
Method get_buffer (  ) ---> {GtkTextMark} Returns: the mark's GtkTextBuffer. | Gets the buffer this mark is located inside, or nil if the mark is deleted.
Method get_deleted (  ) ---> {GtkTextMark} Returns: whether the mark is deleted | Returns true if the mark has been removed from its buffer with gtk_text_buffer_delete_mark().
Method get_left_gravity (  ) ---> {GtkTextMark} Returns: true if the mark has left gravity, false otherwise | Determines whether the mark has left gravity.
Method get_name (  ) ---> {GtkTextMark} Returns: mark name | Returns the mark name; returns nil for anonymous marks.
Method get_visible (  ) ---> {GtkTextMark} Returns: true if visible | Returns true if the mark is visible (i.e. a cursor is displayed for it).
Method set_visible ( setting ) ---> {GtkTextMark} Sets the visibility of mark. : setting = visibility of mark
Method get_priority (  ) ---> {GtkTextTag} Returns: The tag's priority. | Get the tag priority.
Method set_priority ( priority ) ---> {GtkTextTag} Sets the priority of a GtkTextTag. : priority = the new priority
Method add ( tag ) ---> {GtkTextTagTable} Add a tag to the table. The tag is assigned the highest priority in the table. : tag = a GtkTextTag
Method get_size (  ) ---> {GtkTextTagTable} Returns: number of tags in table | Returns the size of the table (number of tags)
Method lookup ( name ) ---> {GtkTextTagTable} Returns: The tag, or nil if none by that name is in the table | Look up a named tag. : name = name of a tag
Method remove ( tag ) ---> {GtkTextTagTable} Remove a tag from the table. : tag = a GtkTextTag
Method signal_tag_added (  ) ---> {GtkTextTagTable} Connect a VMSlot to the table tag-added signal and return it
Method signal_tag_changed (  ) ---> {GtkTextTagTable} Connect a VMSlot to the table tag-changed signal and return it
Method signal_tag_removed (  ) ---> {GtkTextTagTable} Connect a VMSlot to the table tag-removed signal and return it
Method add_child_in_window ( child, which_window, xpos, ypos ) ---> {GtkTextView} Adds a child at fixed coordinates in one of the text widget's windows. : child = a GtkWidget, which_window = (GtkTextWindowType) which window the child should appear in, xpos = X position of child in window coordinates, ypos = Y position of child in window coordinates
Method backward_display_line ( iter ) ---> {GtkTextView} Returns: true if iter was moved and is not on the end iterator | Moves the given iter backward by one display (wrapped) line. : iter = a GtkTextIter
Method backward_display_line_start ( iter ) ---> {GtkTextView} Returns: true if iter was moved and is not on the end iterator | Moves the given iter backward to the next display line start. : iter = a GtkTextIter
Method buffer_to_window_coords ( win, buffer_x, buffer_y ) ---> {GtkTextView} Returns: [ window_x, window_y ] | Converts coordinate (buffer_x, buffer_y) to coordinates for the window win, and stores the result in (window_x, window_y). : win = a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE, buffer_x = buffer x coordinate, buffer_y = buffer y coordinate
Method forward_display_line ( iter ) ---> {GtkTextView} Returns: true if iter was moved and is not on the end iterator | Moves the given iter forward by one display (wrapped) line. : iter = a GtkTextIter
Method forward_display_line_end ( iter ) ---> {GtkTextView} Returns: true if iter was moved and is not on the end iterator | Moves the given iter forward to the next display line end. : iter = a GtkTextIter
Method get_accepts_tab (  ) ---> {GtkTextView} Returns: true if pressing the Tab key inserts a tab character, false if pressing the Tab key moves the keyboard focus. | Returns whether pressing the Tab key inserts a tab characters.
Method get_border_window_size ( type ) ---> {GtkTextView} Returns: width of window | Gets the width of the specified border window. : type = (GtkTextWindowType) window to return size from
Method get_buffer (  ) ---> {GtkTextView} Returns: a GtkTextBuffer. | Returns the GtkTextBuffer being displayed by this text view.
Method get_cursor_visible (  ) ---> {GtkTextView} Returns: whether the insertion mark is visible | Find out whether the cursor is being displayed.
Method get_editable (  ) ---> {GtkTextView} Returns: whether text is editable by default | Returns the default editability of the GtkTextView.
Method get_indent (  ) ---> {GtkTextView} Returns: number of pixels of indentation$ | Gets the default indentation of paragraphs in text_view.
Method get_iter_at_location ( x, y ) ---> {GtkTextView} Returns: a GtkTextIter | Retrieves the iterator at buffer coordinates x and y. : x = x position, in buffer coordinates, y = y position, in buffer coordinates
Method get_iter_at_position ( x, y ) ---> {GtkTextView} Returns: [ GtkTextIter, trailing ]. trailing is an integer indicating where in the grapheme the user clicked. It will either be zero, or the number of characters in the grapheme. 0 represents the trailing edge of the grapheme. | Retrieves the iterator pointing to the character at buffer coordinates x and y. : x = x position, in buffer coordinates, y = y position, in buffer coordinates
Method get_justification (  ) ---> {GtkTextView} Returns: default justification | Gets the default justification of paragraphs in text_view.
Method get_left_margin (  ) ---> {GtkTextView} Returns: left margin in pixels | Gets the default left margin size of paragraphs in the text_view.
Method get_line_at_y ( target_iter, y ) ---> {GtkTextView} Returns: top coordinate of the line | Gets the GtkTextIter at the start of the line containing the coordinate y. : target_iter = a GtkTextIter, y = a y coordinate (integer)
Method get_line_yrange ( iter ) ---> {GtkTextView} Returns: [ y coordinate, height ] | Gets the y coordinate of the top of the line containing iter, and the height of the line. : iter = a GtkTextIter
Method get_overwrite (  ) ---> {GtkTextView} Returns: whether text_view is in overwrite mode or not. | Returns whether the GtkTextView is in overwrite mode or not.
Method get_pixels_above_lines (  ) ---> {GtkTextView} Returns: default number of pixels above paragraphs | Gets the default number of pixels to put above paragraphs.
Method get_pixels_below_lines (  ) ---> {GtkTextView} Returns: default number of blank pixels below paragraphs | Gets the value set by set_pixels_below_lines().
Method get_pixels_inside_wrap (  ) ---> {GtkTextView} Returns: default number of pixels of blank space between wrapped lines | Gets the value set by set_pixels_inside_wrap().
Method get_right_margin (  ) ---> {GtkTextView} Returns: right margin in pixels | Sets the default right margin for text in the text view.
Method get_wrap_mode (  ) ---> {GtkTextView} Returns: the line wrap setting | Gets the line wrapping for the view.
Method move_child ( child, xpos, ypos ) ---> {GtkTextView} Updates the position of a child, as for add_child_in_window(). : child = child widget already added to the text view, xpos = new X position in window coordinates, ypos = new Y position in window coordinates
Method move_mark_onscreen ( mark ) ---> {GtkTextView} Returns: true if the mark moved (wasn't already onscreen) | Moves a mark within the buffer so that it's located within the currently-visible text area. : mark = a GtkTextMark
Method move_visually ( iter, count ) ---> {GtkTextView} Returns: true if iter moved and is not on the end iterator | Move the iterator a given number of characters visually, treating it as the strong cursor position. : iter = a GtkTextIter, count = number of characters to move (negative moves left, positive moves right)
Method new_with_buffer ( buffer ) ---> {GtkTextView} Creates a new GtkTextView widget displaying the buffer buffer. : buffer = a GtkTextBuffer (or nil)
Method place_cursor_onscreen (  ) ---> {GtkTextView} Returns: true if the cursor had to be moved. | Moves the cursor to the currently visible region of the buffer, it it isn't there already.
Method scroll_mark_onscreen ( mark ) ---> {GtkTextView} Scrolls text_view the minimum distance such that mark is contained within the visible area of the widget. : mark = a mark in the buffer
Method scroll_to_iter ( iter, within_margin, use_align, xalign, yalign ) ---> {GtkTextView} Returns: true if scrolling occurred | Scrolls text_view so that iter is on the screen in the position indicated by xalign and yalign. : iter = a GtkTextIter, within_margin = margin as a [0.0,0.5] fraction of screen size, use_align = (boolean) whether to use alignment arguments (if false, just get the mark onscreen), xalign = horizontal alignment of mark within visible area, yalign = vertical alignment of mark within visible area
Method scroll_to_mark ( mark, within_margin, use_align, xalign, yalign ) ---> {GtkTextView} Scrolls text_view so that mark is on the screen in the position indicated by xalign and yalign. : mark = a GtkTextMark, within_margin = margin as a [0.0,0.5] fraction of screen size, use_align = (boolean) whether to use alignment arguments (if false, just get the mark onscreen), xalign = horizontal alignment of mark within visible area, yalign = vertical alignment of mark within visible area
Method set_accepts_tab ( accept_tag ) ---> {GtkTextView} Sets the behavior of the text widget when the Tab key is pressed. : accept_tag = true if pressing the Tab key should insert a tab character, false, if pressing the Tab key should move the keyboard focus.
Method set_border_window_size ( type, size ) ---> {GtkTextView} Sets the width of GTK_TEXT_WINDOW_LEFT or GTK_TEXT_WINDOW_RIGHT, or the height of GTK_TEXT_WINDOW_TOP or GTK_TEXT_WINDOW_BOTTOM. : type = (GtkTextWindowType) window to affect, size = width or height of the window
Method set_buffer ( buffer ) ---> {GtkTextView} Sets buffer as the buffer being displayed by text_view. : buffer = a GtkTextBuffer (or nil)
Method set_cursor_visible ( setting ) ---> {GtkTextView} Toggles whether the insertion point is displayed. : setting = whether to show the insertion cursor
Method set_editable ( setting ) ---> {GtkTextView} Sets the default editability of the GtkTextView. : setting = (boolean) whether it's editable
Method set_indent ( indent ) ---> {GtkTextView} Sets the default indentation for paragraphs in text_view. : indent = indentation in pixels
Method set_justification ( justification ) ---> {GtkTextView} Sets the default justification of text in text_view. : justification = (GtkJustification)
Method set_left_margin ( left_margin ) ---> {GtkTextView} Sets the default left margin for text in text_view. : left_margin = left margin in pixels
Method set_overwrite ( true ) ---> {GtkTextView} Changes the GtkTextView overwrite mode. : true = to turn on overwrite mode, false to turn it off
Method set_pixels_above_lines ( pixels_above_lines ) ---> {GtkTextView} Sets the default number of blank pixels above paragraphs in text_view. : pixels_above_lines = pixels above paragraphs
Method set_pixels_below_lines ( pixels_below_lines ) ---> {GtkTextView} Sets the default number of pixels of blank space to put below paragraphs in text_view. : pixels_below_lines = pixels below paragraphs
Method set_pixels_inside_wrap ( pixels_inside_wrap ) ---> {GtkTextView} Sets the default number of pixels of blank space to leave between display/wrapped lines within a paragraph. : pixels_inside_wrap = default number of pixels between wrapped lines
Method set_right_margin ( right_margin ) ---> {GtkTextView} Sets the default right margin for text in the text view. : right_margin = right margin in pixels
Method set_wrap_mode ( wrap_mode ) ---> {GtkTextView} Sets the line wrapping for the view. : wrap_mode = a GtkWrapMode
Method starts_display_line ( iter ) ---> {GtkTextView} Returns: true if iter begins a wrapped line | Determines whether iter is at the start of a display line. : iter = a GtkTextIter
Method window_to_buffer_coords ( win, window_x, window_y ) ---> {GtkTextView} Returns: [ buffer_x, buffer_y ] | Converts coordinates on the window identified by win to buffer coordinates, storing the result in (buffer_x,buffer_y). : win = a GtkTextWindowType except GTK_TEXT_WINDOW_PRIVATE, window_x = window x coordinate, window_y = window y coordinate
Method get_active (  ) ---> {GtkToggleAction} Returns: the checked state of the toggle action | Returns the checked state of the toggle action.
Method get_draw_as_radio (  ) ---> {GtkToggleAction} Returns: whether the action should have proxies like a radio action. | Returns whether the action should have proxies like a radio action.
Method set_active ( is_active ) ---> {GtkToggleAction} Sets the checked state on the toggle action. : is_active = (boolean) whether the action should be checked or not
Method set_draw_as_radio ( draw_as_radio ) ---> {GtkToggleAction} Sets whether the action should have proxies like a radio action. : draw_as_radio = (boolean) whether the action should have proxies like a radio action
Method signal_toggled (  ) ---> {GtkToggleAction} Connect a VMSlot to the action toggled signal and return it
Method toggled (  ) ---> {GtkToggleAction} Emits the "toggled" signal on the toggle action.
Method get_active (  ) ---> {GtkToggleButton} Returns: true if the toggle button is pressed in and false if it is raised. | Queries a GtkToggleButton and returns its current state.
Method get_inconsistent (  ) ---> {GtkToggleButton} Returns: (boolean) true if the button is displayed as inconsistent, false otherwise | Gets the value set by set_inconsistent().
Method get_mode (  ) ---> {GtkToggleButton} Returns: (boolean) true if the togglebutton is drawn as a separate indicator and label. | Retrieves whether the button is displayed as a separate indicator and label.
Method new_with_label ( label ) ---> {GtkToggleButton} Returns: a new toggle button. | Creates a new toggle button with a text label. : label = a string containing the message to be placed in the toggle button.
Method new_with_mnemonic ( label ) ---> {GtkToggleButton} Returns: a new toggle button. | Creates a new GtkToggleButton containing a label. : label = the text of the button, with an underscore in front of the mnemonic character
Method set_active ( is_active ) ---> {GtkToggleButton} Sets the status of the toggle button. : is_active = Set to true if you want the GtkToggleButton to be 'pressed in', and false to raise it.
Method set_inconsistent ( setting ) ---> {GtkToggleButton} Sets the button consistency state. : setting = (boolean) true if state is inconsistent
Method set_mode ( draw_indicator ) ---> {GtkToggleButton} Sets whether the button is displayed as a separate indicator and label. : draw_indicator = (boolean) if true, draw the button as a separate indicator and label; if false, draw the button like a normal button
Method signal_toggled (  ) ---> {GtkToggleButton} Should be connected if you wish to perform an action whenever the GtkToggleButton's state is changed.
Method toggled (  ) ---> {GtkToggleButton} Emits the toggled signal on the GtkToggleButton.
Method get_active (  ) ---> {GtkToggleToolButton} Returns: TRUE if the toggle tool button is pressed in, FALSE if not | Queries a GtkToggleToolButton and returns its current state.
Method new_from_stock ( stock_id ) ---> {GtkToggleToolButton} Returns: A new GtkToggleToolButton | Creates a new GtkToggleToolButton containing the image and text from a stock item. : stock_id = the name of the stock item
Method set_active ( is_active ) ---> {GtkToggleToolButton} Sets the status of the toggle tool button. : is_active = whether button should be active
Method signal_toggled (  ) ---> {GtkToggleToolButton} Emitted whenever the toggle tool button changes state.
Method get_drop_index ( x, y ) ---> {GtkToolbar} Returns: The position corresponding to the point (x, y) on the toolbar. | Returns the position corresponding to the indicated point on toolbar. : x = x coordinate of a point on the toolbar, y = y coordinate of a point on the toolbar
Method get_icon_size (  ) ---> {GtkToolbar} Returns: the current icon size for the icons on the toolbar (GtkIconSize). | Retrieves the icon size for the toolbar.
Method get_item_index ( item ) ---> {GtkToolbar} Returns: The position of item on the toolbar | Returns the position of item on the toolbar, starting from 0. : item = a GtkToolItem that is a child of toolbar
Method get_n_items (  ) ---> {GtkToolbar} Returns: the number of items on the toolbar | Returns the number of items on the toolbar.
Method get_nth_item (  ) ---> {GtkToolbar} Returns the n'th item on toolbar, or NULL if the toolbar does not contain an n'th item.
Method get_relief_style (  ) ---> {GtkToolbar} Returns: The relief style of buttons on toolbar (GtkReliefStyle). | Returns the relief style of buttons on toolbar.
Method get_show_arrow (  ) ---> {GtkToolbar} Returns: TRUE if the toolbar has an overflow menu. | Returns whether the toolbar has an overflow menu.
Method get_style (  ) ---> {GtkToolbar} Returns: the current style of toolbar (GtkToolbarStyle). | Retrieves whether the toolbar has text, icons, or both.
Method insert ( item, pos ) ---> {GtkToolbar} Insert a GtkToolItem into the toolbar at position pos. : item = a GtkToolItem, pos = the position of the new item
Method set_drop_highlight_item ( tool_item, index ) ---> {GtkToolbar} Highlights toolbar to give an idea of what it would look like if item was added to toolbar at the position indicated by index_. : tool_item = a GtkToolItem, or nil to turn of highlighting., index = a position on toolbar
Method set_icon_size ( icon_size ) ---> {GtkToolbar} This function sets the size of stock icons in the toolbar. : icon_size = The GtkIconSize that stock icons in the toolbar shall have
Method set_show_arrow ( show_arrow ) ---> {GtkToolbar} Sets whether to show an overflow menu when toolbar doesn't have room for all items on it. : show_arrow = Whether to show an overflow menu
Method set_style ( style ) ---> {GtkToolbar} Alters the view of toolbar to display either icons only, text only, or both. : style = the new style for toolbar (GtkToolbarStyle).
Method signal_orientation_changed (  ) ---> {GtkToolbar} Emitted when the orientation of the toolbar changes.
Method signal_popup_context_menu (  ) ---> {GtkToolbar} Emitted when the user right-clicks the toolbar or uses the keybinding to display a popup menu.
Method signal_style_changed (  ) ---> {GtkToolbar} Emitted when the style of the toolbar changes.
Method unset_icon_size (  ) ---> {GtkToolbar} Unsets toolbar icon size set with gtk_toolbar_set_icon_size(), so that user preferences will be used to determine the icon size.
Method unset_style (  ) ---> {GtkToolbar} Unsets a toolbar style set with gtk_toolbar_set_style(), so that user preferences will be used to determine the toolbar style.
Method get_icon_name (  ) ---> {GtkToolButton} Returns: the icon name or NULL if the tool button has no themed icon | Returns the name of the themed icon for the tool button.
Method get_icon_widget (  ) ---> {GtkToolButton} Returns: The widget used as icon on button, or NULL. | Return the widget used as icon widget on button.
Method get_label (  ) ---> {GtkToolButton} Returns: The label, or NULL | Returns the label used by the tool button, or NULL if the tool button doesn't have a label or uses a the label from a stock item.
Method get_label_widget (  ) ---> {GtkToolButton} Returns: The widget used as label on button, or NULL. | Returns the widget used as label on button.
Method get_stock_id (  ) ---> {GtkToolButton} Returns: the name of the stock item for button. | Returns the name of the stock item.
Method get_use_underline (  ) ---> {GtkToolButton} Returns: TRUE if underscores in the label property are used as mnemonics on menu items on the overflow menu. | Returns whether underscores in the label property are used as mnemonics on menu items on the overflow menu.
Method new_from_stock ( stock_id ) ---> {GtkToolButton} Returns: A new GtkToolButton | Creates a new GtkToolButton containing the image and text from a stock item. : stock_id = the name of the stock item
Method set_icon_name ( the ) ---> {GtkToolButton} Sets the icon for the tool button from a named themed icon. : the = name of the themed icon, or nil.
Method set_icon_widget ( icon_widget ) ---> {GtkToolButton} Sets icon as the widget used as icon on button. : icon_widget = the widget used as icon, or NULL.
Method set_label ( label ) ---> {GtkToolButton} Sets label as the label used for the tool button. : label = a string that will be used as label, or NULL.
Method set_label_widget ( label_widget ) ---> {GtkToolButton} Sets label_widget as the widget that will be used as the label for button. : label_widget = the widget used as label, or NULL.
Method set_stock_id ( a ) ---> {GtkToolButton} Sets the name of the stock item. : a = name of a stock item, or NULL.
Method set_use_underline ( use_underline ) ---> {GtkToolButton} If set, an underline in the label property indicates that the next character should be used for the mnemonic accelerator key in the overflow menu : use_underline = whether the button label has the form "_Open"
Method signal_clicked (  ) ---> {GtkToolButton} This signal is emitted when the tool button is clicked with the mouse or activated with the keyboard.
Method get_ellipsize_mode (  ) ---> {GtkToolItem} Returns: a PangoEllipsizeMode indicating how text in tool_item should be ellipsized. | Returns the ellipsize mode used for tool_item.
Method get_expand (  ) ---> {GtkToolItem} Returns: TRUE if tool_item is allocated extra space. | Returns whether tool_item is allocated extra space.
Method get_homogeneous (  ) ---> {GtkToolItem} Returns: TRUE if the item is the same size as other homogeneous items. | Returns whether tool_item is the same size as other homogeneous items.
Method get_icon_size (  ) ---> {GtkToolItem} Returns: a GtkIconSize indicating the icon size used for tool_item. | Returns the icon size used for tool_item.
Method get_is_important (  ) ---> {GtkToolItem} Returns: TRUE if tool_item is considered important. | Returns whether tool_item is considered important.
Method get_orientation (  ) ---> {GtkToolItem} Returns: a GtkOrientation indicating the orientation used for tool_item | Returns the orientation used for tool_item.
Method get_relief_style (  ) ---> {GtkToolItem} Returns: a GtkReliefStyle indicating the relief style used for tool_item. | Returns the relief style of tool_item.
Method get_text_alignment (  ) ---> {GtkToolItem} Returns: a numeric value indicating the horizontal text alignment used for tool_item | Returns the text alignment used for tool_item.
Method get_text_orientation (  ) ---> {GtkToolItem} Returns: a GtkOrientation indicating the text orientation used for tool_item | Returns the text orientation used for tool_item.
Method get_toolbar_style (  ) ---> {GtkToolItem} Returns: A GtkToolbarStyle indicating the toolbar style used for tool_item. | Returns the toolbar style used for tool_item.
Method get_use_drag_window (  ) ---> {GtkToolItem} Returns: TRUE if tool_item uses a drag window. | Returns whether tool_item has a drag window.
Method get_visible_horizontal (  ) ---> {GtkToolItem} Returns: TRUE if tool_item is visible on toolbars that are docked horizontally. | Returns whether the tool_item is visible on toolbars that are docked horizontally.
Method get_visible_vertical (  ) ---> {GtkToolItem} Returns: Whether tool_item is visible when the toolbar is docked vertically | Returns whether tool_item is visible when the toolbar is docked vertically.
Method rebuild_menu (  ) ---> {GtkToolItem} Calling this function signals to the toolbar that the overflow menu item for tool_item has changed.
Method retrieve_proxy_menu_item (  ) ---> {GtkToolItem} Returns: The GtkMenuItem that is going to appear in the overflow menu for tool_item. | Returns the GtkMenuItem that was last set by gtk_tool_item_set_proxy_menu_item(), ie. the GtkMenuItem that is going to appear in the overflow menu.
Method set_expand ( expand ) ---> {GtkToolItem} Sets whether tool_item is allocated extra space when there is more room on the toolbar then needed for the items. : expand = Whether tool_item is allocated extra space
Method set_homogeneous (  ) ---> {GtkToolItem} Sets whether tool_item is to be allocated the same size as other homogeneous items.
Method set_is_important ( is_important ) ---> {GtkToolItem} Sets whether tool_item should be considered important. : is_important = whether the tool item should be considered important
Method set_proxy_menu_item ( menu_item_id, menu_item ) ---> {GtkToolItem} Sets the GtkMenuItem used in the toolbar overflow menu. : menu_item_id = a string used to identify menu_item, menu_item = a GtkMenuItem to be used in the overflow menu
Method set_tooltip_markup ( markup ) ---> {GtkToolItem} Sets the markup text to be displayed as tooltip on the item. : markup = markup text to be used as tooltip for tool_item
Method set_tooltip_text ( text ) ---> {GtkToolItem} Sets the text to be displayed as tooltip on the item. : text = text to be used as tooltip for tool_item
Method set_use_drag_window ( use_drag_window ) ---> {GtkToolItem} Sets whether tool_item has a drag window. : use_drag_window = Whether tool_item has a drag window.
Method set_visible_horizontal ( visible_horizontal ) ---> {GtkToolItem} Sets whether tool_item is visible when the toolbar is docked horizontally. : visible_horizontal = Whether tool_item is visible when in horizontal mode
Method set_visible_vertical ( visible_vertical ) ---> {GtkToolItem} Sets whether tool_item is visible when the toolbar is docked vertically. : visible_vertical = whether tool_item is visible when the toolbar is in vertical mode
Method toolbar_reconfigured (  ) ---> {GtkToolItem} Emits the signal "toolbar_reconfigured" on tool_item.
Method get_collapsed (  ) ---> {GtkToolItemGroup} Returns: TRUE if group is collapsed, FALSE if it is expanded | Gets whether group is collapsed or expanded.
Method get_drop_item ( x, y ) ---> {GtkToolItemGroup} Returns: the GtkToolItem at position (x, y) | Gets the tool item at position (x, y). : x = the x position, y = the y position
Method get_ellipsize (  ) ---> {GtkToolItemGroup} Returns: the PangoEllipsizeMode of group | Gets the ellipsization mode of group.
Method get_header_relief (  ) ---> {GtkToolItemGroup} Returns: the GtkReliefStyle | Gets the relief mode of the header button of group.
Method get_item_position ( item ) ---> {GtkToolItemGroup} Returns: the index of item in group or -1 if item is no child of group | Gets the position of item in group as index. : item = a GtkToolItem
Method get_label (  ) ---> {GtkToolItemGroup} Returns: the label of group. | Gets the label of group.
Method get_label_widget (  ) ---> {GtkToolItemGroup} Returns: the label widget of group | Gets the label widget of group.
Method get_n_items (  ) ---> {GtkToolItemGroup} Returns: the number of tool items in group | Gets the number of tool items in group.
Method get_nth_item ( index ) ---> {GtkToolItemGroup} Returns: the GtkToolItem at index | Gets the tool item at index in group. : index = the index
Method insert ( item, position ) ---> {GtkToolItemGroup} Inserts item at position in the list of children of group. : item = the GtkToolItem to insert into group, position = the position of item in group, starting with 0. The position -1 means end of list.
Method set_collapsed ( collapsed ) ---> {GtkToolItemGroup} Sets whether the group should be collapsed or expanded. : collapsed = whether the group should be collapsed or expanded
Method set_ellipsize ( ellipsize ) ---> {GtkToolItemGroup} Sets the ellipsization mode which should be used by labels in group. : ellipsize = the PangoEllipsizeMode labels in group should use
Method set_header_relief ( style ) ---> {GtkToolItemGroup} Set the button relief of the group header. : style = the GtkReliefStyle
Method set_item_position ( item, position ) ---> {GtkToolItemGroup} Sets the position of item in the list of children of group. : item = the GtkToolItem to move to a new position, should be a child of group., position = the new position of item in group, starting with 0. The position -1 means end of list.
Method set_label ( label ) ---> {GtkToolItemGroup} Sets the label of the tool item group. : label = the new human-readable label of of the group
Method set_label_widget ( label_widget ) ---> {GtkToolItemGroup} Sets the label of the tool item group. : label_widget = the widget to be displayed in place of the usual label
Method get_drop_group ( x, y ) ---> {GtkToolPalette} Returns: the GtkToolItemGroup at position or NULL  if there is no such group | Gets the group at position (x, y). : x = the x position, y = the y position
Method get_drop_item ( x, y ) ---> {GtkToolPalette} Returns: the GtkToolItem at position or NULL if there is no such item | Gets the item at position (x, y). : x = the x position, y = the y position
Method get_exclusive ( group ) ---> {GtkToolPalette} Returns: TRUE if group is exclusive | Gets whether group is exclusive or not. : group = a GtkToolItemGroup which is a child of palette
Method get_expand ( group ) ---> {GtkToolPalette} Returns: TRUE if group should be given extra space, FALSE otherwise | Gets whether group should be given extra space. : group = a GtkToolItemGroup which is a child of palette
Method get_group_position ( group ) ---> {GtkToolPalette} Returns: the index of group or -1 if group is not a child of palette | Gets the position of group in palette as index. : group = a GtkToolItemGroup
Method get_hadjustment (  ) ---> {GtkToolPalette} Returns: the horizontal adjustment of palette (GtkAdjustment). | Gets the horizontal adjustment of the tool palette.
Method get_icon_size (  ) ---> {GtkToolPalette} Returns: the GtkIconSize of icons in the tool palette (GtkIconSize). | Gets the size of icons in the tool palette.
Method get_style (  ) ---> {GtkToolPalette} Returns: the GtkToolbarStyle of items in the tool palette. | Gets the style (icons, text or both) of items in the tool palette.
Method get_vadjustment (  ) ---> {GtkToolPalette} Returns: the vertical adjustment of palette | Gets the vertical adjustment of the tool palette.
Method set_drag_source ( targets ) ---> {GtkToolPalette} Sets the tool palette as a drag source. : targets = the GtkToolPaletteDragTargets which the widget should support
Method set_exclusive ( group, exclusive ) ---> {GtkToolPalette} Sets whether the group should be exclusive or not. : group = a GtkToolItemGroup which is a child of palette, exclusive = whether the group should be exclusive or not
Method set_expand ( group, expand ) ---> {GtkToolPalette} Sets whether the group should be given extra space. : group = a GtkToolItemGroup which is a child of palette, expand = whether the group should be given extra space
Method set_group_position ( group, position ) ---> {GtkToolPalette} Sets the position of the group as an index of the tool palette. : group = a GtkToolItemGroup which is a child of palette, position = a new index for group
Method set_icon_size ( icon_size ) ---> {GtkToolPalette} Sets the size of icons in the tool palette. : icon_size = the GtkIconSize that icons in the tool palette shall have.
Method set_style ( style ) ---> {GtkToolPalette} Sets the style (text, icons or both) of items in the tool palette. : style = the GtkToolbarStyle that items in the tool palette shall have
Method signal_set_scroll_adjustments (  ) ---> {GtkToolPalette} Set the scroll adjustments for the viewport.
Method unset_icon_size (  ) ---> {GtkToolPalette} Unsets the tool palette icon size set with gtk_tool_palette_set_icon_size(), so that user preferences will be used to determine the icon size.
Method unset_style (  ) ---> {GtkToolPalette} Unsets a toolbar style set with gtk_tool_palette_set_style(), so that user preferences will be used to determine the toolbar style.
Method get_ellipsize_mode (  ) ---> {GtkToolShell} Returns: the current ellipsize mode of shell (PangoEllipsizeMode). | Retrieves the current ellipsize mode for the tool shell.
Method get_icon_size (  ) ---> {GtkToolShell} Returns: the current size for icons of shell (GtkIconSize). | Retrieves the icon size for the tool shell.
Method get_orientation (  ) ---> {GtkToolShell} Returns: the current orientation of shell (GtkOrientation). | Retrieves the current orientation for the tool shell.
Method get_relief_style (  ) ---> {GtkToolShell} Returns: The relief style of buttons on shell (GtkReliefStyle). | Returns the relief style of buttons on shell.
Method get_style (  ) ---> {GtkToolShell} Returns: the current style of shell (GtkToolbarStyle). | Retrieves whether the tool shell has text, icons, or both.
Method get_text_alignment (  ) ---> {GtkToolShell} Returns: the current text alignment of shell. | Retrieves the current text alignment for the tool shell.
Method get_text_orientation (  ) ---> {GtkToolShell} Returns: the current text orientation of shell (GtkOrientation). | Retrieves the current text orientation for the tool shell.
Method rebuild_menu (  ) ---> {GtkToolShell} Calling this function signals the tool shell that the overflow menu item for tool items have changed.
Method copy (  ) ---> {GtkTreeIter} Returns: a new GtkTreeIter | Creates a copy of the tree iter.
Method get_column_type ( index ) ---> {GtkTreeModel} Returns: The type of the column (GType). | Returns the type of the column. : index = The column index.
Method get_flags (  ) ---> {GtkTreeModel} Returns: The flags supported by this interface. | Returns a set of flags supported by this interface.
Method get_iter ( path ) ---> {GtkTreeModel} Returns: a GtkTreeIter | Returns a valid iterator pointing to path. if path is invalid, an ParamError is raised. : path = The GtkTreePath.
Method get_iter_first (  ) ---> {GtkTreeModel} Returns: a GtkTreeIter, or nil. | Returns the first iterator in the tree (the one at the path "0") or Nil if the tree is empty.
Method get_iter_from_string ( path_string ) ---> {GtkTreeModel} Returns: a GtkTreeIter. | Returns a valid iterator pointing to path_string, if it exists. if path is invalid, an ParamError is raised. : path_string = A string representation of a GtkTreePath.
Method get_n_columns (  ) ---> {GtkTreeModel} Returns: The number of columns. | Returns the number of columns supported by tree_model.
Method get_path ( iter ) ---> {GtkTreeModel} Returns: a newly-created GtkTreePath. | Returns a newly-created GtkTreePath referenced by iter. : iter = The GtkTreeIter.
Method get_string_from_iter ( iter ) ---> {GtkTreeModel} Returns: a string. | Generates a string representation of the iter. : iter = A GtkTreeIter.
Method get_value ( iter, column ) ---> {GtkTreeModel} Returns: the value | Returns value to that at column. : iter = The GtkTreeIter., column = The column to lookup the value at.
Method iter_children ( parent ) ---> {GtkTreeModel} Returns: a new GtkTreeIter, or Nil if there is no children. | Returns an iterator pointing to the first child of parent, or Nil. : parent = The GtkTreeIter, or Nil.
Method iter_has_child ( iter ) ---> {GtkTreeModel} Returns: TRUE if iter has children. | Returns TRUE if iter has children, FALSE otherwise. : iter = The GtkTreeIter to test for children.
Method iter_n_children ( iter ) ---> {GtkTreeModel} Returns: The number of children of iter. | Returns the number of children that iter has. : iter = The GtkTreeIter, or NULL.
Method iter_next ( iter ) ---> {GtkTreeModel} Returns: a new GtkTreeIter or Nil if there is no next row. | Returns an iterator pointing to the node following iter at the current level, or Nil. : iter = The GtkTreeIter.
Method iter_nth_child ( parent, n ) ---> {GtkTreeModel} Returns: a new GtkTreeIter, or Nil if the nth child is not found. | Returns an iterator being the child of parent, using the given index. : parent = The GtkTreeIter to get the child from, or NULL., n = Then index of the desired child.
Method iter_parent ( child ) ---> {GtkTreeModel} Returns: a new GtkTreeIter, or Nil if child has not parent. | Returns an iterator being the parent of child, or Nil. : child = The GtkTreeIter.
Method row_changed ( path, iter ) ---> {GtkTreeModel} Emits the "row-changed" signal on tree_model. : path = A GtkTreePath pointing to the changed row, iter = A valid GtkTreeIter pointing to the changed row
Method row_deleted ( path ) ---> {GtkTreeModel} Emits the "row-deleted" signal on tree_model. : path = A GtkTreePath pointing to the previous location of the deleted row.
Method row_has_child_toggled ( path, A ) ---> {GtkTreeModel} Emits the "row-has-child-toggled" signal on tree_model. : path = A GtkTreePath pointing to the changed row, A = valid GtkTreeIter pointing to the changed row
Method row_inserted ( path, iter ) ---> {GtkTreeModel} Emits the "row-inserted" signal on tree_model : path = A GtkTreePath pointing to the inserted row, iter = A valid GtkTreeIter pointing to the inserted row
Method rows_reordered ( path, iter, new_order ) ---> {GtkTreeModel} Emits the "rows-reordered" signal on tree_model. : path = A GtkTreePath pointing to the tree node whose children have been reordered, iter = A valid GtkTreeIter pointing to the node whose children have been reordered, or NULL if the depth of path is 0., new_order = an array of integers mapping the current position of each child to its old position before the re-ordering, i.e. new_order[newpos] = oldpos.
Method signal_row_changed (  ) ---> {GtkTreeModel} This signal is emitted when a row in the model has changed.
Method signal_row_deleted (  ) ---> {GtkTreeModel} This signal is emitted when a row has been deleted.
Method signal_row_has_child_toggled (  ) ---> {GtkTreeModel} This signal is emitted when a row has gotten the first child row or lost its last child row.
Method signal_row_inserted (  ) ---> {GtkTreeModel} This signal is emitted when a new row has been inserted in the model.
Method signal_rows_reordered (  ) ---> {GtkTreeModel} This signal is emitted when the children of a node in the GtkTreeModel have been reordered.
Method clear_cache (  ) ---> {GtkTreeModelFilter} This function should almost never be called.
Method convert_child_iter_to_iter ( child_iter ) ---> {GtkTreeModelFilter} Returns: a valid GtkTreeIter pointing to a visible row in child model. | Returns an iterator pointing to the row in filter that corresponds to the row pointed at by child_iter. if child_iter is invalid, an ParamError is raised. : child_iter = A valid GtkTreeIter pointing to a row on the child model.
Method convert_child_path_to_path ( child_path ) ---> {GtkTreeModelFilter} Returns: A GtkTreePath, or NULL. | Converts child_path to a path relative to filter. : child_path = A GtkTreePath to convert.
Method convert_iter_to_child_iter ( filter_iter ) ---> {GtkTreeModelFilter} Returns: a GtkTreeIter. | Returns an iterator pointing to the row pointed to by filter_iter. : filter_iter = A valid GtkTreeIter pointing to a row on filter.
Method convert_path_to_child_path (  ) ---> {GtkTreeModelFilter} Converts filter_path to a path on the child model of filter.
Method get_model (  ) ---> {GtkTreeModelFilter} Returns: a GtkTreeModel. | Returns a pointer to the child model of filter.
Method refilter (  ) ---> {GtkTreeModelFilter} Emits ::row_changed for each row in the child model, which causes the filter to re-evaluate whether a row is visible or not.
Method set_visible_column ( column ) ---> {GtkTreeModelFilter} Sets column of the child_model to be the column where filter should look for visibility information. : column = An integer which is the column containing the visible information.
Method set_visible_func ( func, data ) ---> {GtkTreeModelFilter} Sets the visible function used when filtering the filter to be func. : func = A GtkTreeModelFilterVisibleFunc, the visible function., data = User data to pass to the visible function, or NULL.
Method clear_cache (  ) ---> {GtkTreeModelSort} This function should almost never be called.
Method convert_child_iter_to_iter ( child_iter ) ---> {GtkTreeModelSort} Returns: a valid GtkTreeIter to a visible row in the child model, or Nil | Returns an iterator pointing to the row in tree_model_sort that corresponds to the row pointed at by child_iter. : child_iter = A valid GtkTreeIter pointing to a row on the child model
Method convert_child_path_to_path ( child_path ) ---> {GtkTreeModelSort} Returns: A newly allocated GtkTreePath, or NULL | Converts child_path to a path relative to the tree-model-sort. : child_path = A GtkTreePath to convert
Method convert_iter_to_child_iter ( sorted_iter ) ---> {GtkTreeModelSort} Returns: a GtkTreeIter | Returns an iterator pointing to the row pointed to by sorted_iter. : sorted_iter = A valid GtkTreeIter pointing to a row on tree_model_sort.
Method convert_path_to_child_path ( sorted_path ) ---> {GtkTreeModelSort} Returns: A GtkTreePath, or NULL | Converts sorted_path to a path on the child model of tree_model_sort. : sorted_path = A GtkTreePath to convert
Method get_model (  ) ---> {GtkTreeModelSort} Returns: the "child model" being sorted (GtkTreeModel). | Returns the model the GtkTreeModelSort is sorting.
Method iter_is_valid ( iter ) ---> {GtkTreeModelSort} Returns: TRUE if the iter is valid, FALSE if the iter is invalid. | Checks if the given iter is a valid iter for this GtkTreeModelSort. : iter = A GtkTreeIter.
Method reset_default_sort_func (  ) ---> {GtkTreeModelSort} This resets the default sort function to be in the 'unsorted' state.
Method append_index ( index ) ---> {GtkTreePath} Appends a new index to a path. : index = The index.
Method compare ( b ) ---> {GtkTreePath} Returns: The relative positions of a and b | Compares two paths. : b = A GtkTreePath to compare with.
Method copy (  ) ---> {GtkTreePath} Returns: A new GtkTreePath. | Creates a new GtkTreePath as a copy of path.
Method down (  ) ---> {GtkTreePath} Moves path to point to the first child of the current path.
Method get_depth (  ) ---> {GtkTreePath} Returns: The depth of path | Returns the current depth of path.
Method get_indices (  ) ---> {GtkTreePath} Returns: An array of the current indices, or NULL. | Returns the current indices of path.
Method is_ancestor ( descendant ) ---> {GtkTreePath} Returns: TRUE if descendant is contained inside path | Returns TRUE if descendant is a descendant of path. : descendant = another GtkTreePath
Method is_descendant ( ancestor ) ---> {GtkTreePath} Returns: TRUE if ancestor contains path somewhere below it | Returns TRUE if path is a descendant of ancestor. : ancestor = another GtkTreePath
Method new_first (  ) ---> {GtkTreePath} Returns: a GtkTreePath | Creates a new GtkTreePath. The string representation of this path is "0"
Method new_from_string ( path ) ---> {GtkTreePath} Returns: A newly-created GtkTreePath, or NULL | Creates a new GtkTreePath initialized to path. : path = The string representation of a path.
Method next (  ) ---> {GtkTreePath} Moves the path to point to the next node at the current depth.
Method prepend_index ( index ) ---> {GtkTreePath} Prepends a new index to a path. : index = The index
Method prev (  ) ---> {GtkTreePath} Moves the path to point to the previous node at the current depth, if it exists.
Method to_string (  ) ---> {GtkTreePath} Returns: a string | Generates a string representation of the path.
Method up (  ) ---> {GtkTreePath} Returns: TRUE if path has a parent, and the move was made. | Moves the path to point to its parent node, if it has a parent.
Method copy (  ) ---> {GtkTreeRowReference} Returns: a copy of reference. | Copies a GtkTreeRowReference.
Method deleted ( proxy, path ) ---> {GtkTreeRowReference} Lets a set of row reference created by gtk_tree_row_reference_new_proxy() know that the model emitted the "row_deleted" signal. : proxy = A GObject, path = The path position that was deleted
Method get_model (  ) ---> {GtkTreeRowReference} Returns: the model | Returns the model that the row reference is monitoring.
Method get_path (  ) ---> {GtkTreeRowReference} Returns: A current path, or NULL. | Returns a path that the row reference currently points to, or NULL if the path pointed to is no longer valid.
Method inserted ( proxy, path ) ---> {GtkTreeRowReference} Lets a set of row reference created by gtk_tree_row_reference_new_proxy() know that the model emitted the "row_inserted" signal. : proxy = A GObject, path = The row position that was inserted
Method new_proxy ( proxy, model, path ) ---> {GtkTreeRowReference} Returns: A new GtkTreeRowReference | You do not need to use this function. Creates a row reference based on path. This reference will keep pointing to the node pointed to by path, so long as it exists. If path isn't a valid path in model, then NULL is returned. However, unlike references created with gtk_tree_row_reference_new(), it does not listen to the model for changes. The creator of the row reference must do this explicitly using gtk_tree_row_reference_inserted(), gtk_tree_row_reference_deleted(), gtk_tree_row_reference_reordered(). if the path is invalid, an ParamError is raised. : proxy = A proxy GObject, model = A GtkTreeModel, path = A valid GtkTreePath to monitor
Method reordered ( proxy, path, iter, new_order ) ---> {GtkTreeRowReference} Lets a set of row reference created by gtk_tree_row_reference_new_proxy() know that the model emitted the "rows_reordered" signal. : proxy = A GObject, path = The parent path of the reordered signal, iter = The iter pointing to the parent of the reordered, new_order = The new order of rows (array of integers)
Method valid (  ) ---> {GtkTreeRowReference} Returns: TRUE if reference points to a valid path. | Returns TRUE if the reference refers to a current valid path.
Method get_sort_column_id (  ) ---> {GtkTreeSortable} Returns: an array ( sort column id, GtkSortType ). | Returns the sort column id and order with the current sort column and the order.
Method has_default_sort_func (  ) ---> {GtkTreeSortable} Returns: TRUE, if the model has a default sort function | Returns TRUE if the model has a default sort function.
Method set_sort_column_id ( sort_column_id, order ) ---> {GtkTreeSortable} Sets the current sort column to be sort_column_id. : sort_column_id = the sort column id to set, order = The sort order of the column (GtkSortType)
Method signal_sort_column_changed (  ) ---> {GtkTreeSortable} The ::sort-column-changed signal is emitted when the sort column or sort order of sortable is changed.
Method sort_column_changed (  ) ---> {GtkTreeSortable} Emits a "sort-column-changed" signal on sortable.
Method append ( iter, parent ) ---> {GtkTreeStore} Appends a new row to tree_store. : iter = An unset GtkTreeIter to set to the appended row, parent = A valid GtkTreeIter, or NULL.
Method clear (  ) ---> {GtkTreeStore} Removes all rows from tree_store
Method insert ( iter, parent, position ) ---> {GtkTreeStore} Creates a new row at position. : iter = An unset GtkTreeIter to set to the new row, parent = A valid GtkTreeIter, or NULL., position = position to insert the new row
Method insert_after ( iter, parent, sibling ) ---> {GtkTreeStore} Inserts a new row after sibling. : iter = An unset GtkTreeIter to set to the new row, parent = A valid GtkTreeIter, or NULL., sibling = A valid GtkTreeIter, or NULL.
Method insert_before ( iter, parent, sibling ) ---> {GtkTreeStore} Inserts a new row before sibling. : iter = An unset GtkTreeIter to set to the new row, parent = A valid GtkTreeIter, or NULL., sibling = A valid GtkTreeIter, or NULL.
Method insert_with_values ( iter, parent, pos, values ) ---> {GtkTreeStore} Creates a new row at position. : iter = An unset GtkTreeIter to set to the new row, or NULL., parent = A valid GtkTreeIter, or NULL., pos = position to insert the new row, values = an array of pairs [ column index, column value, ... ]
Method is_ancestor ( iter, descendant ) ---> {GtkTreeStore} Returns: TRUE, if iter is an ancestor of descendant | Returns TRUE if iter is an ancestor of descendant. : iter = A valid GtkTreeIter, descendant = A valid GtkTreeIter
Method iter_depth ( iter ) ---> {GtkTreeStore} Returns: The depth of iter | Returns the depth of iter. : iter = A valid GtkTreeIter
Method iter_is_valid ( iter ) ---> {GtkTreeStore} Returns: TRUE if the iter is valid, FALSE if the iter is invalid. | Checks if the given iter is a valid iter for this GtkTreeStore. : iter = A GtkTreeIter.
Method move_after ( iter, position ) ---> {GtkTreeStore} Moves iter in tree_store to the position after position. : iter = A GtkTreeIter., position = A GtkTreeIter or NULL.
Method move_before ( iter, position ) ---> {GtkTreeStore} Moves iter in tree_store to the position before position. : iter = A GtkTreeIter., position = A GtkTreeIter or NULL.
Method prepend ( iter, parent ) ---> {GtkTreeStore} Prepends a new row to tree_store. : iter = An unset GtkTreeIter to set to the prepended row., parent = A valid GtkTreeIter, or NULL.
Method remove ( iter ) ---> {GtkTreeStore} Returns: TRUE if iter is still valid, FALSE if not. | Removes iter from tree_store. : iter = A valid GtkTreeIter
Method reorder ( parent, new_order ) ---> {GtkTreeStore} Reorders the children of parent in tree_store to follow the order indicated by new_order. : parent = A GtkTreeIter., new_order = an array of integers mapping the new position of each child to its old position before the re-ordering, i.e. new_order[newpos] = oldpos.
Method set ( iter, values ) ---> {GtkTreeStore} Sets the value of one or more cells in the row referenced by iter. : iter = row iterator (GtkTreeIter), values = an array of pairs [ column index, column value, ... ]
Method set_column_types ( types ) ---> {GtkTreeStore} Sets the column types. : types = an array of GType
Method set_value ( iter, column, value ) ---> {GtkTreeStore} Sets the data in the cell specified by iter and column. : iter = A valid GtkTreeIter for the row being modified, column = column number to modify, value = new value for the cell
Method swap ( a, b ) ---> {GtkTreeStore} Swaps a and b in the same level of tree_store. : a = A GtkTreeIter., b = Another GtkTreeIter.
Method append_column ( column ) ---> {GtkTreeView} Returns: The number of columns in tree_view after appending. | Appends column to the list of columns. : column = The GtkTreeViewColumn to add.
Method collapse_all (  ) ---> {GtkTreeView} Recursively collapses all visible, expanded nodes in tree_view.
Method collapse_row ( path ) ---> {GtkTreeView} Returns: TRUE if the row was collapsed. | Collapses a row (hides its child rows, if they exist). : path = path to a row in the tree_view.
Method columns_autosize (  ) ---> {GtkTreeView} Resizes all columns to their optimal width.
Method expand_all (  ) ---> {GtkTreeView} Recursively expands all nodes in the tree_view.
Method expand_row ( path, open_all ) ---> {GtkTreeView} Returns: TRUE if the row existed and had children | Opens the row so its children are visible. : path = GtkTreePath to a row, open_all = whether to recursively expand, or just expand immediate children
Method expand_to_path ( path ) ---> {GtkTreeView} Expands the row at path. : path = GtkTreePath to a row.
Method get_column ( n ) ---> {GtkTreeView} Returns: The GtkTreeViewColumn, or NULL if the position is outside the range of columns. | Gets the GtkTreeViewColumn at the given position in the tree_view. : n = The position of the column, counting from 0.
Method get_columns (  ) ---> {GtkTreeView} Returns: A list of GtkTreeViewColumn | Returns an array of all the GtkTreeViewColumn currently in tree_view.
Method get_cursor (  ) ---> {GtkTreeView} Returns: An array [ current cursor path, current focus column ] | Fills in path and focus_column with the current path and focus column.
Method get_expander_column (  ) ---> {GtkTreeView} Returns: The expander column. | Returns the column that is the current expander column.
Method get_hadjustment (  ) ---> {GtkTreeView} Returns: A GtkAdjustment object, or NULL if none is currently being used. | Gets the GtkAdjustment currently being used for the horizontal aspect.
Method get_headers_clickable (  ) ---> {GtkTreeView} Returns: TRUE if all header columns are clickable, otherwise FALSE | Returns whether all header columns are clickable.
Method get_headers_visible (  ) ---> {GtkTreeView} Returns: Whether the headers are visible or not. | Returns TRUE if the headers on the tree_view are visible.
Method get_level_indentation (  ) ---> {GtkTreeView} Returns: the amount of extra indentation for child levels in tree_view. A return value of 0 means that this feature is disabled. | Returns the amount, in pixels, of extra indentation for child levels in tree_view.
Method get_model (  ) ---> {GtkTreeView} Returns: A GtkTreeModel, or NULL if none is currently being used. | Returns the model the GtkTreeView is based on. Returns NULL if the model is unset.
Method get_rules_hint (  ) ---> {GtkTreeView} Returns: TRUE if rules are useful for the user of this tree | Gets the setting set by gtk_tree_view_set_rules_hint().
Method get_show_expanders (  ) ---> {GtkTreeView} Returns: TRUE if expanders are drawn in tree_view, FALSE otherwise. | Returns whether or not expanders are drawn in tree_view.
Method get_vadjustment (  ) ---> {GtkTreeView} Returns: A GtkAdjustment object, or NULL if none is currently being used. | Gets the GtkAdjustment currently being used for the vertical aspect.
Method insert_column ( column, position ) ---> {GtkTreeView} Returns: The number of columns in tree_view after insertion. | This inserts the column into the tree_view at position. : column = The GtkTreeViewColumn to be inserted., position = The position to insert column in.
Method insert_column_with_attributes ( position, title, cell, attributes ) ---> {GtkTreeView} Returns: The number of columns in tree_view after insertion. | Creates a new GtkTreeViewColumn and inserts it into the tree_view at position. : position = The position to insert the new column in., title = The title to set the header to., cell = The GtkCellRenderer., attributes = An array of pairs [ attribute, column, ... ]
Method insert_column_with_data_func ( position, title, cell, func, data ) ---> {GtkTreeView} Convenience function that inserts a new column into the GtkTreeView with the given cell renderer and a GtkCellDataFunc to set cell renderer attributes (normally using data from the model). : position = Position to insert, -1 for append, title = column title, cell = cell renderer for column, func = function to set attributes of cell renderer, or nil, data = data for func, or nil
Method move_column_after ( column, base_column ) ---> {GtkTreeView} Moves column to be after to base_column. : column = The GtkTreeViewColumn to be moved., base_column = The GtkTreeViewColumn to be moved relative to, or NULL.
Method new_with_model ( model ) ---> {GtkTreeView} Returns: A newly created GtkTreeView widget. | Creates a new GtkTreeView widget with the model initialized to model. : model = the GtkTreeModel
Method remove_column ( column ) ---> {GtkTreeView} Returns: The number of columns in tree_view after removing. | Removes column from tree_view. : column = The GtkTreeViewColumn to remove.
Method row_activated ( path, column ) ---> {GtkTreeView} Activates the cell determined by path and column. : path = The GtkTreePath to be activated., column = The GtkTreeViewColumn to be activated.
Method scroll_to_cell ( path, column, use_align, row_align, col_align ) ---> {GtkTreeView} Moves the alignments of tree_view to the position specified by column and path. : path = The GtkTreePath of the row to move to, or NULL., column = The GtkTreeViewColumn to move horizontally to, or NULL., use_align = whether to use alignment arguments, or FALSE., row_align = The vertical alignment (numeric) of the row specified by path., col_align = The horizontal alignment (numeric) of the column specified by column.
Method scroll_to_point ( tree_x, tree_y ) ---> {GtkTreeView} Scrolls the tree view such that the top-left corner of the visible area is tree_x, tree_y, where tree_x and tree_y are specified in tree coordinates. : tree_x = X coordinate of new top-left pixel of visible area, or -1, tree_y = Y coordinate of new top-left pixel of visible area, or -1
Method set_column_drag_function ( func, user_data ) ---> {GtkTreeView} Sets a user function for determining where a column may be dropped when dragged. : func = A function to determine which columns are reorderable, or NULL., user_data = User data to be passed to func, or NULL.
Method set_cursor ( path, focus_column, start_editing ) ---> {GtkTreeView} Sets the current keyboard focus to be at path, and selects it. : path = A GtkTreePath, focus_column = A GtkTreeViewColumn, or NULL., start_editing = TRUE if the specified cell should start being edited.
Method set_cursor_on_cell ( path, focus_column, focus_cell, start_editing ) ---> {GtkTreeView} Sets the current keyboard focus to be at path, and selects it. : path = A GtkTreePath, focus_column = A GtkTreeViewColumn, or NULL., focus_cell = A GtkCellRenderer, or NULL., start_editing = TRUE if the specified cell should start being edited.
Method set_expander_column ( column ) ---> {GtkTreeView} Sets the column to draw the expander arrow at. : column = NULL, or the GtkTreeViewColumn to draw the expander arrow at.
Method set_hadjustment ( adjustment ) ---> {GtkTreeView} Sets the GtkAdjustment for the current horizontal aspect. : adjustment = The GtkAdjustment to set, or NULL.
Method set_headers_clickable ( setting ) ---> {GtkTreeView} Allow the column title buttons to be clicked. : setting = TRUE if the columns are clickable.
Method set_headers_visible ( headers_visible ) ---> {GtkTreeView} Sets the visibility state of the headers. : headers_visible = TRUE if the headers are visible
Method set_level_indentation ( indentation ) ---> {GtkTreeView} Sets the amount of extra indentation for child levels to use in tree_view in addition to the default indentation. : indentation = the amount, in pixels, of extra indentation in tree_view.
Method set_model ( model ) ---> {GtkTreeView} Sets the model for a GtkTreeView. : model = The model, or Nil.
Method set_rules_hint ( setting ) ---> {GtkTreeView} This function tells GTK+ that the user interface for your application requires users to read across tree rows and associate cells with one another. : setting = TRUE if the tree requires reading across rows
Method set_show_expanders ( enabled ) ---> {GtkTreeView} Sets whether to draw and enable expanders and indent child rows in tree_view. : enabled = TRUE to enable expander drawing, FALSE otherwise.
Method set_vadjustment ( adjustment ) ---> {GtkTreeView} Sets the GtkAdjustment for the current vertical aspect. : adjustment = The GtkAdjustment to set, or NULL.
Method signal_columns_changed (  ) ---> {GtkTreeView} The number of columns of the treeview has changed.
Method signal_cursor_changed (  ) ---> {GtkTreeView} The position of the cursor (focused cell) has changed.
Method signal_expand_collapse_cursor_row (  ) ---> {GtkTreeView} The "expand-collapse-cursor-row" signal is emitted when the row at the cursor needs to be expanded or collapsed.
Method signal_move_cursor (  ) ---> {GtkTreeView} The "move-cursor" signal is emitted when the user moves the cursor using the Right, Left, Up or Down arrow keys or the Page Up, Page Down, Home and End keys.
Method signal_row_activated (  ) ---> {GtkTreeView} The "row-activated" signal is emitted when the method gtk_tree_view_row_activated() is called or the user double clicks a treeview row.
Method signal_row_collapsed (  ) ---> {GtkTreeView} The given row has been collapsed (child nodes are hidden).
Method signal_row_expanded (  ) ---> {GtkTreeView} The given row has been expanded (child nodes are shown).
Method signal_select_all (  ) ---> {GtkTreeView} The "select-all" signal is emitted when the user presses Control+a or Control+/.
Method signal_select_cursor_parent (  ) ---> {GtkTreeView} The "select-cursor-parent" signal is emitted when the user presses Backspace while a row has the cursor.
Method signal_select_cursor_row (  ) ---> {GtkTreeView} The "select-cursor-row" signal is emitted when a non-editable row is selected and one of the keys: Space, Shift+Space, Return or Enter is pressed.
Method signal_set_scroll_adjustments (  ) ---> {GtkTreeView} Set Set the scroll adjustments for the tree view.
Method signal_start_interactive_search (  ) ---> {GtkTreeView} The "start-interactive-search" signal is emitted when the user presses Control+f.
Method signal_test_collapse_row (  ) ---> {GtkTreeView} The given row is about to be collapsed (hide its children nodes).
Method signal_test_expand_row (  ) ---> {GtkTreeView} The given row is about to be expanded (show its children nodes).
Method signal_toggle_cursor_row (  ) ---> {GtkTreeView} The "toggle-cursor-row" signal is emitted when the user presses Control+Space.
Method signal_unselect_all (  ) ---> {GtkTreeView} The "unselect-all" signal is emitted when the user presses Shift+Control+a or Shift+Control+/.
Method add_attribute ( cell_renderer, attribute, column ) ---> {GtkTreeViewColumn} Adds an attribute mapping to the list in tree_column. : cell_renderer = the GtkCellRenderer to set attributes on, attribute = An attribute on the renderer, column = The column position on the model to get the attribute from.
Method cell_get_position ( cell ) ---> {GtkTreeViewColumn} Returns: an array [ horizontal position of cell within tree_column, width of cell ], or nil | Obtains the horizontal position and size of a cell in a column. : cell = a GtkCellRenderer
Method cell_get_size ( cell_area ) ---> {GtkTreeViewColumn} Returns: an array [ x offset, y offset of a cell relative to cell_area, width, height needed to render a cell ] | Obtains the width and height needed to render the column. : cell_area = The area (GdkRectangle) a cell in the column will be allocated, or NULL.
Method cell_is_visible (  ) ---> {GtkTreeViewColumn} Returns: TRUE, if any of the cells packed into the tree_column are currently visible | Returns TRUE if any of the cells packed into the tree_column are visible.
Method cell_set_cell_data ( tree_model, iter, is_expander, is_expanded ) ---> {GtkTreeViewColumn} Sets the cell renderer based on the tree_model and iter. : tree_model = The GtkTreeModel to to get the cell renderers attributes from., iter = The GtkTreeIter to to get the cell renderer's attributes from., is_expander = TRUE, if the row has children, is_expanded = TRUE, if the row has visible children
Method clear (  ) ---> {GtkTreeViewColumn} Unsets all the mappings on all renderers on the tree_column.
Method clear_attributes ( cell_renderer ) ---> {GtkTreeViewColumn} Clears all existing attributes previously set with gtk_tree_view_column_set_attributes(). : cell_renderer = a GtkCellRenderer to clear the attribute mapping on.
Method clicked (  ) ---> {GtkTreeViewColumn} Emits the "clicked" signal on the column.
Method focus_cell ( cell ) ---> {GtkTreeViewColumn} Sets the current keyboard focus to be at cell, if the column contains 2 or more editable and activatable cells. : cell = A GtkCellRenderer
Method get_alignment (  ) ---> {GtkTreeViewColumn} Returns the current x alignment of tree_column.
Method get_clickable (  ) ---> {GtkTreeViewColumn} Returns: TRUE if user can click the column header. | Returns TRUE if the user can click on the header for the column.
Method get_expand (  ) ---> {GtkTreeViewColumn} Returns: TRUE, if the column expands | Return TRUE if the column expands to take any available space.
Method get_fixed_width (  ) ---> {GtkTreeViewColumn} Gets the fixed width of the column.
Method get_max_width (  ) ---> {GtkTreeViewColumn} Returns: The maximum width of the tree_column. | Returns the maximum width in pixels of the tree_column, or -1 if no maximum width is set.
Method get_min_width (  ) ---> {GtkTreeViewColumn} Returns: The minimum width of the tree_column. | Returns the minimum width in pixels of the tree_column, or -1 if no minimum width is set.
Method get_reorderable (  ) ---> {GtkTreeViewColumn} Returns: TRUE if the tree_column can be reordered by the user. | Returns TRUE if the tree_column can be reordered by the user.
Method get_resizable (  ) ---> {GtkTreeViewColumn} Returns: TRUE, if the tree_column can be resized. | Returns TRUE if the tree_column can be resized by the end user.
Method get_sizing (  ) ---> {GtkTreeViewColumn} Returns: The type of tree_column (GtkTreeViewColumnSizing). | Returns the current type of tree_column.
Method get_sort_column_id (  ) ---> {GtkTreeViewColumn} Returns: the current sort_column_id for this column, or -1 if this column can't be used for sorting. | Gets the logical sort_column_id that the model sorts on when this column is selected for sorting.
Method get_sort_indicator (  ) ---> {GtkTreeViewColumn} Returns: whether the sort indicator arrow is displayed | Gets the value set by gtk_tree_view_column_set_sort_indicator().
Method get_sort_order (  ) ---> {GtkTreeViewColumn} Returns: the sort order the sort indicator is indicating (GtkSortType) | Gets the value set by gtk_tree_view_column_set_sort_order().
Method get_spacing (  ) ---> {GtkTreeViewColumn} Returns: the spacing of tree_column. | Returns the spacing of tree_column.
Method get_title (  ) ---> {GtkTreeViewColumn} Returns: the title of the column. | Returns the title of the widget.
Method get_tree_view (  ) ---> {GtkTreeViewColumn} Returns: The tree view wherein column has been inserted if any, NULL otherwise. | Returns the GtkTreeView wherein tree_column has been inserted.
Method get_visible (  ) ---> {GtkTreeViewColumn} Returns: whether the column is visible or not. If it is visible, then the tree will show the column. | Returns TRUE if tree_column is visible.
Method get_widget (  ) ---> {GtkTreeViewColumn} Returns: The GtkWidget in the column header, or NULL | Returns the GtkWidget in the button on the column header.
Method get_width (  ) ---> {GtkTreeViewColumn} Returns: The current width of tree_column. | Returns the current size of tree_column in pixels.
Method new_with_attributes ( title, cell, attributes ) ---> {GtkTreeViewColumn} Returns: a new GtkTreeViewColumn | Creates a new GtkTreeViewColumn with a number of default values. : title = The title to set the header to., cell = The GtkCellRenderer., attributes = An array of pairs [ attribute, column, ... ]
Method pack_end ( cell, expand ) ---> {GtkTreeViewColumn} Adds the cell to end of the column. : cell = The GtkCellRenderer., expand = TRUE if cell is to be given extra space allocated to tree_column.
Method pack_start ( cell, expand ) ---> {GtkTreeViewColumn} Packs the cell into the beginning of the column. : cell = The GtkCellRenderer., expand = TRUE if cell is to be given extra space allocated to tree_column.
Method queue_resize (  ) ---> {GtkTreeViewColumn} Flags the column, and the cell renderers added to this column, to have their sizes renegotiated.
Method set_alignment ( xalign ) ---> {GtkTreeViewColumn} Sets the alignment of the title or custom widget inside the column header. : xalign = The alignment, which is between [0.0 and 1.0] inclusive.
Method set_attributes ( cell_renderer, attributes ) ---> {GtkTreeViewColumn} Sets the attributes in the list as the attributes of tree_column. : cell_renderer = the GtkCellRenderer we're setting the attributes of, attributes = An array of pairs [ attribute, column, ... ]
Method set_cell_data_func ( cell_renderer, func, func_data ) ---> {GtkTreeViewColumn} Sets the GtkTreeViewColumnFunc to use for the column. : cell_renderer = A GtkCellRenderer, func = The GtkTreeViewColumnFunc to use, or nil., func_data = The user data for func, or nil.
Method set_clickable ( clickable ) ---> {GtkTreeViewColumn} Sets the header to be active if active is TRUE. : clickable = TRUE if the header is active.
Method set_expand ( expand ) ---> {GtkTreeViewColumn} Sets the column to take available extra space. : expand = TRUE if the column should take available extra space, FALSE if not
Method set_fixed_width ( fixed_width ) ---> {GtkTreeViewColumn} Sets the size of the column in pixels. : fixed_width = The size to set tree_column to. Must be greater than 0.
Method set_max_width ( max_width ) ---> {GtkTreeViewColumn} Sets the maximum width of the tree_column. : max_width = The maximum width of the column in pixels, or -1.
Method set_min_width ( min_width ) ---> {GtkTreeViewColumn} Sets the minimum width of the tree_column. : min_width = The minimum width of the column in pixels, or -1.
Method set_reorderable ( reorderable ) ---> {GtkTreeViewColumn} If reorderable is TRUE, then the column can be reordered by the end user dragging the header. : reorderable = TRUE, if the column can be reordered.
Method set_resizable ( resizeable ) ---> {GtkTreeViewColumn} If resizable is TRUE, then the user can explicitly resize the column by grabbing the outer edge of the column button. : resizeable = TRUE, if the column can be resized
Method set_sizing ( type ) ---> {GtkTreeViewColumn} Sets the growth behavior of tree_column to type. : type = The GtkTreeViewColumnSizing.
Method set_sort_column_id ( sort_column_id ) ---> {GtkTreeViewColumn} Sets the logical sort_column_id that this column sorts on when this column is selected for sorting. : sort_column_id = The sort_column_id of the model to sort on.
Method set_sort_indicator ( setting ) ---> {GtkTreeViewColumn} Call this function with a setting of TRUE to display an arrow in the header button indicating the column is sorted. : setting = TRUE to display an indicator that the column is sorted
Method set_sort_order ( order ) ---> {GtkTreeViewColumn} Changes the appearance of the sort indicator. : order = sort order that the sort indicator should indicate (GtkSortType)
Method set_spacing ( distance ) ---> {GtkTreeViewColumn} Sets the spacing field of tree_column, which is the number of pixels to place between cell renderers packed into it. : distance = between cell renderers in pixels.
Method set_title ( title ) ---> {GtkTreeViewColumn} Sets the title of the tree_column. : title = The title of the tree_column.
Method set_visible ( visible ) ---> {GtkTreeViewColumn} Sets the visibility of tree_column. : visible = TRUE if the tree_column is visible.
Method set_widget ( widget ) ---> {GtkTreeViewColumn} Sets the widget in the header to be widget. : widget = A child GtkWidget, or NULL.
Method signal_clicked (  ) ---> {GtkTreeViewColumn} ?
Method new_with_range ( min, max, step ) ---> {GtkVScale} Returns: a new GtkVScale | Creates a new vertical scale widget that lets the user input a number between min and max (including min and max) with the increment step. : min = minimum value, max = maximum value, step = step increment (tick size) used with keyboard shortcuts
Method activate (  ) ---> {GtkWidget} Returns: TRUE if the widget was activatable | For widgets that can be "activated" (buttons, menu items, etc.) this function activates them.
Method add_accelerator ( accel_signal, accel_group, accel_key, accel_mods, accel_flags ) ---> {GtkWidget} Installs an accelerator for this widget in accel_group that causes accel_signal to be emitted if the accelerator is activated. : accel_signal = widget signal to emit on accelerator activation, accel_group = accel group for this widget, added to its toplevel (GtkAccelGroup)., accel_key = GDK keyval of the accelerator., accel_mods = modifier key combination of the accelerator (GdkModifierType)., accel_flags = flag accelerators, e.g. GTK_ACCEL_VISIBLE (GtkAccelFlags).
Method add_events ( events ) ---> {GtkWidget} Adds the events in the bitfield events to the event mask for widget. : events = an event mask, see GdkEventMask
Method can_activate_accel ( signal_id ) ---> {GtkWidget} Returns: TRUE if the accelerator can be activated. | Determines whether an accelerator that activates the signal identified by signal_id can currently be activated. : signal_id = the ID of a signal installed on widget
Method class_path ( reverse ) ---> {GtkWidget} Returns: the class path | Same as gtk_widget_path(), but always uses the name of a widget's type, never uses a custom name set with gtk_widget_set_name(). : reverse = TRUE to get the path in reverse order
Method destroy (  ) ---> {GtkWidget} Destroys a widget.
Method ensure_style (  ) ---> {GtkWidget} Ensures that widget has a style (widget->style).
Method event ( event ) ---> {GtkWidget} Returns: return from the event signal emission (TRUE if the event was handled) | This function is used to emit the event signals on a widget (those signals should never be emitted without using this function to do so). : event = a GdkEvent
Method get_ancestor ( widget_type ) ---> {GtkWidget} Returns: the ancestor widget, or NULL if not found. | Gets the first ancestor of widget with type widget_type. : widget_type = ancestor type (GType)
Method get_child_requisition (  ) ---> {GtkWidget} This function is only for use in widget implementations.
Method get_colormap (  ) ---> {GtkWidget} Returns: the colormap used by widget (GdkColormap). | Gets the colormap that will be used to render widget.
Method get_composite_name (  ) ---> {GtkWidget} Returns: the composite name of widget, or NULL if widget is not a composite child. | Obtains the composite name of a widget.
Method get_default_colormap (  ) ---> {GtkWidget} Returns: default widget colormap. | Obtains the default colormap used to create widgets.
Method get_default_direction (  ) ---> {GtkWidget} Returns: the current default direction (GtkTextDirection). | Obtains the current default reading direction.
Method get_default_visual (  ) ---> {GtkWidget} Returns: visual of the default colormap. | Obtains the visual of the default colormap.
Method get_direction (  ) ---> {GtkWidget} Returns: the reading direction for the widget (GtkTextDirection). | Gets the reading direction for a particular widget.
Method get_events (  ) ---> {GtkWidget} Returns: event mask for widget (GdkEventMask) | Returns the event mask for the widget.
Method get_extension_events (  ) ---> {GtkWidget} Returns: extension events for widget (GdkExtensionMode). | Retrieves the extension events the widget will receive.
Method get_name (  ) ---> {GtkWidget} Returns: name of the widget. | Get the name of the widget.
Method get_parent_window (  ) ---> {GtkWidget} Returns: the parent window of widget (GdkWindow). | Gets widget's parent window.
Method get_pointer (  ) ---> {GtkWidget} Returns: An array [ x coordinate, y coordinate ] | Obtains the location of the mouse pointer in widget coordinates.
Method get_size_request (  ) ---> {GtkWidget} Returns: [ width, height ] | Get the size requested for the widget
Method get_toplevel (  ) ---> {GtkWidget} Returns: the topmost ancestor of widget, or widget itself if there's no ancestor. | This function returns the topmost widget in the container hierarchy widget is a part of.
Method get_visual (  ) ---> {GtkWidget} Returns: the GdkVisual for widget. | Gets the visual that will be used to render widget.
Method grab_default (  ) ---> {GtkWidget} Causes widget to become the default widget.
Method grab_focus (  ) ---> {GtkWidget} Causes widget to have the keyboard focus for the GtkWindow it's inside.
Method hide (  ) ---> {GtkWidget} Reverses the effects of show(), causing the widget to be hidden (invisible to the user).
Method hide_all (  ) ---> {GtkWidget} Recursively hides a widget and any child widgets.
Method hide_on_delete (  ) ---> {GtkWidget} Returns: always true | Utility function.
Method input_shape_combine_mask ( shape_mask, offset_x, offset_y ) ---> {GtkWidget} Sets an input shape for this widget's GDK window. : shape_mask = shape to be added, or NULL to remove an existing shape (GdkBitmap)., offset_x = X position of shape mask with respect to window, offset_y = Y position of shape mask with respect to window
Method intersect ( area ) ---> {GtkWidget} Returns: a GdkRectangle intersection of the widget and area, or nil if there was no intersection | Computes the intersection of a widget's area and area given as parameter. : area = a GdkRectangle
Method is_ancestor ( ancestor ) ---> {GtkWidget} Returns: TRUE if ancestor contains widget as a child, grandchild, great grandchild, etc. | Determines whether widget is somewhere inside ancestor, possibly with intermediate containers. : ancestor = another GtkWidget
Method is_focus (  ) ---> {GtkWidget} Returns: TRUE if the widget is the focus widget. | Determines if the widget is the focus widget within its toplevel.
Method map (  ) ---> {GtkWidget} This function is only for use in widget implementations.
Method modify_base ( state, the ) ---> {GtkWidget} Sets the base color for a widget in a particular state. : state = the state for which to set the base color (GtkStateType)., the = color to assign, or NULL to undo the effect of previous calls to of gtk_widget_modify_base().
Method modify_bg ( state, color ) ---> {GtkWidget} Sets the background color for a widget in a particular state. : state = the state for which to set the background color (GtkStateType)., color = the color to assign, or NULL to undo the effect of previous calls to of gtk_widget_modify_bg().
Method modify_fg ( state, color ) ---> {GtkWidget} Sets the foreground color for a widget in a particular state. : state = the state for which to set the foreground color (GtkStateType)., color = the color to assign, or NULL to undo the effect of previous calls to of gtk_widget_modify_fg()
Method modify_text ( state, color ) ---> {GtkWidget} Sets the text color for a widget in a particular state. : state = the state for which to set the text color (GtkStateType)., color = the color to assign, or NULL to undo the effect of previous calls to of gtk_widget_modify_text().
Method path ( reverse ) ---> {GtkWidget} Returns: the path | Obtains the full path to widget. : reverse = TRUE to get the path in reverse order
Method pop_colormap (  ) ---> {GtkWidget} Removes a colormap pushed with gtk_widget_push_colormap().
Method push_colormap ( cmap ) ---> {GtkWidget} Pushes cmap onto a global stack of colormaps; the topmost colormap on the stack will be used to create all widgets. : cmap = a GdkColormap
Method queue_draw (  ) ---> {GtkWidget} Equivalent to calling widget.queue_draw_area() for the entire area of a widget.
Method queue_resize (  ) ---> {GtkWidget} This function is only for use in widget implementations.
Method queue_resize_no_redraw (  ) ---> {GtkWidget} This function works like gtk_widget_queue_resize(), except that the widget is not invalidated.
Method realize (  ) ---> {GtkWidget} Creates the GDK (windowing system) resources associated with a widget.
Method reparent ( new_parent ) ---> {GtkWidget} Moves a widget from one container to another. : new_parent = a GtkContainer to move the widget into
Method reset_rc_styles (  ) ---> {GtkWidget} Reset the styles of widget and all descendents, so when they are looked up again, they get the correct values for the currently loaded RC file settings.
Method set_colormap ( colormap ) ---> {GtkWidget} Sets the colormap for the widget to the given value. : colormap = a GdkColormap
Method set_default_colormap ( colormap ) ---> {GtkWidget} Sets the default colormap to use when creating widgets. : colormap = a GdkColormap
Method set_default_direction ( dir ) ---> {GtkWidget} Sets the default reading direction for widgets where the direction has not been explicitly set by gtk_widget_set_direction(). : dir = the new default direction (GtkTextDirection). This cannot be GTK_TEXT_DIR_NONE.
Method set_direction ( dir ) ---> {GtkWidget} Sets the reading direction on a particular widget. : dir = the new direction (GtkTextDirection).
Method set_events ( an ) ---> {GtkWidget} Sets the event mask (see GdkEventMask) for a widget. : an = event mask, see GdkEventMask
Method set_extension_events ( mode ) ---> {GtkWidget} Sets the extension events mask to mode. : mode = bitfield of extension events to receive (GdkExtensionMode).
Method set_name ( name ) ---> {GtkWidget} Attribute a name to the widget. : name = name for the widget
Method set_parent ( parent ) ---> {GtkWidget} This function is useful only when implementing subclasses of GtkContainer. : parent = parent container
Method set_parent_window ( parent_window ) ---> {GtkWidget} Sets a non default parent window for widget. : parent_window = the new parent window (GdkWindow).
Method set_sensitive ( sensitive ) ---> {GtkWidget} Sets the sensitivity of a widget. : sensitive = TRUE to make the widget sensitive
Method set_size_request ( width, height ) ---> {GtkWidget} Sets the minimum size of a widget : width = (integer), height = (integer)
Method set_state ( state ) ---> {GtkWidget} This function is for use in widget implementations. : state = new state for widget (GtkStateType)
Method shape_combine_mask ( shape_mask, offset_x, offset_y ) ---> {GtkWidget} Sets a shape for this widget's GDK window. : shape_mask = shape to be added, or NULL to remove an existing shape (GdkBitmap)., offset_x = X position of shape mask with respect to window, offset_y = Y position of shape mask with respect to window
Method show (  ) ---> {GtkWidget} Flags a widget to be displayed.
Method show_all (  ) ---> {GtkWidget} Recursively shows a widget, and any child widgets (if the widget is a container).
Method show_now (  ) ---> {GtkWidget} Shows a widget.
Method signal_accel_closures_changed (  ) ---> {GtkWidget} Connect a VMSlot to the widget accel_closures_changed signal and return it
Method signal_button_press_event (  ) ---> {GtkWidget} Connect a VMSlot to the widget button_press_event signal and return it
Method signal_button_release_event (  ) ---> {GtkWidget} Connect a VMSlot to the widget button_release_event signal and return it
Method signal_can_activate_accel (  ) ---> {GtkWidget} Connect a VMSlot to the widget can_activate_accel signal and return it
Method signal_child_notify (  ) ---> {GtkWidget} Connect a VMSlot to the widget child_notify signal and return it
Method signal_composited_changed (  ) ---> {GtkWidget} Connect a VMSlot to the widget composited_changed signal and return it
Method signal_delete_event (  ) ---> {GtkWidget} Connect a VMSlot to the widget delete_event signal and return it
Method signal_destroy_event (  ) ---> {GtkWidget} Connect a VMSlot to the widget destroy signal and return it
Method signal_direction_changed (  ) ---> {GtkWidget} The ::direction-changed signal is emitted when the text direction of a widget changes.
Method signal_drag_begin (  ) ---> {GtkWidget} The ::drag-begin signal is emitted on the drag source when a drag is started.
Method signal_drag_data_delete (  ) ---> {GtkWidget} The ::drag-data-delete signal is emitted on the drag source when a drag with the action GDK_ACTION_MOVE is successfully completed.
Method signal_drag_drop (  ) ---> {GtkWidget} The ::drag-drop signal is emitted on the drop site when the user drops the data onto the widget.
Method signal_hide (  ) ---> {GtkWidget} Connect a VMSlot to the widget hide signal and return it
Method signal_show (  ) ---> {GtkWidget} Connect a VMSlot to the widget show signal and return it
Method signal_size_request (  ) ---> {GtkWidget} Connect a VMSlot to the widget size-request signal and return it
Method size_request (  ) ---> {GtkWidget} Returns: GtkRequisition object | Get the size requisition of the widget.
Method translate_coordinates ( dest_widget, src_x, src_y ) ---> {GtkWidget} Returns: An array [ X position, Y position ] relative to dest_widget, or nil if either widget was not realized, or there was no common ancestor. | Translate coordinates relative to src_widget's allocation to coordinates relative to dest_widget's allocations. : dest_widget = a GtkWidget, src_x = X position relative to src_widget, src_y = Y position relative to src_widget
Method unmap (  ) ---> {GtkWidget} This function is only for use in widget implementations.
Method unparent (  ) ---> {GtkWidget} This function is only for use in widget implementations.
Method unrealize (  ) ---> {GtkWidget} This function is only useful in widget implementations.
Method activate_default (  ) ---> {GtkWindow} Returns: (boolean) true if a widget got activated. | Activates the default widget for the window
Method activate_focus (  ) ---> {GtkWindow} Returns: (boolean) true if a widget got activated. | Activates the current focused widget within the window.
Method add_mnemonic ( keyval, target ) ---> {GtkWindow} Adds a mnemonic to this window. : keyval = the mnemonic character, target = the widget that gets activated by the mnemonic (GtkWidget)
Method begin_move_drag ( button, root_x, root_y, timestamp ) ---> {GtkWindow} Starts moving a window. : button = mouse button that initiated the drag (integer), root_x = X position where the user clicked to initiate the drag, in root window coordinates (integer), root_y = Y position where the user clicked to initiate the drag (integer), timestamp = timestamp from the click event that initiated the drag (integer)
Method begin_resize_drag ( edge, button, root_x, root_y, timestamp ) ---> {GtkWindow} Starts resizing a window. : edge = position of the resize control (integer, GdkWindowEdge), button = mouse button that initiated the drag (integer), root_x = X position where the user clicked to initiate the drag, in root window coordinates (integer), root_y = Y position where the user clicked to initiate the drag (integer), timestamp = timestamp from the click event that initiated the drag (integer)
Method deiconify (  ) ---> {GtkWindow} Asks to deiconify (i.e. unminimize) the specified window.
Method fullscreen (  ) ---> {GtkWindow} Asks to place window in the fullscreen state.
Method get_accept_focus (  ) ---> {GtkWindow} Returns: true if window should receive the input focus (boolean) | Gets the value set by set_accept_focus().
Method get_decorated (  ) ---> {GtkWindow} Returns: (boolean) true if the window has been set to have decorations | Returns whether the window has been set to have decorations such as a title bar via set_decorated().
Method get_default_icon_name (  ) ---> {GtkWindow} Returns: the fallback icon name for windows, or nil | Gets the window default icon name.
Method get_default_size (  ) ---> {GtkWindow} Returns: an array [ default width, default height ] | Gets the default size of the window.
Method get_default_widget (  ) ---> {GtkWindow} Returns: the default widget, or nil if there is none. | Returns the default widget for window.
Method get_deletable (  ) ---> {GtkWindow} Returns: (boolean) true if the window has been set to have a close button | Returns whether the window has been set to have a close button via set_deletable().
Method get_destroy_with_parent (  ) ---> {GtkWindow} Returns: (boolean) true if the window will be destroyed with its transient parent. | Returns whether the window will be destroyed with its transient parent.
Method get_focus (  ) ---> {GtkWindow} Returns: the currently focused widget, or nil if there is none. | Retrieves the current focused widget within the window.
Method get_focus_on_map (  ) ---> {GtkWindow} Returns: true if window should receive the input focus when mapped. (boolean) | Gets the value set by gtk_window_set_focus_on_map().
Method get_frame_dimensions (  ) ---> {GtkWindow} Returns: an array [ left, top, right, bottom ] | Retrieves the dimensions of the frame window for this toplevel.
Method get_gravity (  ) ---> {GtkWindow} Returns: (integer) | Gets the value set by set_gravity().
Method get_has_frame (  ) ---> {GtkWindow} Returns: (boolean) true if a frame has been added to the window via set_has_frame(). | Accessor for whether the window has a frame window exterior to window->window.
Method get_icon_name (  ) ---> {GtkWindow} Returns: the icon name or nil if the window has no themed icon | Returns the name of the themed icon for the window, see set_icon_name().
Method get_mnemonic_modifier (  ) ---> {GtkWindow} Returns: the modifier mask used to activate mnemonics on this window. (GdkModifierType) | Returns the mnemonic modifier for this window.
Method get_mnemonics_visible (  ) ---> {GtkWindow} Returns: TRUE if mnemonics are supposed to be visible in this window. | Gets the value of the "mnemonics-visible" property.
Method get_modal (  ) ---> {GtkWindow} Returns: (boolean) true if the window is set to be modal and establishes a grab when shown | Returns whether the window is modal.
Method get_opacity (  ) ---> {GtkWindow} Returns: the requested opacity for this window. (float) | Fetches the requested opacity for this window.
Method get_position (  ) ---> {GtkWindow} Returns: an array [ root_x, root_y ] | Gets the window position.
Method get_resizable (  ) ---> {GtkWindow} Returns: TRUE if the user can resize the window | Gets the value set by set_resizable().
Method get_role (  ) ---> {GtkWindow} Returns: the role of the window if set, or nil. | Returns the role of the window.
Method get_screen (  ) ---> {GtkWindow} Returns: a GdkScreen. | Returns the GdkScreen associated with window.
Method get_size (  ) ---> {GtkWindow} Returns: an array [ width, height ] | Obtains the current size of window.
Method get_skip_pager_hint (  ) ---> {GtkWindow} Returns: true if window shouldn't be in pager (boolean) | Gets the value set by set_skip_pager_hint().
Method get_skip_taskbar_hint (  ) ---> {GtkWindow} Returns: true if window shouldn't be in taskbar (boolean) | Gets the value set by set_skip_taskbar_hint()
Method get_title (  ) ---> {GtkWindow} Returns: the title of the window, or nil if none has been set explicitely. | Retrieves the title of the window.
Method get_transient_for (  ) ---> {GtkWindow} Returns: the transient parent for this window, or NULL if no transient parent has been set. | Fetches the transient parent for this window.
Method get_type_hint (  ) ---> {GtkWindow} Returns: the type hint for window. (GdkWindowTypeHint) | Gets the type hint for this window.
Method get_urgency_hint (  ) ---> {GtkWindow} Returns: true if window is urgent (boolean) | Gets the value set by set_urgency_hint()
Method get_window_type (  ) ---> {GtkWindow} Returns: the type of the window (GtkWindowType) | Gets the type of the window.
Method has_topelevel_focus (  ) ---> {GtkWindow} Returns: (boolean) | Returns whether the input focus is within this GtkWindow.
Method iconify (  ) ---> {GtkWindow} Asks to iconify (i.e. minimize) the specified window.
Method is_active (  ) ---> {GtkWindow} Returns: (boolean) true if the window part of the current active window. | Returns whether the window is part of the current active toplevel.
Method list_toplevels (  ) ---> {GtkWindow} Returns: An array of GtkWindow | Returns a list of all existing toplevel windows.
Method maximize (  ) ---> {GtkWindow} Asks to maximize window, so that it becomes full-screen.
Method mnemonic_activate ( keyval, modifier ) ---> {GtkWindow} Returns: true if the activation is done. | Activates the targets associated with the mnemonic. : keyval = the mnemonic character, modifier = the modifiers (GdkModifierType)
Method move ( x, y ) ---> {GtkWindow} Asks the window manager to move window to the given position. : x = X coordinate to move window to, y = Y coordinate to move window to
Method parse_geometry ( geometry ) ---> {GtkWindow} Returns: true if string was parsed successfully (boolean) | Parses a standard X Window System geometry string : geometry = geometry string
Method present (  ) ---> {GtkWindow} Presents a window to the user.
Method present_with_time ( timestamp ) ---> {GtkWindow} Presents a window to the user in response to a user interaction. : timestamp = the timestamp of the user interaction (typically a button or key press event) which triggered this call
Method remove_mnemonic ( keyval, target ) ---> {GtkWindow} Removes a mnemonic from this window. : keyval = the mnemonic character, target = the widget that gets activated by the mnemonic (GtkWidget)
Method reshow_initial_size (  ) ---> {GtkWindow} Hides window, then reshows it, resetting the default size and position of the window.
Method resize ( width, height ) ---> {GtkWindow} Resizes the window as if the user had done so, obeying geometry constraints. : width = width in pixels to resize the window to, height = height in pixels to resize the window to
Method set_accept_focus ( setting ) ---> {GtkWindow} Sets the window accept-focus hint. : setting = (boolean) True to let this window receive input focus
Method set_auto_startup_notification ( setting ) ---> {GtkWindow} Sets the window startup notification. : setting = true to automatically do startup notification (boolean)
Method set_decorated ( setting ) ---> {GtkWindow} Sets the window decorations. : setting = (boolean) true to decorate the window
Method set_default ( default_widget ) ---> {GtkWindow} Sets the default widget. : default_widget = widget to be the default, or NULL to unset the default widget for the toplevel.
Method set_default_icon_name ( name ) ---> {GtkWindow} Sets an icon to be used as fallback. : name = the name of the themed icon
Method set_default_size ( width, height ) ---> {GtkWindow} Sets the default size of a window. : width = width in pixels, or -1 to unset the default width, height = height in pixels, or -1 to unset the default height
Method set_deletable ( setting ) ---> {GtkWindow} Sets the window deletable. : setting = (boolean) true to decorate the window as deletable.
Method set_destroy_with_parent ( setting ) ---> {GtkWindow} Destroys the window along with its parent. : setting = whether to destroy window with its transient parent (boolean)
Method set_focus ( focus ) ---> {GtkWindow} Sets the focus on a widget. : focus = widget to be the new focus widget, or NULL to unset any focus widget for the toplevel window.
Method set_focus_on_map ( setting ) ---> {GtkWindow} Sets the window focus-on-map hint. : setting = (boolean) true to let this window receive input focus on map
Method set_frame_dimensions ( left, top, right, bottom ) ---> {GtkWindow} Sets the window frame dimensions. : left = The width of the left border (integer), top = The height of the top border (integer), right = The width of the right border (integer), bottom = The height of the bottom border (integer)
Method set_geometry_hints ( geometry_widget, geometry, geom_mask ) ---> {GtkWindow} This function sets up hints about how a window can be resized by the user. : geometry_widget = widget the geometry hints will be applied to or NULL., geometry = GdkGeometry containing geometry information or NULL., geom_mask = mask (GdkWindowHints) indicating which struct fields should be paid attention to
Method set_gravity ( gravity ) ---> {GtkWindow} Sets window gravity. : gravity = a valid GdkGravity value
Method set_has_frame ( setting ) ---> {GtkWindow} Sets the window frame. : setting = (boolean)
Method set_icon_name ( the ) ---> {GtkWindow} Sets the icon for the window from a named themed icon. : the = name of the themed icon (or nil)
Method set_keep_above ( setting ) ---> {GtkWindow} Asks to keep window above, so that it stays on top. : setting = whether to keep window above other windows (boolean)
Method set_keep_below ( setting ) ---> {GtkWindow} Asks to keep window below, so that it stays in bottom. : setting = whether to keep window below other windows (boolean)
Method set_mnemonic_modifier ( modifier ) ---> {GtkWindow} Sets the mnemonic modifier for this window. : modifier = the modifier mask used to activate mnemonics on this window. (GdkModifierType)
Method set_mnemonics_visible ( visible ) ---> {GtkWindow} Sets the "mnemonics-visible" property. : visible = TRUE to set mnemonics visible
Method set_modal (  ) ---> {GtkWindow} Sets a window modal or non-modal.
Method set_opacity ( opacity ) ---> {GtkWindow} Sets the window opacity. : opacity = desired opacity, between 0 and 1 (float)
Method set_position ( position ) ---> {GtkWindow} Sets a position constraint for this window. : position = a position constraint. (GtkWindowPosition)
Method set_resizable ( resizable ) ---> {GtkWindow} Sets whether the user can resize a window. : resizable = true if the user can resize this window
Method set_role ( role ) ---> {GtkWindow} Sets the window role. : role = unique identifier for the window to be used when restoring a session (string)
Method set_screen ( screen ) ---> {GtkWindow} Sets the GdkScreen where the window is displayed. : screen = a GdkScreen.
Method set_skip_pager_hint ( setting ) ---> {GtkWindow} Sets the window pager hint. : setting = (boolean) true to keep this window from appearing in the pager
Method set_skip_taskbar_hint ( setting ) ---> {GtkWindow} Sets the window taskbar hint. : setting = (boolean) true to keep this window from appearing in the task bar
Method set_startup_id ( startup_id ) ---> {GtkWindow} Sets the window startup identifier. : startup_id = a string with startup-notification identifier
Method set_title ( title ) ---> {GtkWindow} Sets the title of the GtkWindow. : title = title of the window
Method set_transient_for ( parent ) ---> {GtkWindow} Sets the window transient for a parent window. : parent = parent window, or NULL.
Method set_type_hint ( hint ) ---> {GtkWindow} Sets the window type hint. : hint = the window type (GdkWindowTypeHint)
Method set_urgency_hint ( setting ) ---> {GtkWindow} Sets the window urgency hint. : setting = (boolean) true to mark this window as urgent
Method set_wmclass ( wmclass_name, wmclass_class ) ---> {GtkWindow} Don't use this function. : wmclass_name = window name hint, wmclass_class = window class hint
Method signal_activate_default (  ) ---> {GtkWindow} The ::activate-default signal is a keybinding signal which gets emitted when the user activates the default widget of window.
Method signal_activate_focus (  ) ---> {GtkWindow} The activate-focus signal is a keybinding signal which gets emitted when the user activates the currently focused widget of window.
Method signal_frame_event (  ) ---> {GtkWindow} .
Method signal_keys_changed (  ) ---> {GtkWindow} The keys-changed signal gets emitted when the set of accelerators or mnemonics that are associated with window changes.
Method signal_set_focus (  ) ---> {GtkWindow} .
Method stick (  ) ---> {GtkWindow} Asks to stick window, which means that it will appear on all user desktops.
Method unfullscreen (  ) ---> {GtkWindow} Asks to toggle off the fullscreen state for window.
Method unmaximize (  ) ---> {GtkWindow} Asks to unmaximize window.
Method unstick (  ) ---> {GtkWindow} Asks to unstick window, which means that it will appear on only one of the user's desktops.
Method add_window ( window ) ---> {GtkWindowGroup} Adds a window to a GtkWindowGroup. : window = the GtkWindow to add.
Method list_windows (  ) ---> {GtkWindowGroup} Returns: an array of GtkWindow. | Returns a list of the GtkWindows that belong to window_group.
Method remove_window ( window ) ---> {GtkWindowGroup} Removes a window from a GtkWindowGroup. : window = the GtkWindow to remove.
Method aquery ( sql, params ) ---> {Handle} Returns: an instance of @a Recordset, or nil. | Execute a SQL query bound to return a recordset. if the database engine reports an error., an DBIError is raised. : sql = The SQL query, params = Values to be passed to the query in an array.
Method begin (  ) ---> {Handle} Issues a "begin work", "start transaction" or other appropriate command. in case of error in starting the transaction., an DBIError is raised.
Method cleanup (  ) ---> {Handle} Close a connection and destroys all associated data.
Method commit (  ) ---> {Handle} Issues a "commit work" command. in case of error in starting the transaction., an DBIError is raised.
Method exec (  ) ---> {Handle} Returns: self (to put this call in a chain) | Transfers data from the remote. on error, an CurlError is raised.
Method expand ( sql, Parameters for the query ) ---> {Handle} Returns: A string containing a complete SQL statement. | Expands a sql query with provided parameters. in case the expansion fails., an DBIError is raised. : sql = The SQL query, Parameters for the query = 
Method getData (  ) ---> {Handle} Returns: A string containing data that has been transfered. | Gets data temporarily stored in a string during a transfer.
Method getInfo ( option ) ---> {Handle} Returns: The value associated with the required information, or | Returns informations about the status of this handle. : option = The specific information to be read.
Method getLastID ( A sequence name that is known by the engine. ) ---> {Handle} Returns: The value of the last single-field numeric key inserted in this transaction. | Get the ID of the last record inserted. : A sequence name that is known by the engine. = 
Method lselect ( sql, The first row to be returned (0 based)., The number of rows to be returned. ) ---> {Handle} Returns: A fully configured sql command that can be fed into @a Handle.query | Returns a "select" query configured to access a sub-recordset. : sql = The query (excluded the "select" command)., The first row to be returned (0 based). = , The number of rows to be returned. = 
Method options ( options ) ---> {Handle} Sets the default options for SQL operations performed on this handle. if the options are invalid., an DBIError is raised. : options = The string containing the transaction options.
Method postData ( data ) ---> {Handle} Sets data to be sent in one unique POST request. : data = A string to be sent as post data.
Method prepare ( sql ) ---> {Handle} Prepares a repeated statement. if the database engine reports an error., an DBIError is raised. : sql = The SQL query
Method query ( sql, Parameters for the query ) ---> {Handle} Returns: an instance of @a Recordset, or nil. | Execute a SQL query bound to return a recordset. if the database engine reports an error., an DBIError is raised. : sql = The SQL query, Parameters for the query = 
Method rollback (  ) ---> {Handle} Issues a "rollback work" command. in case of error in starting the transaction., an DBIError is raised.
Method setInCallback ( cb ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent uploads to be handled to a given callback. : cb = A callback item that will write data in an incoming MemBuf
Method setInStream ( stream ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent upload(s) to read data from the given stream. : stream = The stream to be used.
Method setOption ( option, data ) ---> {Handle} Returns: self (to put this call in a chain) | Sets a cURL option for this specific handle. : option = The option to be set (an enumeration)., data = The value to be set.
Method setOptions ( opts ) ---> {Handle} Returns: self (to put this call in a chain) | Sets a list of cURL option for this specific handle. : opts = A dictionary of options, where each key is an option number, and its value is the option value.
Method setOutCallback ( cb ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent transfer(s) to be handled to a given callback. : cb = A callback item that will receive incoming data as a binary string.
Method setOutConsole (  ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent transfer(s) to be sent to process console (raw stdout).
Method setOutStream ( stream ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent transfer(s) to be stored in a given stream. : stream = The stream to be used.
Method setOutString (  ) ---> {Handle} Returns: self (to put this call in a chain) | Asks for subsequent transfer(s) to be stored in a temporary string.
Method bits (  ) ---> {HashBase} Returns: The amount of @b bits of the hash result. | Returns the bit length of the hash result.
Method bytes (  ) ---> {HashBase} Returns: The amount of @b bytes of the hash result. | Returns the byte length of the hash result.
Method isFinalized (  ) ---> {HashBase} Returns: true if the hash is finalized, false if not. | Checks if a hash is finalized.
Method reset (  ) ---> {HashBase} Clears the hash state
Method toInt (  ) ---> {HashBase} Returns: The checksum result, as an Integer. | Returns the result as an Integer value.
Method toMemBuf (  ) ---> {HashBase} Returns: The hash result, in a 1-byte wide MemBuf. | Returns the hash result in a MemBuf.
Method toString (  ) ---> {HashBase} Returns: The hash result, as a lowercased hexadecimal string. | Returns the hash result as a hexadecimal string.
Method update (  ) ---> {HashBase} Returns: The object itself. | Feeds data into the hash function. in case of a stack overflow. This can happen with self- or circular references inside objects., an GenericError is raised.
Method updateInt ( num, bytes ) ---> {HashBase} Returns: The object itself. | Hashes an integer of a specified byte length. if the hash is already finalized., an AccessError is raised. : num = The integer value to hash., bytes = The amount of bytes to take.
Method compileAll ( code ) ---> {ICompiler} Returns: One of the enumeration values in @a ICompiler return values. | Compiles entierely the given input. (any kind of error) on runtime error., an Error is raised. : code = A string containing a complete program (even small).
Method compileNext ( code ) ---> {ICompiler} Returns: One of the enumeration values in @a ICompiler return values. | Compiles and executes at most one complete statement or declaration. (any kind of error) on runtime error., an Error is raised. : code = A string or a @a Stream containing at least a complete line of code.
Method GetError (  ) ---> {IMAGE} Returns: Returns a string containing a humam readble version or the reason for the last error that occured | Gets image related error
Method isBMP ( file ) ---> {IMAGE} Returns: True if the stream is stroing a BMP image. | Checks if an image is in BMP format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isGIF ( file ) ---> {IMAGE} Returns: True if the stream is stroing a GIF image. | Checks if an image is in GIF format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isJPG ( file ) ---> {IMAGE} Returns: True if the stream is stroing a JPG image. | Checks if an image is in JPG format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isLBM ( file ) ---> {IMAGE} Returns: True if the stream is stroing a LBM image. | Checks if an image is in LBM format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isPCX ( file ) ---> {IMAGE} Returns: True if the stream is stroing a PCX image. | Checks if an image is in PCX format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isPNG ( file ) ---> {IMAGE} Returns: True if the stream is stroing a PCX image. | Checks if an image is in PCX format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isPNM ( file ) ---> {IMAGE} Returns: True if the stream is stroing a PNM image. | Checks if an image is in PNM format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isTIF ( file ) ---> {IMAGE} Returns: True if the stream is stroing a TIF image. | Checks if an image is in TIF format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isXCF ( file ) ---> {IMAGE} Returns: True if the stream is stroing a XCF image. | Checks if an image is in XCF format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method isXPM ( file ) ---> {IMAGE} Returns: True if the stream is stroing a XPM image. | Checks if an image is in XPM format. : file = a Falcon Stream instance pointing at the beginning of the image data.
Method Load ( file, A string representing the type of image in the @b file stream. ) ---> {IMAGE} Returns: A new instance of @a SDLSurface. | Loads an image file based on filename extension if the file could not be interpreted as an image., an SDLError is raised. : file = The name of the file to be loaded, or a Falcon Stream, A string representing the type of image in the @b file stream. = 
Method SetError (  ) ---> {IMAGE} Returns: Returns a string containing a humam readble version or the reason for the last error that occured | Sets image related error string
Method downto ( llimit, sequence ) ---> {Integer} Returns: The last index processed. | Repeats a function or a sequence until the lower limit is reached. : llimit = The lower limit of the loop., sequence = The sequence or function to be repeated.
Method ptr (  ) ---> {Integer} Returns: The value in this integer. | Returns the value itself.
Method times ( sequence ) ---> {Integer} Returns: Last index processed. | repeats a sequence a given number of times. : sequence = Function or sequence to be repeated.
Method upto ( llimit, sequence ) ---> {Integer} Returns: The last index processed. | Repeats a function or a sequence until the upper limit is reached. : llimit = The upper limit of the loop., sequence = The sequence or function to be repeated.
Method clone (  ) ---> {Iterator} Returns: A new copy of this iterator. | Returns an instance of this iterator pointing to the same item.
Method equal ( item ) ---> {Iterator} Returns: True if the item matches this iterator. | Check if this iterator is equal to the provided item. : item = The item to which this iterator must be compared.
Method erase (  ) ---> {Iterator} Erase current item in the underlying sequence. if the iterator is invalid., an AccessError is raised.
Method find ( key ) ---> {Iterator} Returns: true if the key was found, false otheriwse. | Moves this iterator on the searched item. if the iterator is invalid or if the sequence doesn't provide keys., an AccessError is raised. : key = the key to be searched.
Method hasCurrent (  ) ---> {Iterator} Returns: true if the iterator is valid and can be used to | Check if the iterator is valid and can be used to
Method hasNext (  ) ---> {Iterator} Returns: true if there is an item past to the current one. | Check if the iterator is valid and a @a Iterator.next operation would
Method hasPrev (  ) ---> {Iterator} Returns: true if there is an item before to the current one. | Check if the iterator is valid and a @a Iterator.prev operation would
Method insert ( key, A value associated with the key. ) ---> {Iterator} Insert an item, or a pair of key values, in an underlying sequence. if the iterator is invalid., an AccessError is raised. : key = Item to be inserted (or key, if the underlying sequence is keyed)., A value associated with the key. = 
Method key (  ) ---> {Iterator} Returns: The current key. | Retreives the current key in the collection. if the iterator is not valid, or if the collection has not keys., an AccessError is raised.
Method next (  ) ---> {Iterator} Returns: true if the iterator is still valid after next() has been completed. | Advance the iterator.
Method prev (  ) ---> {Iterator} Returns: true if the iterator is still valid after prev() has been completed. | Move the iterator back.
Method value ( New value for the current item. ) ---> {Iterator} Returns: The current item. | Retreives the current item in the collection. if the iterator is not valid., an AccessError is raised. : New value for the current item. = 
Method bound (  ) ---> {LateBinding} Returns: True if this late binding has a bound value. | Checks if the late binding is bound.
Method symbol (  ) ---> {LateBinding} Returns: The symbol name | Returns the symbol name associated with a late binding.
Method value (  ) ---> {LateBinding} Returns: A value or nil if no value is associated. | Returns the value associated with a late binding.
Method len (  ) ---> {List} Returns: Count of items in the Sequence. | Returns the number of items stored in the Sequence.
Method pop (  ) ---> {List} Returns: The last item in the list. | Removes the last item from the list (and returns it). if the list is empty., an AccessError is raised.
Method popFront (  ) ---> {List} Returns: The first item in the list. | Removes the first item from the list (and returns it). if the list is empty., an AccessError is raised.
Method push ( item ) ---> {List} Appends given item to the end of the list. : item = The item to be pushed.
Method pushFront ( item ) ---> {List} Pushes an item in front of the list. : item = The item to be pushed.
Method add ( channel ) ---> {LogArea} Adds a channel to this log area. : channel = The channel to be added.
Method log ( level, message, A numeric code representing an application specific message ID. ) ---> {LogArea} Sends a log entry to all the registred channels. : level = The level of the log entry., message = The message to be logged., A numeric code representing an application specific message ID. = 
Method minlog (  ) ---> {LogArea} Returns: A number representing a log severity, or -1 | Determines what is the minimum log severity active on this area.
Method remove ( channel ) ---> {LogArea} Removes a channel from this log area. : channel = The channel to be removed.
Method format ( the new format to set (a string). ) ---> {LogChannel} Returns: The current log message format (a string). | Gets or set the log message formatting setting. : the new format to set (a string). = 
Method level ( a new log level to be set. ) ---> {LogChannel} Returns: The current log level. | Gets or set the log level. : a new log level to be set. = 
Method open (  ) ---> {LogChannelFiles} Opens the stream to the given main log file. if the file can't be opened., an IoError is raised.
Method reset (  ) ---> {LogChannelFiles} Clears the current log file. if the truncate operation files., an IoError is raised.
Method rotate (  ) ---> {LogChannelFiles} Rotates the current log file.
Method flushAll ( True to have the stream flushed at each write. ) ---> {LogChannelStream} Returns: The current status setting. | Reads or set the flush all mode. : True to have the stream flushed at each write. = 
Method back (  ) ---> {MemoryBuffer} Returns: A number representing the last element in this buffer. | Returns the last element in this memory buffer. if this buffer is empty., an AccessError is raised.
Method clear (  ) ---> {MemoryBuffer} Returns: The buffer itself. | Clears the buffer resetting it to initial status.
Method compact (  ) ---> {MemoryBuffer} Returns: The buffer itself | Discards processed data and prepares to a new read.
Method fill ( value ) ---> {MemoryBuffer} Returns: This memory buffer. | Fills all the elements in the memory buffer with a given value. : value = The value to be applied to the memory buffer.
Method first (  ) ---> {MemoryBuffer} Returns: An iterator. | Returns an iterator to the first element of this buffer.
Method flip (  ) ---> {MemoryBuffer} Returns: The buffer itself | Sets the limit to the current position, and the position to zero.
Method front (  ) ---> {MemoryBuffer} Returns: A number representing the first element in this buffer. | Returns the first element in this memory buffer. if this buffer is empty., an AccessError is raised.
Method get (  ) ---> {MemoryBuffer} Returns: the retreived value. | Gets a value in the memory buffer. if the buffer is full (limit() == position()), an AccessError is raised.
Method last (  ) ---> {MemoryBuffer} Returns: An iterator. | Returns an iterator to the last element of this buffer.
Method limit ( The value to be applied to the memory buffer. ) ---> {MemoryBuffer} Returns: current limit. | Gets or sets current filled data size. : The value to be applied to the memory buffer. = 
Method mark (  ) ---> {MemoryBuffer} Returns: The buffer itself | Places the mark at current position.
Method position ( The new position ) ---> {MemoryBuffer} Returns: The buffer itself or the requested position. | Sets or get the current position in the buffer. if the @b pos parameter is > limit., an AccessError is raised. : The new position = 
Method ptr (  ) ---> {MemoryBuffer} Returns: A memory pointer. | Returns the pointer to the raw memory stored in this memory buffer.
Method put (  ) ---> {MemoryBuffer} Returns: The buffer itself. | Puts a value in the memory buffer. if the buffer is full (limit() == position()), an AccessError is raised.
Method remaining (  ) ---> {MemoryBuffer} Returns: Count of remanining items. | Determines how many items can be read.
Method reset (  ) ---> {MemoryBuffer} Returns: The buffer itself | Returns the position to the last mark. if the mark is not defined., an AccessError is raised.
Method rewind (  ) ---> {MemoryBuffer} Returns: The buffer itself | Rewinds the buffer and discards the mark.
Method wordSize (  ) ---> {MemoryBuffer} Returns: Size of each memory buffer entity in bytes. | Returns the number of bytes used to store each entry of this Memory Buffer.
Method attributes (  ) ---> {Method} Returns: Nil if the function has no attributes, or a string-indexed dictionary. | Returns the attributes associated with the method function.
Method base (  ) ---> {Method} Returns: The function or array that is applied on the associated object. | Returns the function or the array associated with this method.
Method source (  ) ---> {Method} Returns: The object from which this method was created. | Returns the object associated with this method.
Method AllocateChannels ( Number the number of channels to be set, or nil to get current channel count. ) ---> {MIX} Returns: Current channel count (before eventually changing it). | Sets or read the number of mixing channels. : Number the number of channels to be set, or nil to get current channel count. = 
Method ChannelFinished ( active ) ---> {MIX} Requests onChannelFinished callbacks to be called when a channel finishes playing. : active = Set to true to generate messages, false to prevent it.
Method CloseAudio (  ) ---> {MIX} Turn off the MIX module.
Method Compiled_Version (  ) ---> {MIX} Returns: a three element array containing the major, minor and fix versions. | Determine the version used to compile this SDL mixer module.
Method ExpireChannel ( channel, time ) ---> {MIX} Returns: Number of channels scheduled for stopping. | Requests to the playback on a channel after some time. : channel = The channel to be stopped (-1 for all)., time = Number of seconds and fractions after which the timeout expires.
Method FadeOutChannel ( channel, time ) ---> {MIX} Returns: Number of channel fading out. | Requests to the playback on a channel after some, fading out in the meanwhile. : channel = The channel to be faded (-1 for all)., time = Number of seconds and fractions after which the timeout expires.
Method FadeOutMusic ( fadeOut ) ---> {MIX} Fades out the music channel. : fadeOut = Duration of the fadeout time in seconds and fractions.
Method FadingChannel ( channel ) ---> {MIX} Returns: One of the MIX.FADING_IN, MIX.FADING_OUT or MIX.NO_FADING values | Returns the number of channels currently fading out. : channel = Channel ID that is to be queried (-1 for all).
Method GetSynchroValue (  ) ---> {MIX} Returns: Current Synchro value. | Returns Syncro value for MICMOD library (Mod, STM, IT, etc.).
Method HaltChannel ( channel ) ---> {MIX} Stops the playback on channel. : channel = The channel to be stopped (-1 for all).
Method HaltMusic (  ) ---> {MIX} Immediately halts the music.
Method HookMusicFinished ( active ) ---> {MIX} Requests onMusicFinished callbacks to be called when the music finishes playing. : active = Set to true to generate messages, false to prevent it.
Method Linked_Version (  ) ---> {MIX} Returns: a three element array containing the major, minor and fix versions. | Determine the version of the library that is currently linked.
Method LoadMUS ( file ) ---> {MIX} Returns: On success, an instance of @a MixMusic class. | Loads a music file. if the system was not initialized or on load error., an SDLError is raised. : file = A file name or a stream to be loaded.
Method LoadWAV ( file ) ---> {MIX} Returns: On success, an instance of @a MixChunk class. | Loads an audio file. if the system was not initialized or on load error., an SDLError is raised. : file = A file name or a stream to be loaded.
Method OpenAudio ( frequency, format, channels, chunksize ) ---> {MIX} Initialize the MIX module. on initialization failure., an SDLError is raised. : frequency = Output sampling frequency in samples per second (Hz)., format = Output sample format; it's one of the @a AUDIO enums., channels = Number of sound channels in output. Set to 2 for stereo, 1 for mono., chunksize = Bytes used per output sample.
Method Pause ( channel ) ---> {MIX} Pauses a channel. : channel = The channel to be paused (-1 for all).
Method Paused ( Channel ID that is to be queried (-1 for all). ) ---> {MIX} Returns: 1 if the desired channel is paused, or the number of paused | Returns the number of paused channels. : Channel ID that is to be queried (-1 for all). = 
Method PausedMusic (  ) ---> {MIX} Returns: True if the music is paused. | Determines if the music is currently playing but paused.
Method PauseMusic (  ) ---> {MIX} Pause the music.
Method Playing ( Channel ID that is to be queried (-1 for all). ) ---> {MIX} Returns: 1 if the desired channel is playing, or the number of playing | Returns the number of playing channels. : Channel ID that is to be queried (-1 for all). = 
Method PlayingMusic (  ) ---> {MIX} Returns: True if it's playing, false otherwhise. | Checks if the music is playing or not.
Method QuerySpec (  ) ---> {MIX} Returns: A vector with three numeric values representing the | Queries the settings that have been used to open the SDL mixer system. if the system was not initialized., an SDLError is raised.
Method Resume ( channel ) ---> {MIX} Resumes a paused a channel. : channel = The channel to be resumed (-1 for all).
Method ResumeMusic (  ) ---> {MIX} Resumes a paused music.
Method RewindMusic (  ) ---> {MIX} Reposition music stream at the start of the currently played music.
Method SetMusicCMD (  ) ---> {MIX} Sets the command used to load some kind of music. In case of problems in finding the given command., an SDLError is raised.
Method SetMusicPosition ( position ) ---> {MIX} Changes the position in the music stream. if the function is not implemented, an SDLError is raised. : position = The relative position (0 to 1).
Method SetSynchroValue ( value ) ---> {MIX} Changes the Synchro value for MICMOD library (Mod, STM, IT, etc.). : value = New synchro value.
Method Volume ( channel, The new volume to be set (pass nothing, nil or < 0 to read). ) ---> {MIX} Returns: Current volume level (prior to setting). | Sets or read current volume setting for given channel. : channel = Target channel ID, The new volume to be set (pass nothing, nil or < 0 to read). = 
Method VolumeMusic ( The new volume setting. ) ---> {MIX} Returns: Previous volume value. | Sets or read the global music volume. : The new volume setting. = 
Method Play ( channel, Numbers of repetitions; 1 means repeat once, -1 repeat forever., Seconds and fractions during which music will play., Seconds and fractions for the fade-in effect. ) ---> {MixChunk} Returns: The channel on which the sound is played. | Play a sound on a given channel on playback error., an SDLError is raised. : channel = Target channel ID (-1 to select the first available channel)., Numbers of repetitions; 1 means repeat once, -1 repeat forever. = , Seconds and fractions during which music will play. = , Seconds and fractions for the fade-in effect. = 
Method Volume ( Volume level between 0 and MIX.MAX_VOLUME (128). ) ---> {MixChunk} Returns: Previous setting for volume. | Sets the mixing volume for a loaded chunk. : Volume level between 0 and MIX.MAX_VOLUME (128). = 
Method GetType (  ) ---> {MixMusic} Returns: One of the @a MUS enum items. | Return the loaded music type.
Method Play ( Numbers of repetitions; 1 means repeat once, -1 repeat forever., Seconds and fractions for the fade-in effect., Relative position in the music stream (0 to 1). ) ---> {MixMusic} Play a sound on a given channel on playback error., an SDLError is raised. : Numbers of repetitions; 1 means repeat once, -1 repeat forever. = , Seconds and fractions for the fade-in effect. = , Relative position in the music stream (0 to 1). = 
Method attributes (  ) ---> {Module} Returns: A dictionary with the attributes or nil if the module provides none. | Gets the decoration attributes of this module.
Method engineVersion (  ) ---> {Module} Returns: A three element array containing version, subversion and patch number. | Returns the version numbers of the compilation engine.
Method exported (  ) ---> {Module} Returns: An array containing all the exported symbols. | Returns the list of exported symbols available in this module.
Method get ( symName ) ---> {Module} Retreives a value from the target module. if the symbol name is not found., an AccessError is raised. : symName = The name of the symbol to be loaded.
Method getReference ( symName ) ---> {Module} Returns: A reference to the desired item. | Retreives a value from the target module. if the symbol name is not found., an AccessError is raised. : symName = The name of the symbol to be referenced.
Method globals (  ) ---> {Module} Returns: An array containing all the global symbols. | Returns the list of global symbols available in this module.
Method moduleVersion (  ) ---> {Module} Returns: A three element array containing version, subversion and patch number. | Returns the version numbers of the module.
Method set ( symName, value ) ---> {Module} Changes a value in the target module. if the symbol name is not found., an AccessError is raised. : symName = The name of the symbol to be changed., value = The new value to be set.
Method unload (  ) ---> {Module} Returns: True on success, false on failure. | Removes the module from the running virtual machine.
Method addUser ( db, user, pass ) ---> {MongoDB} Returns: true if user was added |  : db = Database, user = User ID to be added, pass = Password for the new user.
Method authenticate ( user, pass ) ---> {MongoDB} Returns: true if authenticated |  : user = User ID, pass = Password
Method command ( db, cmd ) ---> {MongoDB} Returns: BSON result or nil | Run a command on a database : db = Database, cmd = BSON instance
Method connect (  ) ---> {MongoDB} Connect or reconnect to MongoDB server.
Method count ( db, coll, BSON instance ) ---> {MongoDB} Returns: Total count or -1 on error |  : db = Database, coll = Collection to be queried., BSON instance = 
Method createIndex ( ns, key, (boolean) default false, (boolean) default false ) ---> {MongoDB} Returns: BSON result or nil |  : ns = namespace, key = BSON instance, (boolean) default false = , (boolean) default false = 
Method disconnect (  ) ---> {MongoDB} Disconnect to MongoDB server.
Method dropCollection ( db, coll ) ---> {MongoDB} Returns: true on success |  : db = The database, coll = The collection to be dropped
Method dropDatabase ( db ) ---> {MongoDB} Returns: true on success |  : db = The database to be dropped
Method find ( BSON instance, BSON instance, default 0, default 0 (all) ) ---> {MongoDB} Returns: An array of BSON results or nil |  : BSON instance = , BSON instance = , default 0 = , default 0 (all) = 
Method findOne ( ns, BSON instance ) ---> {MongoDB} Returns: BSON result or nil |  : ns = namespace, BSON instance = 
Method host ( [host] ) ---> {MongoDB} Returns: self (with param) or the current host. | When given a parameter, change the host for the next connection attempt. Else return the current host. : [host] = 
Method insert ( ns, bson ) ---> {MongoDB} Returns: true on success |  : ns = namespace, bson = BSONObj instance, or an array of BSON instances
Method isConnected (  ) ---> {MongoDB} Returns: true if connected | 
Method port ( [port] ) ---> {MongoDB} Returns: self (with param) or the current port. | When given a parameter, change the port for the next connection attempt. Else return the current port. : [port] = 
Method remove ( ns, cond ) ---> {MongoDB} Returns: true on success |  : ns = namespace, cond = BSON instance (conditions)
Method update ( ns, cond, op, (boolean) default true, (boolean) default true ) ---> {MongoDB} Returns: true on success |  : ns = namespace, cond = BSON instance (conditions), op = BSON instance (operations), (boolean) default true = , (boolean) default true = 
Method add ( h ) ---> {Multi} Adds an @a Handle instance to the multi interface. : h = The @a Handle instance to be added.
Method perform (  ) ---> {Multi} Returns: The count of remaining operations to be handled. | Starts or proceeds with the transfers.
Method remove ( h ) ---> {Multi} Adds an @a Handle instance to the multi interface. : h = The @a Handle instance to be added.
Method deserialize ( istream ) ---> {MXMLDocument} Loads an XML document from a stream. on load error., an MXMLError is raised. : istream = A Falcon Stream instance opened for input.
Method find ( name, Name of one of the attributes of the searched node., Value for one of the attributes in the node., Part of the data stored in the searched tag node. ) ---> {MXMLDocument} Returns: The node matching the given criterion or nil if not found. | Finds the first (tag) node matching a certain criterion. : name = Tag name of the searched node., Name of one of the attributes of the searched node. = , Value for one of the attributes in the node. = , Part of the data stored in the searched tag node. = 
Method findNext (  ) ---> {MXMLDocument} Returns: The next node matching the given criterion or nil if not found. | Finds the next (tag) node matching a certain criterion.
Method findPath ( path ) ---> {MXMLDocument} Returns: The next node matching the given criterion or nil if not found. | Finds the first (tag) node matching a certain XML path. : path = The XML path to be searched.
Method findPathNext (  ) ---> {MXMLDocument} Returns: The next node matching the given criterion or nil if not found. | Finds the next (tag) node matching a certain XML path.
Method getEncoding (  ) ---> {MXMLDocument} Returns: Previously set or read XML encoding. | Returns the encoding for stream operations.
Method read ( filename ) ---> {MXMLDocument} Loads a document to an XML file on a filesystem. on error during the deserialization., an MXMLError is raised. : filename = Name of the source XML file.
Method root (  ) ---> {MXMLDocument} Returns: The root tag node of the XML document. | Retrieves the root tag node in the document.
Method serialize ( ostream ) ---> {MXMLDocument} Stores the document as an XML file. on write error., an MXMLError is raised. : ostream = A Falcon Stream opened for output.
Method setEncoding ( encoding ) ---> {MXMLDocument} Changes the document encoding for stream operations. if the encoding name is unknown., an ParamError is raised. : encoding = A valid falcon encoding name
Method style ( If given, changes the style. ) ---> {MXMLDocument} Returns: The current style settings. | Reads or changes the style applied to this XML document. : If given, changes the style. = 
Method top (  ) ---> {MXMLDocument} Returns: The overall topmost node of the XML document. | Retrieves the topmost node in the document.
Method write ( filename ) ---> {MXMLDocument} Stores a document to an XML file on a filesystem. on error during the serialization., an MXMLError is raised. : filename = Name of the destination XML file.
Method addBelow ( node ) ---> {MXMLNode} Adds a node below this one. : node = The node to be added below this one.
Method clone (  ) ---> {MXMLNode} Returns: A copy of this node, with all its children copied. | Clones a whole XML hierarcy starting from this node.
Method data ( If provided, the new data of this node. ) ---> {MXMLNode} Returns: If a new @b data is not given, the current node data. | Set and/or return the content of this node. : If provided, the new data of this node. = 
Method depth (  ) ---> {MXMLNode} Returns: The depth of this node. | Calculates the depth of this node.
Method deserialize (  ) ---> {MXMLNode} Stores an XML node on a stream. If the serialization failed., an MXMLError is raised.
Method firstChild (  ) ---> {MXMLNode} Returns: The first child of this node or nil if the node hasn't any child. | Return the first child of a node.
Method getAttribs (  ) ---> {MXMLNode} Returns: A dictionary containing all the XML attributes and their values. | Gets the all the XML attributes of this node.
Method getAttribute ( attribute ) ---> {MXMLNode} Returns: The value for this XML attribute (as a string). | Gets the value of an XML attribute of this node. : attribute = The XML attribute to be read.
Method getChildren (  ) ---> {MXMLNode} Returns: An array containing all the children node. | Gets the all the children nodes of this node.
Method insertAfter ( node ) ---> {MXMLNode} Inserts a node after this one. : node = The node to be added after this one.
Method insertBefore ( node ) ---> {MXMLNode} Inserts a node before this one. : node = The node to be added before this one.
Method insertBelow ( node ) ---> {MXMLNode} Inserts a node below this one. : node = The node to be added below this one.
Method lastChild (  ) ---> {MXMLNode} Returns: The last child of this node or nil if the node hasn't any child. | Return the last child of a node.
Method name ( If provided, the new name of this node. ) ---> {MXMLNode} Returns: If a new @b name is not given, the current node name. | Set and/or return the name of this node. : If provided, the new name of this node. = 
Method nextSibling (  ) ---> {MXMLNode} Returns: The next node at the same level, or nil. | Return the next node child of the same parent.
Method nodeType (  ) ---> {MXMLNode} Returns: A value in @a MXMLType enumeration. | Returns the type of this node.
Method parent (  ) ---> {MXMLNode} Returns: The parent node or nil if this node has no parents. | Return the parent node of this node.
Method path (  ) ---> {MXMLNode} Returns: The path of this node in its XML document tree. | Returns the path from the root to this node.
Method prevSibling (  ) ---> {MXMLNode} Returns: The previous node at the same level, or nil. | Return the previous node child of the same parent.
Method removeChild ( child ) ---> {MXMLNode} Returns: True if the @b child node is actually a child of this node, false otherwise. | Removes a child from its parent tree. : child = The child node to be removed.
Method serialize (  ) ---> {MXMLNode} Stores an XML node on a stream. If the serialization failed., an MXMLError is raised.
Method setAttribute ( attribute, value ) ---> {MXMLNode} Sets an XML attribute of this node to a given value. : attribute = The XML attribute to be set., value = The value for this XML attribute.
Method unlink (  ) ---> {MXMLNode} Removes a node from its parent tree.
Method apply ( dict ) ---> {Object} Returns: This same object. | Applies the values in a dictionary to the corresponding properties. if some property listed in the dictionary is not defined., an AccessError is raised. : dict = A "stamp" dictionary, or a sequence of named values.
Method attributes (  ) ---> {Object} Returns: Nil if the object has no attributes, or a string-indexed dictionary. | Returns a dictionary containing annotation attributes of the given object.
Method comp ( source, A filtering function receiving one item at a time. ) ---> {Object} Returns: This object. | Appends elements to this object through a filter. : source = One sequence, range or callable generating items., A filtering function receiving one item at a time. = 
Method getProperty ( propName ) ---> {Object} Returns: the property | Returns the value of a property in an object. if the property can't be found., an AccessError is raised. : propName = A string representing the name of a property or a method inside the object.
Method getState (  ) ---> {Object} Returns: A string representing the current state of an object, or nil if the object is stateless. | Return the current state of an object.
Method mcomp ( ... ) ---> {Object} Returns: This object. | Appends elements to this object through a filter. : ... = One or more sequences, ranges or callables generating items.
Method mfcomp ( filter, ... ) ---> {Object} Returns: This object. | Appends elements to this object through a filter. : filter = A filter function receiving each element before its insertion, or nil., ... = One or more sequences, ranges or callables generating items.
Method properties (  ) ---> {Object} Returns: An array of strings representing property names. | Returns all the properties in the object.
Method retrieve ( A "stamp" dictionary. ) ---> {Object} Returns: A dictionary containing the contents of each property (stored as a key | Gets the values stored in the properties of this object. if some property listed in the dictionary is not defined., an AccessError is raised. : A "stamp" dictionary. = 
Method setProperty ( propName, value ) ---> {Object} Sets the value of a proprety in this object If the property can't be found., an AccessError is raised. : propName = A string representing the name of a property or a method inside the object., value = The property new value.
Method setState ( nstate ) ---> {Object} Returns: Return value of the __leave -> __enter sequence, if any, or nil | Change the current active state of an object. if the state is not part of the object state., an CodeError is raised. : nstate = The new state into which the object is moved.
Method toString (  ) ---> {ObjectID} 
Method beginText (  ) ---> {Page} Marks the start of a text object and sets the text position to [0,0].
Method endText (  ) ---> {Page} Ends the current text object.
Method moveTextPos ( xOffset, yOffset ) ---> {Page} Changes the current text position, using the specified offset values. : xOffset = x offset to new text position., yOffset = y offset to new text position.
Method setFontAndSize ( font, size ) ---> {Page} Self explanatory. : font = An instance of @a Font., size = An integer that specifies the pt size.
Method showText ( text ) ---> {Page} Prints text at the current position on the page. : text = String to be displayed
Method textOut ( xPos, yPos, text ) ---> {Page} Prints text on the specified position. : xPos = x position measured from the left, yPos = y position measured from the bottom, text = A string that is to be displayed
Method textRect ( left, top, right, bottom, text, align ) ---> {Page} Prints the text inside the specified region. : left = x coordinate of the top-left corner of the region to output text., top = y coordinate of the top-left corner of the region to output text., right = x coordinate of the right-bottom corner of the region to output text., bottom = y coordinate of the right-bottom corner of the region to output text., text = String to display, align = @a TextAlignment
Method prepareNamed ( name, query ) ---> {PgSQL} Prepares a PgSQL specific "named statement". : name = Name for the prepared statement, query = The query to prepare
Method getAux (  ) ---> {Process} Returns: The child process auxiliary output stream (read-only) | Returns the process auxiliary output stream.
Method getInput (  ) ---> {Process} Returns: The child process input stream (write-only) | Returns the process input stream.
Method getOutput (  ) ---> {Process} Returns: The child process output stream (read-only) | Returns the process output stream.
Method terminate ( If given and true, use the maximum severity. ) ---> {Process} Terminate a child process. on system error., an ProcessError is raised. : If given and true, use the maximum severity. = 
Method value ( if given and true, the wait for the child process to be completed. ) ---> {Process} Returns: On success, the exit value of the child process, or -1 if the child process | Retreives exit value of the child process (and close its handles). on system error., an ProcessError is raised. : if given and true, the wait for the child process to be completed. = 
Method wait (  ) ---> {Process} Waits for a child process to terminate. on system errors or wait failed., an ProcessError is raised.
Method close (  ) ---> {ProcessEnum} Closes the enumeration freeing system resources.
Method next (  ) ---> {ProcessEnum} Returns: True if there is an element that will fill the properties, false if the element | Fills the properties of this class with the next entry in the process table. on system error., an ProcessError is raised.
Method times ( sequence ) ---> {Range} Returns: Last index processed. | repeats a sequence a given number of times. : sequence = Function or sequence to be repeated.
Method discard ( count ) ---> {Recordset} Returns: true if successful, false if the recordset is over. | Discards one or more records in the recordset. : count = The number of records to be skipped.
Method do ( cb, A fetchable item that will be filled and then passed to @b cb. ) ---> {Recordset} Calls back a function for each row in the recordset. if the database engine reports an error., an DBIError is raised. : cb = The callback function that must be called for each row., A fetchable item that will be filled and then passed to @b cb. = 
Method fetch ( Where to store the fetched record., Number of rows fetched when @b item is a Table. ) ---> {Recordset} Returns: The @b item passed as a paramter filled with fetched data or | Fetches a record and advances to the next. if the database engine reports an error., an DBIError is raised. : Where to store the fetched record. = , Number of rows fetched when @b item is a Table. = 
Method captured ( count ) ---> {Regex} Returns: A range defining a captured match. | Return one of the captured (parenthesized) expressions. : count = Id of the captured substring, starting from 1; 0 represents all the matched string.
Method capturedCount (  ) ---> {Regex} Returns: Count of captured subranges. | Return the count of captured (parenthesized) expressions.
Method compare ( string ) ---> {Regex} Returns: 0 if the string is matched by the regex pattern. | Checks if a given strings can be matched by this expression. : string = A string.
Method find ( string,  An optional starting point in the string. ) ---> {Regex} Returns: A range where the pattern matches, or nil. | Finds a range matching this regular expression in a string. : string = A string in which the pattern has to be found.,  An optional starting point in the string. = 
Method findAll ( string, Optional start position in the string., Optional maximum matches allowed . ) ---> {Regex} Returns: A vector of ranges where the pattern matches, or nil. | Find all ranges where this regular expression can mach the string. : string = String where to scan for the pattern., Optional start position in the string. = , Optional maximum matches allowed . = 
Method findAllOverlapped ( string, Optional start position in the string., Optional maximum matches allowed . ) ---> {Regex} Returns: A vector of ranges where the pattern matches, or nil. | Find all ranges where this regular expression can mach the string, with possibly overlapped matches. : string = String where to scan for the pattern., Optional start position in the string. = , Optional maximum matches allowed . = 
Method grab ( string ) ---> {Regex} Returns: The matching substring, or nil if the pattern doesn't match the string. | Returns the part of a target string matched by this regular expression. : string = String where to scan for the pattern.
Method match ( string ) ---> {Regex} Returns: True if the string is matched by the pattern, false otherwise. | Matches this regular expression against a string. : string = String where to scan for the pattern.
Method replace ( string, replacer, Optional initial scan position. ) ---> {Regex} Returns: The string with the matching content replaced. | Replace a substring matching this regular expression with another string. : string = String where to scan for the pattern., replacer = The string to replace the matched pattern with., Optional initial scan position. = 
Method replaceAll ( string, replacer ) ---> {Regex} Returns: The string with the matching content replaced, or nil if no change is perfomed. | Replaces all the possible matches of this regular expression in a target with a given string. : string = String where to scan for the pattern., replacer = The string to replace the matched pattern with.
Method split ( string,  Maximum number of split instances., Return also the found token. ) ---> {Regex} Returns: An array containing the string slices, or nil. | Splits a string at match points. : string = The string to be split.,  Maximum number of split instances. = , Return also the found token. = 
Method study (  ) ---> {Regex} Study the pattern after compilation.
Method subst ( string, replacer ) ---> {Regex} Returns: The string with the matching content replaced, or nil if no change is perfomed. | Replaces all the matches expanding placeholders. : string = String where to scan for the pattern., replacer = The string to replace the matched pattern with.
Method version (  ) ---> {Regex} Returns: A string containing a descriptive PCRE version message. | Returns the PCRE version used by this binding.
Method clearCookie ( name ) ---> {Reply} Remove given cookie. : name = The cookie to be removed.
Method commit (  ) ---> {Reply} Sends immediately the header and pending data.
Method ctype ( type, MIME Subtype that shall be sent to the output., MIME Charset encoding of the output (if text). ) ---> {Reply} Helper creating a Content-Type header. : type = Main MIME type of the data that shall be sent to output., MIME Subtype that shall be sent to the output. = , MIME Charset encoding of the output (if text). = 
Method getHeader ( name ) ---> {Reply} Returns: If the header is set, its value as a string; false otherwise. | Retrieves the value of a given header. : name = The name of the header to be queried.
Method getHeaders (  ) ---> {Reply} Returns: A dictionary of strings containing all the headers prepared for being sent. | returns the list of headers that will be sent (or have been sent).
Method redirect ( Where to redirect the page., Number of seconds before refresh takes place. ) ---> {Reply} Helper creating a Refresh (redirection) header. : Where to redirect the page. = , Number of seconds before refresh takes place. = 
Method setCookie ( name, Value for the cookie (eventually truned into a string)., Expiration date (a TimeStamp or an ISO or RFC2822 formatted string),, Cookie path validity, Domain for which the cookie is valid., True to specify that the cookie can be sent only in https., If true, this cookie will be invisible to client side scripts, and will ) ---> {Reply} sets a cookie that will be received next time that a script is called. : name = Name of the Cookie or complete cookie specification in a dictionary., Value for the cookie (eventually truned into a string). = , Expiration date (a TimeStamp or an ISO or RFC2822 formatted string), = , Cookie path validity = , Domain for which the cookie is valid. = , True to specify that the cookie can be sent only in https. = , If true, this cookie will be invisible to client side scripts, and will = 
Method setHeader ( name, If given and not nil, the value to be stored in the header; if not given, ) ---> {Reply} Adds or remove a reply header. : name = The header to be created or removed., If given and not nil, the value to be stored in the header; if not given, = 
Method closeSession ( Optional explicit SID to be closed ) ---> {Request} Closes a currently open session. : Optional explicit SID to be closed = 
Method fwdGet ( If true, add also the POST fields. ) ---> {Request} Returns: An URI encoded string that can be directly used in further get requests. | Forwards the request, creating a suitable query string for a target URI. : If true, add also the POST fields. = 
Method fwdPost ( If true, add also the GET fields. ) ---> {Request} Returns: A string containing pre-encoded http hidden input fields. | Forwards the request, creating a set of hidden input fields. : If true, add also the GET fields. = 
Method getField ( field, Default value to be returned if the field is not found. ) ---> {Request} Returns: A cookie, POST or GET field value (as a string). | Retreives a query field from either @b Request.gets or @b Request.posts. if no default value is given and field is not found., an AccessError, is raised. : field = The field name to be found., Default value to be returned if the field is not found. = 
Method getSession ( Explicit session ID synthesized by the script. ) ---> {Request} Returns: A blessed dictionary that can be used to store session data. | Create a new session or returns the session data associated with this session. If the session cannot be restored or is expired. Use the return code, an WopiError is raised. : Explicit session ID synthesized by the script. = 
Method hasSession (  ) ---> {Request} Returns: True if this script supposes that it has an open session. | Checks if the current script is hosting an open session.
Method startSession ( Explicit session ID synthesized by the script. ) ---> {Request} Returns: A blessed dictionary that can be used to store session data. | Create a new session. If the session cannot be created. Use the return code, an WopiError is raised. : Explicit session ID synthesized by the script. = 
Method tempFile ( If given and passed by reference, it will receive the complete file name. ) ---> {Request} Returns: A Falcon stream. | Creates a temporary file. on open or write error., an IoError is raised. : If given and passed by reference, it will receive the complete file name. = 
Method CreateCursor ( mbData, mbMask, width, height, Xspot, Yspot ) ---> {SDL} Gets currently active cursor. if the cursor couldn't be created., an SDLError is raised. : mbData = MemBuf containing visual bit data., mbMask = Membuf containing visibility mask data., width = Width of the cursor., height = Height of the cursor., Xspot = X position of the cursor hotspot., Yspot = Y position of the cursor hotspot.
Method CreateRGBSurface ( flags, width, height, depth, Red bitmask - defaults to low address bits., Green bitmask - defaults to second low address bits., Blue bitmask - defaults to third low address bits., Alpha bitmask - defaults to hihest address bits. ) ---> {SDL} Returns: The newly created surface. | Creates a paintable surface on creation error., an SDLError is raised. : flags = Creation flags., width = Width of the created buffer., height = Height of the created buffer., depth = Bit per pixel depth of the image - can be 8, 16, 24 or 32., Red bitmask - defaults to low address bits. = , Green bitmask - defaults to second low address bits. = , Blue bitmask - defaults to third low address bits. = , Alpha bitmask - defaults to hihest address bits. = 
Method CreateRGBSurfaceFrom ( pixels, width, height, depth, Red bitmask - defaults to low address bits., Green bitmask - defaults to second low address bits., Blue bitmask - defaults to third low address bits., Alpha bitmask - defaults to hihest address bits. ) ---> {SDL} Returns: The newly created surface. | Creates a paintable surface using existing data. on creation error., an SDLError is raised. : pixels = Original pixels in a membuf., width = Width of the created buffer, height = Height of the created buffer., depth = Bit per pixel depth of the image -- must match pixel membuf word length., Red bitmask - defaults to low address bits. = , Green bitmask - defaults to second low address bits. = , Blue bitmask - defaults to third low address bits. = , Alpha bitmask - defaults to hihest address bits. = 
Method EnableKeyRepeat ( delay, interval ) ---> {SDL} Enable or disable key repeat and set key rate. if requested parameters cannot be set., an SDLError is raised. : delay = Delay before starting producing repeated keystores., interval = Interval between keystores.
Method EnableUNICODE ( mode ) ---> {SDL} Returns: current status of unicode translation. | Enable or disable translation from keys to Unicode characters. : mode = Wether to enable, disable or query Unicode translation.
Method EventState ( type, state ) ---> {SDL} Returns: true on success, false if the event queue is full | Query or change processing ability. : type = Event type to be filtered., state = Wether to enable, disable or query the event state.
Method GetAppState (  ) ---> {SDL} Returns: Current application state | Gets current application state.
Method GetCursor (  ) ---> {SDL} Returns: an instance of @a SDLCursor class or nil. | Gets currently active cursor.
Method GetGammaRamp ( An array that will contain the gamma memory buffers on exit. ) ---> {SDL} Returns: An array containing the three MemBufs | Get Gamma ramps for this hardware. if the hardware doesn't support gamma., an SDLError is raised. : An array that will contain the gamma memory buffers on exit. = 
Method GetKeyName ( key ) ---> {SDL} Returns: a string containing the key name. | Gets a SDL specific name for a ceratin key : key = An @a SDLK value.
Method GetKeyState (  ) ---> {SDL} Returns: A 1 byte memory buffer. | Gets a memory buffer which reflects current keyboard scancodes status.
Method GetModState (  ) ---> {SDL} Returns: An integer containing or'd modifier state. | Gets current keyboard modifier state.
Method GetMouseState ( MouseBuf, interval ) ---> {SDL} Retreive mouse state if requested parameters cannot be set., an SDLError is raised. : MouseBuf = , interval = Interval between keystores.
Method GetVideoInfo (  ) ---> {SDL} Returns: An instance of a @a SDLVideoInfo | Returns details about underlying video system. on error., an SDLError is raised.
Method GetVideoSurface (  ) ---> {SDL} Returns: a @a SDLScreen instance representing the current video device. | Retreives the current video surface. on failure, an SDLError is raised.
Method Init ( flags ) ---> {SDL} Initialize SDL system. on initialization failure, an SDLError is raised. : flags = SDL initialziation flags
Method InitAuto ( flags ) ---> {SDL} Returns: handle for SDL termination. | Initialize SDL system and provide automatic cleanup. on initialization failure, an SDLError is raised. : flags = SDL initialization flags
Method IsBigEndian (  ) ---> {SDL} Returns: true if the host system is big endian. | Returns true if the host system is big endian.
Method JoystickEventState ( mode ) ---> {SDL} Returns: Current joystick event propagation segging. | Changes joystick event propagation settings. : mode = Wether to disable, enable or query the joystick.
Method JoystickUpdate (  ) ---> {SDL} Updates the state(position, buttons, etc.) of all open joysticks.
Method ListModes ( An SDLPixelFormat structure to filter modes or nil., Initialization flags that must be supported by ) ---> {SDL} Returns: An array of x,y pairs containing the sizes of | Returns a list of possible modes. if the system is not initialized., an SDLError is raised. : An SDLPixelFormat structure to filter modes or nil. = , Initialization flags that must be supported by = 
Method LoadBMP ( filename ) ---> {SDL} Returns: a @a SDLSurface instance containing the loaded image. | Loads an image from a BMP file. on load failure, an SDLError is raised. : filename = a filename to load.
Method MakeCursor ( aImage, hotX, hotY ) ---> {SDL} Builds an SDL cursor taking an array of strings as input. : aImage = a string image., hotX = X coordinate of the hotspot., hotY = Y coordinate of the hotspot.
Method PollEvent (  ) ---> {SDL} Returns: true if an event has been processed. | Polls for event and calls handlers if events are incoming.
Method PumpEvents (  ) ---> {SDL} Update event listing and queueing during long operations.
Method Quit (  ) ---> {SDL} Turns off SDL system.
Method QuitSubSystem ( subsys ) ---> {SDL} Shuts down a subset of SDL. : subsys = bitwise or'd init flags mask.
Method SetGamma ( red, green, blue ) ---> {SDL} Sets the gamma function values for the active SDL output. if the hardware doesn't support gamma, an SDLError is raised. : red = Red gamma correction value., green = Green gamma correction value., blue = Blue gamma correction value.
Method SetGammaRamp ( redbuf, greenbuf, bluebuf ) ---> {SDL} Set Gamma ramps for this hardware. if the hardware doesn't support gamma., an SDLError is raised. : redbuf = A 2 bytes 256 elements memory buffer for the red channel, or nil., greenbuf = A 2 bytes 256 elements memory buffer for the blue channel, or nil., bluebuf = A 2 bytes 256 elements memory buffer for the green channel, or nil.
Method SetModState ( state ) ---> {SDL} Sets current keyboard modifier state. : state = the state to be set.
Method SetVideoMode ( width, height, - byte per pixel in the desired modesired heightde (defaults to automatic)., - flags to be eventually specified. ) ---> {SDL} Returns: a SDLScreen instance representing the SDL output device. | Changes the video mode and/or starts SDL context window. on initialization failure, an SDLError is raised. : width = - desired width., height = - desired height., - byte per pixel in the desired modesired heightde (defaults to automatic). = , - flags to be eventually specified. = 
Method ShowCursor ( The request for the cursor. ) ---> {SDL} Returns: Current status of cursor visibility. | Changes or query the visibility of the mouse cursor. : The request for the cursor. = 
Method StartEvents (  ) ---> {SDL} Stats dispatching of SDL events to this VM.
Method StopEvents (  ) ---> {SDL} Stops dispatching of SDL events.
Method VideoDriverName (  ) ---> {SDL} Returns: A simple description of the video driver being used. | Returns the name of the used video driver. if the system is not initialized., an SDLError is raised.
Method VideoModeOK ( width, height, - byte per pixel in the desired modesired heightde (defaults to automatic)., - flags to be eventually specified. ) ---> {SDL} Returns: 0 if the mode isn't available, or a bit per pixel value for the given mode. | Verifies if a given video mode is ok : width = - desired width., height = - desired height., - byte per pixel in the desired modesired heightde (defaults to automatic). = , - flags to be eventually specified. = 
Method WaitEvent (  ) ---> {SDL} Waits forever until an event is received.
Method WasInit ( SDL initialziation flags. ) ---> {SDL} Returns: a bitmask containing the initialized subsystems (among the ones requested). | Detects if some SDL subsystem was initialized. : SDL initialziation flags. = 
Method WM_GetCaption (  ) ---> {SDL} Returns: A two elements array containing the window caption and icon caption. | Get Caption for SDL window and for window icon.
Method WM_GrabInput ( Grab request. ) ---> {SDL} Returns: Current grab status. | Grabs window and mouse input. : Grab request. = 
Method WM_IconifyWindow (  ) ---> {SDL} Get Caption for SDL window and for window icon. if the window cannot be iconified., an SDLError is raised.
Method WM_SetCaption ( caption, Caption used for the iconified window. ) ---> {SDL} Set Caption for SDL window and for window icon. : caption = String containing the window caption., Caption used for the iconified window. = 
Method SetCursor (  ) ---> {SDLCursor} Selects the current cursor for the SDL.
Method PumpAndRefresh (  ) ---> {SDLMouseState} Peeks incoming events into SDL and then refresh current mouse position and status.
Method Refresh (  ) ---> {SDLMouseState} Refresh current mouse position and status.
Method GetColor ( colorIndex, Array of that will hold red, green and blue values. ) ---> {SDLPalette} Returns: an array containing red, green and blue elements. | Gets a color in the image palette. if color index is out of range., an RangeError is raised. : colorIndex = Index of the color in the palette., Array of that will hold red, green and blue values. = 
Method SetColor ( colorIndex, red, Green value of the element (not needed if red was an array)., Blue value of the element (not needed if red was an array). ) ---> {SDLPalette} Sets a color in the image palette. if color index is out of range., an RangeError is raised. : colorIndex = Index of the color in the palette., red = the Red value of the color to be set, or a three elements, Green value of the element (not needed if red was an array). = , Blue value of the element (not needed if red was an array). = 
Method Flip (  ) ---> {SDLScreen} Flips screen buffers.
Method SetPalette ( flags, colors, firstColor ) ---> {SDLScreen} Returns: true if the palette could be changed, 0 if the image has no palette or | Changes part of the palette of a palettized surface. : flags = Selector of logical or physical palette (or both)., colors = A 4 bytes per entry MemBuf containing the color data., firstColor = An integer specifying the first color of the palette.
Method ToggleFullScreen (  ) ---> {SDLScreen} Toggles the application between windowed and fullscreen mode if not supported., an SDLError is raised.
Method UpdateRect ( an X coordinate or a @a SDLRect containing refresh coordinates., coordinate of the refresh rectangle., width of the refresh rectangle., height of the refresh rectangle. ) ---> {SDLScreen} Refreshes an SDL screen surface or a part of it. : an X coordinate or a @a SDLRect containing refresh coordinates. = , coordinate of the refresh rectangle. = , width of the refresh rectangle. = , height of the refresh rectangle. = 
Method UpdateRects ( aRects ) ---> {SDLScreen} Updates one or more areas of the screen at the same time. : aRects = Array of SDLRect instances that have to be updated.
Method BlitSurface ( srcRect, dest, a @a SDLRect containing destination coordinates or nil. ) ---> {SDLSurface} Copies a surface of part of it onto another surface. on copy failure., an SDLError is raised. : srcRect = a @a SDLRect containing the source coordinates or nil., dest = the destionation SDLSurface., a @a SDLRect containing destination coordinates or nil. = 
Method DisplayFormatAlpha ( srcRect, dest, a @a SDLRect containing destination coordinates or nil. ) ---> {SDLSurface} Enables this surface to work with source alpha transparency. on copy failure., an SDLError is raised. : srcRect = a @a SDLRect containing the source coordinates or nil., dest = the destionation SDLSurface., a @a SDLRect containing destination coordinates or nil. = 
Method FillRect ( rect, color ) ---> {SDLSurface} Fills a rectangle with a given color. on error, an SDLError is raised. : rect = an SDLRect instance containing the coordinates to fill, or nil to fill all, color = a color value to be used in fills.
Method GetPixel ( x, y ) ---> {SDLSurface} Get a single pixel value from the surface if x or y are out of range, an ParamError is raised. : x = X coordinates of the pixel to be retreived, y = Y coordinates of the pixel to be retreived
Method GetPixelIndex ( x, y ) ---> {SDLSurface} Return the index of a pixel in the pixels array of this class if x or y are out of range, an ParamError is raised. : x = X coordinates of the desired pixel position, y = Y coordinates of the desired pixel position
Method GetRGBA ( color, An array that is used to store the desired values. ) ---> {SDLSurface} Returns: a 4 element array (Red, Green, Blue and Alpha). | Decomposes a given pixel value to RGBA values. if color is out of index in palette based images, an ParamError is raised. : color = multibyte value of a color, An array that is used to store the desired values. = 
Method IsLockNeeded (  ) ---> {SDLSurface} Returns: true if the user should lock this surface before accessing its binary | Tells wether locks are needed on this surface or not.
Method LockIfNeeded (  ) ---> {SDLSurface} Locks a surface for deep binary access only if needed.
Method LockSurface (  ) ---> {SDLSurface} Locks the surface for low level byte access.
Method MapRGBA ( red, green, blue, Alpha component of the final color ) ---> {SDLSurface} Returns: an integer that can be directly stored as color in this image. | Builds a color value from RGBA values. : red = Red component of the final color, green = Green component of the final color, blue = Blue component of the final color, Alpha component of the final color = 
Method SaveBMP ( filename ) ---> {SDLSurface} Saves a BMP files to disk. on failure., an SDLError is raised. : filename = the file where to store this BMP.
Method SetAlpha ( flags, alpha ) ---> {SDLSurface} Sets the ALPHA settings for this surface on error., an SDLError is raised. : flags = ALPHA composition flags., alpha = A value between 0 (transparent) and 255 (opaque)
Method SetColors ( colors, firstColor ) ---> {SDLSurface} Returns: true if the palette could be changed, 0 if the image has no palette or | Changes part of the color map of a palettized surface. : colors = A 4 bytes per entry MemBuf containing the color data., firstColor = An integer specifying the first color of the palette.
Method SetIcon (  ) ---> {SDLSurface} Sets this surface as the icon for the SDL window.
Method SetPixel ( x, y, value ) ---> {SDLSurface} Sets a single pixel to desired value if x or y are out of ranges, an ParamError is raised. : x = X coordinates of the pixel to be set, y = Y coordinates of the pixel to be set, value = The value to be set
Method UnlockIfNeeded (  ) ---> {SDLSurface} Unlocks a surface for deep binary access only if needed.
Method UnlockSurface (  ) ---> {SDLSurface} Unlocks the surface.
Method post ( The amount by which the semaphore will be incremented (1 by default). ) ---> {Semaphore} Increments the count of the semaphore. : The amount by which the semaphore will be incremented (1 by default). = 
Method wait ( Optional maximum wait in seconds. ) ---> {Semaphore} Waits on a semaphore. : Optional maximum wait in seconds. = 
Method append ( item ) ---> {Sequence} Adds an item at the end of the sequence. : item = The item to be added.
Method back (  ) ---> {Sequence} Returns: The last item in the Sequence. | Returns the last item in the Sequence. if the Sequence is empty., an AccessError is raised.
Method clear (  ) ---> {Sequence} Removes all the items from the Sequence.
Method comp ( source, A filtering function receiving one item at a time. ) ---> {Sequence} Returns: This sequence. | Appends elements to this sequence through a filter. : source = A sequence, a range or a callable generating items., A filtering function receiving one item at a time. = 
Method empty (  ) ---> {Sequence} Returns: True if the Sequence is empty, false if contains some elements. | Checks if the Sequence is empty or not.
Method first (  ) ---> {Sequence} Returns: An iterator. | Returns an iterator to the first element of the Sequence.
Method front (  ) ---> {Sequence} Returns: The first item in the Sequence. | Returns the first item in the Sequence. if the Sequence is empty., an AccessError is raised.
Method last (  ) ---> {Sequence} Returns: An iterator. | Returns an iterator to the last element of the Sequence.
Method mcomp ( ... ) ---> {Sequence} Returns: This sequence. | Appends elements to this sequence from multiple sources. : ... = One or more sequences, ranges or callables generating items.
Method mfcomp ( filter, ... ) ---> {Sequence} Returns: This sequence. | Appends elements to this sequence from multiple sources through a filter. : filter = A filtering function receiving one item at a time., ... = One or more sequences, ranges or callables generating items.
Method prepend ( item ) ---> {Sequence} Adds an item in front of the sequence : item = The item to be added.
Method contains ( item ) ---> {Set} Returns: True if the item is in the set, false otherwise. | Checks if a certain item is in the set. : item = The item to be found.
Method find ( item ) ---> {Set} Returns: True if the item is in the set, false otherwise. | Checks if a certain item is in the set. : item = The item to be found.
Method insert ( item ) ---> {Set} Adds an item to the set. : item = The item to be added.
Method len (  ) ---> {Set} Returns: Count of items in the set. | Returns the number of items stored in this set.
Method remove ( item ) ---> {Set} Returns: True if the item was removed, false if it wasn't found. | Removes an item from a set. : item = The item to be removed.
Method dispose (  ) ---> {Socket} Closes a socket and frees system resources associated with it.
Method getHost (  ) ---> {Socket} Returns: The host address. | Gets the host associated with this socket.
Method getPort (  ) ---> {Socket} Returns: The port address. | Gets the port associated with this socket.
Method getService (  ) ---> {Socket} Returns: A string containing the service name. | Returns the service name (port description) associated with this socket
Method getTimeout (  ) ---> {Socket} Returns: A numeric value (seconds or seconds fractions). | Returns the default timeout for this socket.
Method readAvailable ( Wait for a specified time in seconds or fractions. ) ---> {Socket} Returns: True if the next read operation would not block. | Checks if there is available data to be read on this socket. In case of asynchronous interruption., an InterruptedError is raised. : Wait for a specified time in seconds or fractions. = 
Method setTimeout ( timeout ) ---> {Socket} Sets the default timeout for lengthy operations. : timeout = Timeout in milliseconds.
Method writeAvailable ( Optional wait in seconds. ) ---> {Socket} Returns: True if the socket is writeable or becomes writeable during the wait. | Waits for the socket to be ready to write data. in case of asynchronous interruption., an InterruptedError is raised. : Optional wait in seconds. = 
Method aexec ( The data to be passed to the repeated statement. ) ---> {Statement} Returns: An instance of @a Recorset if the query generated a recorset. | Executes a repeated statement. if the database engine reports an error., an DBIError is raised. : The data to be passed to the repeated statement. = 
Method close (  ) ---> {Statement} Close this statement.
Method execute ( The data to be passed to the repeated statement. ) ---> {Statement} Returns: An instance of @a Recorset if the query generated a recorset. | Executes a repeated statement. if the database engine reports an error., an DBIError is raised. : The data to be passed to the repeated statement. = 
Method reset (  ) ---> {Statement} Resets this statement if the statement cannot be reset., an DBIError is raised.
Method clone (  ) ---> {Stream} Returns: A new copy of the stream handle. | Clone the stream handle. On stream error., an IoError is raised.
Method close (  ) ---> {Stream} Closes the stream.
Method eof (  ) ---> {Stream} Returns: True if file pointer is at EOF. | Checks if the last read operation hit the end of the file.
Method errorDescription (  ) ---> {Stream} Returns: A string describing the system error. | Returns a system specific textual description of the last error.
Method flush (  ) ---> {Stream} Flushes a stream.
Method getBuffering (  ) ---> {Stream} Returns: 0 if the stream is unbuffered or a positive number if it is buffered. | Returns the size of I/O buffering active on this stream.
Method grab ( size ) ---> {Stream} Returns: A string containing binary data from the stream. | Grabs binary data from the stream. on system errors., an IoError is raised. : size = Maximum size to be read.
Method grabLine ( Maximum count of characters to be read before to return anyway. ) ---> {Stream} Returns: A string containing the read line, or oob(0) when the file is over. | Grabs a line of text encoded data. on system errors., an IoError is raised. : Maximum count of characters to be read before to return anyway. = 
Method grabText ( size ) ---> {Stream} Returns: A string containing the read text. | Grabs text encoded data from the stream. on system errors., an IoError is raised. : size = Optionally, a maximum size to be read.
Method isOpen (  ) ---> {Stream} Returns: True if the file is open. | Checks if the stream is currently open.
Method lastError (  ) ---> {Stream} Returns: An error code. | Return the last system error.
Method lastMoved (  ) ---> {Stream} Returns: An amount of bytes. | Return the amount of data moved by the last operation.
Method read ( buffer, Optionally, a maximum size to be read. ) ---> {Stream} Returns: Amount of data actually read. | Reads binary data from the stream. on system errors., an IoError is raised. : buffer = A string or MemBuf that will be filled with read data., Optionally, a maximum size to be read. = 
Method readAvailable ( Maximum wait in seconds and fraction (defaults to infinite). ) ---> {Stream} Returns: True if data is available, false otherwise. | Checks if data can be read, or wait for available data. if the Virtual Machine is asynchronously interrupted., an InterruptedError is raised. : Maximum wait in seconds and fraction (defaults to infinite). = 
Method readLine ( buffer, Maximum count of characters to be read before to return anyway. ) ---> {Stream} Returns: True if a line was read, false otherwise. | Reads a line of text encoded data. on system errors., an IoError is raised. : buffer = A string that will be filled with read data., Maximum count of characters to be read before to return anyway. = 
Method readText ( buffer, Optionally, a maximum size to be read. ) ---> {Stream} Returns: Amount of data actually read. | Reads text encoded data from the stream. on system errors., an IoError is raised. : buffer = A string that will be filled with read data., Optionally, a maximum size to be read. = 
Method seek ( position ) ---> {Stream} Returns: Position in the stream after seek. | Moves the file pointer on seekable streams. on system errors., an IoError is raised. : position = Position in the stream to seek.
Method seekCur ( position ) ---> {Stream} Returns: Position in the stream after seek. | Moves the file pointer on seekable streams relative to current position. on system errors., an IoError is raised. : position = Position in the stream to seek.
Method seekEnd ( position ) ---> {Stream} Returns: Position in the stream after seek. | Moves the file pointer on seekable streams relative to end of file. on system errors., an IoError is raised. : position = Position in the stream to seek.
Method setBuffering ( size ) ---> {Stream} Set the buffering state of this stream. : size = Buffering size; pass 0 to disable.
Method setEncoding ( encoding, How to treat end of line indicators. ) ---> {Stream} Set the text encoding and EOL mode for text-based operations. : encoding = Name of the encoding that is used for the stream., How to treat end of line indicators. = 
Method tell (  ) ---> {Stream} Returns: Position in the stream. | Return the current position in a stream. on system errors., an IoError is raised.
Method truncate ( If given, truncate at given position. ) ---> {Stream} Returns: Position in the stream. | Resizes a file. on system errors., an IoError is raised. : If given, truncate at given position. = 
Method write ( buffer, Number of bytes to be written., A position from where to start writing. ) ---> {Stream} Returns: Amount of data actually written. | Write binary data to a stream. on system errors., an IoError is raised. : buffer = A string or a MemBuf containing the data to be written., Number of bytes to be written. = , A position from where to start writing. = 
Method writeAvailable ( Maximum wait in seconds and fraction (defaults to infinite). ) ---> {Stream} Returns: True if data can be written, false otherwise. | Checks if data can be written, or wait until it's possible to write. if the Virtual Machine is asynchronously interrupted., an InterruptedError is raised. : Maximum wait in seconds and fraction (defaults to infinite). = 
Method writeText ( buffer, The character count from which to start writing data., The position of the last character to write. ) ---> {Stream} Write text data to a stream. on system errors., an IoError is raised. : buffer = A string containing the text to be written., The character count from which to start writing data. = , The position of the last character to write. = 
Method back ( Number of characters to be taken (defaults to 1)., If true, returns a character value instead of a string., If true, remove also the character. ) ---> {String} Returns: The first element or nil if the string is empty. | Returns the first character in a string. : Number of characters to be taken (defaults to 1). = , If true, returns a character value instead of a string. = , If true, remove also the character. = 
Method charSize ( New value for bytes per character (1, 2 or 4). ) ---> {String} Returns: This string if @b bpc is given, or the current character size value if not given. | Returns or changes the size in bytes in this string. : New value for bytes per character (1, 2 or 4). = 
Method cmpi ( string ) ---> {String} Returns: <0, 0 or >0, respectively if this string is less, equal or greater than | Performs a lexicographic comparation of two strings, ignoring character case. : string = Second string to be compared with this one.
Method endsWith ( token, If true, pefroms a case neutral check ) ---> {String} Returns: True if @b token matches the end of this string, false otherwise. | Check if a strings ends with a substring. : token = The substring that will be compared with this string., If true, pefroms a case neutral check = 
Method escape ( If true, characters above UNICODE 127 are escaped as well. ) ---> {String} Returns: A new escaped string. | Escapes all the special characters in the string. : If true, characters above UNICODE 127 are escaped as well. = 
Method esq ( if true, the source string is modified, saving memory. ) ---> {String} Returns: A new escaped string, if @b inplace is not given, or this same string | Escapes the quotes in this string. : if true, the source string is modified, saving memory. = 
Method fill ( chr ) ---> {String} Returns: The string itself. | Fills a string with a given character or substring. : chr = The character (unicode value) or substring used to refill this string.
Method find ( needle, Optional position from which to start the search in string., Optional position at which to end the search in string. ) ---> {String} Returns: The position where the substring is found, or -1. | Finds a substring. : needle = Substring to search for., Optional position from which to start the search in string. = , Optional position at which to end the search in string. = 
Method front ( Number of characters to be returned (1 by default)., If true, returns a character value instead of a string., If true, remove also the character. ) ---> {String} Returns: The first element or nil if the string is empty. | Returns the first character in a string. : Number of characters to be returned (1 by default). = , If true, returns a character value instead of a string. = , If true, remove also the character. = 
Method ftrim ( A set of characters that must be removed. ) ---> {String} Returns: The trimmed version of the string. | Trims front whitespaces in a string. if the given item is not a string., an AccessError is raised. : A set of characters that must be removed. = 
Method join ( ... ) ---> {String} Returns: A new string created joining the parameters, left to right. | Joins the parameters into a new string. : ... = 
Method lower (  ) ---> {String} Returns: The lowercased string. | Returns a lowercase version of this string.
Method merge ( array ) ---> {String} Returns: This string. | Merges an array of strings into one. : array = An array of strings to be merged.
Method ptr (  ) ---> {String} Returns: A string pointer. | Returns a pointer to raw data contained in this string.
Method replace ( substr, repstr, Optional start position in the string., Optional end position in the string. ) ---> {String} Returns: A copy of the string with the occourences of the searched substring replaced. | Replaces the all the occurrences of a substring with another one. : substr = The substring that will be replaced., repstr = The string that will take the place of substr., Optional start position in the string. = , Optional end position in the string. = 
Method replicate ( times ) ---> {String} Returns: The new string. | Returns a new string that is created by replicating this one. : times = Number of times the string must be replicated.
Method rfind ( needle, Optional position from which to start the search in string., Optional position at which to end the search in string. ) ---> {String} Returns: The position where the substring is found, or -1. | Finds a substring backwards. : needle = Substring to search for., Optional position from which to start the search in string. = , Optional position at which to end the search in string. = 
Method rtrim ( A set of characters that must be removed. ) ---> {String} Returns: The trimmed version of the string. | Trims trailing whitespaces in a string. if the given item is not a string., an AccessError is raised. : A set of characters that must be removed. = 
Method split ( The token by which the string should be split., Optional maximum split count. ) ---> {String} Returns: An array of strings containing the split string. | Subdivides a string in an array of substrings given a token substring. : The token by which the string should be split. = , Optional maximum split count. = 
Method splittr ( token, Optional maximum split count. ) ---> {String} Returns: An array of strings containing the split string. | Subdivides a string in an array of substrings given a token substring. : token = The token by which the string should be split., Optional maximum split count. = 
Method startsWith ( token, If true, pefroms a case neutral check ) ---> {String} Returns: True if @b token matches the beginning of this string, false otherwise. | Check if a strings starts with a substring. : token = The substring that will be compared with this string., If true, pefroms a case neutral check = 
Method toMemBuf ( The memory buffer word width (defaults to string character size). ) ---> {String} Returns: The resulting membuf. | Convets this string into a Memory Buffer : The memory buffer word width (defaults to string character size). = 
Method trim ( A set of characters that must be removed. ) ---> {String} Returns: The trimmed version of the string. | Trims whitespaces from both ends of a string. if the given item is not a string., an AccessError is raised. : A set of characters that must be removed. = 
Method unescape ( if true, the source string is modified, saving memory. ) ---> {String} Returns: A new unescaped string, if @b inplace is not given, or the @b string parameter | Unescapes all the special characters in the string. : if true, the source string is modified, saving memory. = 
Method unesq ( if true, the source string is modified, saving memory. ) ---> {String} Returns: A new escaped string, if @b inplace is not given, or this same string | Escapes the quotes in this string. : if true, the source string is modified, saving memory. = 
Method upper (  ) ---> {String} Returns: The uppercased string. | Returns an upper case version of this string.
Method wmatch ( wildcard, If true, the latin 26 base letters case is ignored in matches. ) ---> {String} Returns: True if the string matches, false otherwise. | Perform an old-style file-like jolly-based wildcard match. : wildcard = A wildcard, possibly but not necessarily including a jolly character., If true, the latin 26 base letters case is ignored in matches. = 
Method closeToString (  ) ---> {StringStream} Returns: The stream contents. | Close the stream and returns its contents.
Method getString (  ) ---> {StringStream} Returns: A copy of the contents of this stream. | Returns the data currently stored in the stream.
Method post ( The number of signals to be posted to this semaphore. ) ---> {SyncCounter} Releases the counter or increases the counter by more than one. : The number of signals to be posted to this semaphore. = 
Method empty (  ) ---> {SyncQueue} Returns: True if the queue is empty. | Returns true if the queue is empty.
Method pop (  ) ---> {SyncQueue} Returns: The item that was at the end of the queue. | Pops an item from the back of the queue. if the queue is empty., an ThreadError is raised.
Method popFront (  ) ---> {SyncQueue} Returns: The item that was in front of the queue. | Pops an item from the front of the queue. if the queue is empty., an ThreadError is raised.
Method push ( item ) ---> {SyncQueue} Pushes an item at the end of the queue. if the @b item is not serializable., an CodeError is raised. : item = The item to be pushed
Method pushFront ( item ) ---> {SyncQueue} Pushes an item in front of the queue. if the @b item is not serializable., an CodeError is raised. : item = The item to be pushed
Method size (  ) ---> {SyncQueue} Returns: Number of elements currently held in the queue. | Returns the count of elements currently stored in the queue.
Method append ( element ) ---> {Table} Adds a row at the end of the current page in the table. if @b element is not an array with the same length of the table order., an ParamError is raised. : element = The row to be inserted.
Method back (  ) ---> {Table} Returns: The last item in the table. | Returns the last item in the table. if the table is empty., an AccessError is raised.
Method bidding ( column, Offer column (number or name)., Range of rows in which to perform the bidding. ) ---> {Table} Returns: The winning row, or the corresponding value in the offer column. | Performs a bidding between rows. if the table or ranges are empty., an AccessError is raised. : column = Betting column (number or name)., Offer column (number or name). = , Range of rows in which to perform the bidding. = 
Method choice ( func, Offer column (number or name)., Range of rows in which to perform the bidding. ) ---> {Table} Returns: The winning row, or the corresponding value in the offer column. | Performs a choice between rows. : func = Choice function or callable., Offer column (number or name). = , Range of rows in which to perform the bidding. = 
Method columnData ( column, New data to be stored as column data. ) ---> {Table} Returns: The column data for the given column, or nil is not found. | Returns the column data bound with a certain column : column = The column header name or numeric position., New data to be stored as column data. = 
Method columnPos ( column ) ---> {Table} Returns: The numeric position of the column or -1 if not found. | Returns the number of a given column name. : column = The column header name.
Method curPage (  ) ---> {Table} Returns: The currently active table page. | Gets the current table page.
Method find ( column, value, The name of the column to be extracted (target column; either name or 0 based number)., A default value to be returned if the row is not found. ) ---> {Table} Returns: An array (if the column is not specified) or an item. | Finds an element in a table. if the item is not found., an TableError is raised. : column = The column where to perform the search (either name or 0 based number)., value = The value to be found., The name of the column to be extracted (target column; either name or 0 based number). = , A default value to be returned if the row is not found. = 
Method first (  ) ---> {Table} Returns: An iterator. | Returns an iterator to the first element of the table.
Method front (  ) ---> {Table} Returns: The first item in the table. | Returns the first item in the table. if the table is empty., an AccessError is raised.
Method get ( row, The name of the column to be extracted (target column; either name or 0 based number). ) ---> {Table} Returns: An array (if the column is not specified) or an item. | Gets a row in a table. : row = a Row number., The name of the column to be extracted (target column; either name or 0 based number). = 
Method getColData ( If given, a number indicating the column of which to get the data. ) ---> {Table} Returns: An item (if @b id is given) or the vector of ordered column names. | Gets the clumn wide data associated with this table. : If given, a number indicating the column of which to get the data. = 
Method getHeader ( If given, a number indicating the column of which to get the name. ) ---> {Table} Returns: A string (if @b id is given) or the vector of ordered column names. | Gets the name of one header, or the list of header names. : If given, a number indicating the column of which to get the name. = 
Method getPage ( The page to be copied (defaults to the current page). ) ---> {Table} Returns: An array containing all the rows in the page. | Returns a copy of a given page in the table. : The page to be copied (defaults to the current page). = 
Method insert ( row, element ) ---> {Table} Insert a row in the table. if the row is not an array with the same length of the table order., an ParamError is raised. : row = The position where to insert the row., element = The row to be inserted.
Method insertColumn ( column, name, The column data for the new column., Default value for the newly inserted columns. ) ---> {Table} Inserts a column in a table. : column = The column name or position where to insert the column., name = The name of the new column., The column data for the new column. = , Default value for the newly inserted columns. = 
Method insertPage ( The position at which to insert the page., an array of rows (arrays), each of which having length equal to table order. ) ---> {Table} Inserts a new table page. : The position at which to insert the page. = , an array of rows (arrays), each of which having length equal to table order. = 
Method last (  ) ---> {Table} Returns: An iterator. | Returns an iterator to the last element of the table.
Method len (  ) ---> {Table} Returns: The rows in the current page of the table. | Returns the length of the table (the number of rows).
Method order (  ) ---> {Table} Returns: The number of the columns, and of the length of every array in the table. | Returns the order of the table (column count).
Method pageCount (  ) ---> {Table} Returns: Number of pages stored in this table. | Gets the number of pages in this table.
Method remove ( row ) ---> {Table} Returns: The removed array. | Remove a row from the table. if the position is out of range., an AccessError is raised. : row = The number of the row to be removed.
Method removeColumn ( column ) ---> {Table} Removes a column from a table. if the column is not found., an AccessError is raised. : column = The column name or position to be removed.
Method removePage ( pageId ) ---> {Table} Removes a page. : pageId = The page to be removed.
Method resetColumn ( column, The value that must be set to clear the rows (defaults to nil)., The row (or rows, if a range is given) to be set to @b value., The value that must be set in the given row(s) (defaults to true). ) ---> {Table} Applies a value on a column, eventually setting one or more rows to a different value. : column = Column name or number where the value must be applied., The value that must be set to clear the rows (defaults to nil). = , The row (or rows, if a range is given) to be set to @b value. = , The value that must be set in the given row(s) (defaults to true). = 
Method set ( row, element ) ---> {Table} Changes the value of a whole row. : row = a Row number., element = The new data to be placed at the given row.
Method setColumn ( column, name, The new column data. ) ---> {Table} Change the title or column data of a column. : column = The number of name of the column to be renamed., name = The new name of the column, or nil to let it unchanged., The new column data. = 
Method setHeader ( header ) ---> {Table} Sets the header of an empty table. if the table has already a valid header., an CodeError is raised. : header = An array of strings or future bindings that will be used as table header
Method setPage ( pageId ) ---> {Table} Sets current active page. : pageId = The number of the selected page.
Method accept ( Optional wait time. ) ---> {TCPServer} Returns: A new TCPSocket after a successful connection. | Waits for incoming connections. on system error., an NetError is raised. : Optional wait time. = 
Method bind ( addrOrService, If an address is given, service or port number (as a string) where to listen. ) ---> {TCPServer} Specify the address and port at which this server will be listening. on system error., an NetError is raised. : addrOrService = Address at which this server will be listening., If an address is given, service or port number (as a string) where to listen. = 
Method dispose (  ) ---> {TCPServer} Closes the service and disposes the resources,
Method close (  ) ---> {TCPSocket} Returns: False if timed out, true if succesful | Closes the socket. in case of underlying connection error during the closing phase., an NetError is raised.
Method closeRead (  ) ---> {TCPSocket} Returns: False if timed out, true if succesful | Closes a socket read side. in case of underlying connection error during the closing phase., an NetError is raised.
Method closeWrite (  ) ---> {TCPSocket} Returns: False if timed out, true if succesful | Closes a socket write side. in case of underlying connection error during the closing phase., an NetError is raised.
Method connect ( host, service ) ---> {TCPSocket} Returns: False if timed out, true if succesful | Connects this socket to a remote host. in case of underlying connection error during the closing phase., an NetError is raised. : host = Remote host to be connected to., service = Port or service name to be connected to.
Method isConnected (  ) ---> {TCPSocket} Returns: True if the socket is currently connected, false otherwise. | Check if this TCPSocket is currently connected with a remote host.
Method recv ( buffer, Maximum size in bytes to be read. ) ---> {TCPSocket} Returns: Amount of bytes actually read. | Reads incoming data. on network error., an NetError is raised. : buffer = A pre-allocated buffer to fill., Maximum size in bytes to be read. = 
Method send ( buffer, Amount of bytes to be sent., Begin position in the buffer (in bytes). ) ---> {TCPSocket} Returns: Number of bytes actually sent through the network layer. | Send data on the network connection. on network error,, an NetError is raised. : buffer = The buffer containing the data to be sent., Amount of bytes to be sent. = , Begin position in the buffer (in bytes). = 
Method get_buffer (  ) ---> {TextIter} Returns: the buffer. | Returns the GtkTextBuffer this iterator is associated with.
Method detach (  ) ---> {Thread} Disengage this threads from waits and garbage.
Method detached (  ) ---> {Thread} Returns: True if the thread has been detached, false otherwise. | Returns true if the target thread is detached.
Method getError (  ) ---> {Thread} Returns: nil if the thread terminated correctly, the error that caused thread | Get the error that cause a thread to terminate, if any. if the thread is not terminated or detached., an JoinError is raised.
Method getName (  ) ---> {Thread} Returns: A string containing the name of this thread (may be empty if not set). | Sets the symbolic name of this thread.
Method getReturn (  ) ---> {Thread} Returns: The value returned by the thread main fucntion. | Get the return value that was returned by the thread main function. if the thread is not terminated or detached., an JoinError is raised.
Method getSystemID (  ) ---> {Thread} Returns: A numeric thread ID. | Gets the system low level thread ID for this thread.
Method getThreadID (  ) ---> {Thread} Returns: A numeric thread ID. | Gets an unique numeric ID for this thread.
Method hadError (  ) ---> {Thread} Returns: True if the thread was terminated because of an uncaught raise, false if it | Returns true if the target thread was terminated because of an uncaught raised item. if the thread is not terminated or detached., an JoinError is raised.
Method join (  ) ---> {Thread} Returns: The exit value of the target thread. | Waits for a thread to terminate and returns its return value. if the thread didn't terminate correctly (i.e. raised an error)., an ThreadError is raised.
Method run (  ) ---> {Thread} Returns: A value that will be available for inspection in other threads. | Overloading hook that will hold the thread main function.
Method sameThread ( otherThread ) ---> {Thread} Returns: True if the system thread running in this Falcon objects are the same. | Returns true if the givevn thread is running the same thread as this object. : otherThread = Another thread to be checked against.
Method setName ( name ) ---> {Thread} Sets the symbolic name of this thread. : name = The new name for this thread.
Method start (  ) ---> {Thread} Launches the thread in a parallel environment. if the thread cannot be started., an ThreadError is raised.
Method stop (  ) ---> {Thread} Interrupts the target thread.
Method terminated (  ) ---> {Thread} Returns: True if the thread is terminated, false otherwise. | Returns true if the target thread is terminated.
Method toString (  ) ---> {Thread} Returns: A string containing anagraphic data for this thread. | Returns a string representation of this thread.
Method vwait ( structArray, Maximum timeout in seconds and fractions. ) ---> {Thread} Returns: nil if timeout expires, an ID in the @b structArray or the acquired | Wait for one or more synchronization strucures to become available. in case the thread receives a stop request., an InterrutpedError is raised. : structArray = Array of structures to wait for, Maximum timeout in seconds and fractions. = 
Method wait ( ..., Maximum timeout in seconds and fractions. ) ---> {Thread} Returns: nil if timeout expires, or the acquired item on success. | Wait for one or more synchronization strucures to become available. in case the thread receives a stop request., an InterrutpedError is raised. : ... = One or more synchronization structure to wait for., Maximum timeout in seconds and fractions. = 
Method getCurrent (  ) ---> {Threading} Returns: A new instance of @a Thread. | Returns a Thread object built on the current system thread.
Method getCurrentID (  ) ---> {Threading} Returns: A numeric ID uniquely identifying the current thread. | Returns the current thread ID.
Method sameThread ( thread ) ---> {Threading} Returns: True if @b thread is referencing the currently running thread. | Returns true if the given thread refers to the running system thread. : thread = Instance of the @a Thread class to be compared.
Method start ( callable ) ---> {Threading} Starts a new thread and instructs it to execute the given callable item. if the given object is not callable., an ThreadError is raised. : callable = A Falcon callable item.
Method vwait ( structArray, Maximum timeout in seconds and fractions. ) ---> {Threading} Returns: nil if timeout expires, an ID in the @b structArray or the acquired | Wait for one or more synchronization strucures to become available. in case the thread receives a stop request., an InterrutpedError is raised. : structArray = Array of structures to wait for, Maximum timeout in seconds and fractions. = 
Method wait ( ..., Maximum timeout in seconds and fractions. ) ---> {Threading} Returns: nil if timeout expires, or the acquired item on success. | Wait for one or more synchronization strucures to become available. in case the thread receives a stop request., an InterrutpedError is raised. : ... = One or more synchronization structure to wait for., Maximum timeout in seconds and fractions. = 
Method add ( timestamp ) ---> {TimeStamp} Returns: itself. | Adds a date value to this value (altering it). : timestamp = A timestamp to add
Method changeZone ( zone ) ---> {TimeStamp} Change the time zone in this timestamp, maintaing the same absolute value. : zone = The new time zone.
Method compare ( timestamp ) ---> {TimeStamp} Returns: -1, 0 or 1. | Compare another TimeStamp against this one. : timestamp = The TimeStamp to be compared.
Method currentTime (  ) ---> {TimeStamp} Fills this item with current time.
Method dayOfWeek (  ) ---> {TimeStamp} Returns: A number representing a day in the week. | Returns the weekday in which this TimeStamp falls.
Method dayOfYear (  ) ---> {TimeStamp} Returns: A number of days in the year. | Returns the days passed since the beginning of the year in this TimeStamp
Method distance ( timestamp ) ---> {TimeStamp} Returns: itself | Determines the distance between this item and a target timestamp. : timestamp = The timestamp from which to calculate the distance.
Method fromLongFormat (  ) ---> {TimeStamp} Sets this date using a compressed opaque "long format" data.
Method fromRFC2822 ( sTimestamp ) ---> {TimeStamp} Returns: True on success, false on failure. | Sets this date from a RFC 2822 string. : sTimestamp = A string containing a date in RFC 2822 format.
Method isLeapYear (  ) ---> {TimeStamp} Returns: True if this timestamp is in a leap year, false otherwise. | Checks if the year in this TimeStamp is a LeapYear.
Method isValid (  ) ---> {TimeStamp} Returns: True if this timestamp represents a valid moment in time. | Checks the validity of this TimeStamp.
Method toLongFormat (  ) ---> {TimeStamp} Returns: A date in an opaque "long format". | Returns a compressed date representation.
Method toRFC2822 (  ) ---> {TimeStamp} Returns: A string with this timestamp converted, or nil if this TimeStamp is not valid. | Format this TimeStamp in RFC 2822 format.
Method toString ( Date formatting pattern in @b strftime format. ) ---> {TimeStamp} Returns: The formatted timestamp. | Converts the current timestamp to a string. : Date formatting pattern in @b strftime format. = 
Method describe ( tz ) ---> {TimeZone} Returns: A timezone name. | Returns a descriptive string naming the required timezone. : tz = A time zone code.
Method getDisplacement ( tz ) ---> {TimeZone} Returns: A relative time distance in minutes. | Returns the distance in minutes from the GMT time of a given timezone : tz = A time zone code.
Method getLocal (  ) ---> {TimeZone} Returns: A time zone code coresponding to the system local timezone. | Return local time zone code.
Method hasCurrent (  ) ---> {Tokenizer} Returns: True if a token is now available, false otherwise. | Return true if the tokenizer has a current token.
Method next (  ) ---> {Tokenizer} Returns: True if a new token is now available, false otherwise. | Advances the tokenizer up to the next token. if called on an unprepared Tokenizer., an CodeError is raised.
Method nextToken (  ) ---> {Tokenizer} Returns: A string or nil at the end of the tokenization. | Returns the next token from the tokenizer if called on an unprepared Tokenizer., an CodeError is raised.
Method parse ( source ) ---> {Tokenizer} Changes or set the source data for this tokenizer. on errors on the underlying stream., an IoError is raised. : source = A string or a stream to be used as a source for the tokenizer.
Method rewind (  ) ---> {Tokenizer} Resets the status of the tokenizer. if the tokenizer is tokenizing a non-rewindable stream., an IoError is raised.
Method token (  ) ---> {Tokenizer} Returns: True if a new token is now available, false otherwise. | Get the current token. if called on an unprepared Tokenizer, or before next()., an CodeError is raised.
Method ByteSwappedUNICODE ( swap ) ---> {TTF} Set default UNICODE byte swapping mode. : swap = Swapping mode.
Method Compiled_Version (  ) ---> {TTF} Returns: a three element array containing the major, minor and fix versions. | Determine the version used to compile this SDL TTF module.
Method Init (  ) ---> {TTF} Initialize the TTF module on initialization failure, an SDLError is raised.
Method InitAuto (  ) ---> {TTF} Initialize the TTF module and prepares for automatic de-initialization. on initialization failure, an SDLError is raised.
Method Linked_Version (  ) ---> {TTF} Returns: a three element array containing the major, minor and fix versions. | Determine the version of the library that is currently linked.
Method OpenFont ( fontname, ptsize, Face index in the file. ) ---> {TTF} Returns: An instance of class @a TTFFont. | Open a font file. if the font cannot be loaded., an SDLError is raised. : fontname = File where the font is stored., ptsize = Size of the font that must be loaded., Face index in the file. = 
Method Quit (  ) ---> {TTF} Turns off TTF system.
Method WasInit (  ) ---> {TTF} Returns: True if the system was initialized, false otherwise. | Detects if the TTF subsystem was initialized.
Method FontAscent (  ) ---> {TTFFont} Returns: Height of the ascent, in pixels. | Get the maximum pixel ascent of all glyphs of the loaded font.
Method FontDescent (  ) ---> {TTFFont} Returns: Height of the descent, in pixels. | Get the maximum pixel descent of all glyphs of the loaded font.
Method FontFaceFamilyName (  ) ---> {TTFFont} Returns: A string containing the family name of this font. | Determine the family name of this font.
Method FontFaceIsFixedWidth (  ) ---> {TTFFont} Returns: True if the font is fixed width, false otherise. | Determines wether this font has fixed width or not.
Method FontFaces (  ) ---> {TTFFont} Returns: Number of faces stored in this font. | Get the number of faces ("sub-fonts") available in the loaded font.
Method FontFaceStyleName (  ) ---> {TTFFont} Returns: A string containing the style name, or @b nil if not available. | Determine the face style name of this font.
Method FontHeight (  ) ---> {TTFFont} Returns: Height of the font, in pixels. | Get the maximum pixel height of all glyphs of the loaded font.
Method FontLineSkip (  ) ---> {TTFFont} Returns: Recommended height, in pixels. | Get the recommended pixel height of a rendered line of text of the loaded font.
Method GetFontStyle (  ) ---> {TTFFont} Returns: Style currently active on this font. | Get font render style
Method GlyphMetrics ( charId, An instance of class @a TTFMetrics (or providing the same properties). ) ---> {TTFFont} Returns: An instance of class @a TTFMetrics or nil. | Returns the metrics of a determined gliph in this font. : charId = the ID of the caracter of which the gliph are required., An instance of class @a TTFMetrics (or providing the same properties). = 
Method Render_Blended ( string, color ) ---> {TTFFont} Returns: an @a SDLSurface containing the rendered string. | Renders text on a final SDLSurface instance (medium). on failure., an SDLError is raised. : string = A string or a character to be rendered., color = an @a SDLColor instance containing the color of the string.
Method Render_Shaded ( string, color, bgcolor ) ---> {TTFFont} Returns: an @a SDLSurface containing the rendered string. | Renders text on a final SDLSurface instance (medium). on failure., an SDLError is raised. : string = A string or a character to be rendered., color = an @a SDLColor instance containing the color of the string., bgcolor = an @a SDLColor instance containing the color of the background.
Method Render_Solid ( string, color ) ---> {TTFFont} Returns: an @a SDLSurface containing the rendered string. | Renders text on a final SDLSurface instance (fast). on failure., an SDLError is raised. : string = A string or a character to be rendered., color = an @a SDLColor instance containing the color of the string.
Method SetFontStyle ( style ) ---> {TTFFont} Set the rendering style of the loaded font. : style = Render style of this font.
Method SizeText ( string, An instance of class @a TTFMetrics (or providing the same properties). ) ---> {TTFFont} Returns: An instance of class @a TTFMetrics. | Determine rendering size of a text as it would be rendere on ttf. : string = A string to be rendered., An instance of class @a TTFMetrics (or providing the same properties). = 
Method broadcast (  ) ---> {UDPSocket} Activates broadcasting and multicasting abilities on this UDP socket. on system error., an NetError is raised.
Method recv ( buffer, Maximum size in bytes to be read. ) ---> {UDPSocket} Returns: the amount of bytes actually read. | Reads incoming data. on network error., an NetError is raised. : buffer = A pre-allocated buffer to fill., Maximum size in bytes to be read. = 
Method sendTo ( host, service, buffer, Amount of bytes from the buffer to be sent., Begin position in the buffer. ) ---> {UDPSocket} Sends a datagram to a given address. on network error., an NetError is raised. : host = Remote host where to send the datagram., service = Remote service or port number where to send the datagram., buffer = The buffer to be sent., Amount of bytes from the buffer to be sent. = , Begin position in the buffer. = 
Method open (  ) ---> {Uploaded} Returns: A Falcon stream. | Opens a read-only Falcon Stream pointing to the uploaed file. if the storage property is not a valid filename., an TypeError is raised.
Method read (  ) ---> {Uploaded} Returns: True if the file was actually read, false if it was already stored in memory. | Reads an uploaded file from the temporary storage into memory. if the storage property is not a valid filename., an TypeError is raised.
Method store ( path ) ---> {Uploaded} Stores the uploaded data into a file. if the storage property is not a valid filename., an TypeError is raised. : path = The location where to store the file, or an open stream.
Method assert ( data ) ---> {VMSlot} Creates a message assertion on this certain message slot. : data = The value of the assertion.
Method broadcast ( ... ) ---> {VMSlot} Performs broadcast on this slot. : ... = Extra parameters to be sent to listeners.
Method first (  ) ---> {VMSlot} Returns: An iterator to the first subscriber of this message slot. | Gets an iterator to the first subscriber.
Method getAssert ( If given, instead of raising in case the essartion is not found, return this item. ) ---> {VMSlot} Gets the item asserted for this slot. if the item has not an assertion and a default is not given., an MessageError is raised. : If given, instead of raising in case the essartion is not found, return this item. = 
Method getEvent ( event, Pass true to create the event if it is not existing. ) ---> {VMSlot} Returns: a VMSlot representing the given event in this slot, or @b nil | Returns an event (as a child VMSlot) handled by this slot. : event = A string representing the event name., Pass true to create the event if it is not existing. = 
Method last (  ) ---> {VMSlot} Returns: An iterator to the last subscriber of this message slot. | Gets an iterator to the last subscriber.
Method name (  ) ---> {VMSlot} Returns: The name of the event bind to this slot (as a string). | Returns the name of this slot
Method prepend ( handler ) ---> {VMSlot} Registers a callback handler that will be called before the others. : handler = The callable that must be unregistered.
Method register ( event, handler ) ---> {VMSlot} Registers a listener for a specific event. : event = A string representing the event name., handler = Handler to associate to this event.
Method retract (  ) ---> {VMSlot} Removes a previous assertion on a message.
Method send ( event, ... ) ---> {VMSlot} Performs an event generation on this slot. : event = Event name., ... = Extra parameters to be sent to listeners.
Method subscribe ( handler, Set to true to have this handler called before the previous ones. ) ---> {VMSlot} Registers a callback handler on this slot. : handler = A callable item or instance providing callback support., Set to true to have this handler called before the previous ones. = 
Method unsubscribe ( handler ) ---> {VMSlot} Unregisters a callback handler from this slot. if the @b handler is not registered with this slot., an CodeError is raised. : handler = The callable that must be unregistered.
Method release (  ) ---> {Waitable} Releases a structure acquired by a waiting function.
Method getAppData ( Application name for the specific data. ) ---> {Wopi} Gets global, persistent web application data. : Application name for the specific data. = 
Method getPData ( id, Function to create the data if it's not ready. ) ---> {Wopi} Returns: The previously saved item, or nil if not found. | Gets local per-thread persistent data : id = Unique ID for persistent data., Function to create the data if it's not ready. = 
Method sendTemplate ( stream, Data for template conversion., Work in memory and return the result instead sending it. ) ---> {Wopi} Returns: The configured contents of the file if @b inMemory is true. | Configures template file and possibly sends it to the remote end. on error reading the file., an IoError is raised. : stream = A Falcon stream opened for reading (or a memory string stream)., Data for template conversion. = , Work in memory and return the result instead sending it. = 
Method setAppData ( data, Application name for the specific data. ) ---> {Wopi} Returns: True if the synchronization with the application | Sets global, persistent web application data. : data = The data to be saved (in a dictionary), Application name for the specific data. = 
Method setPData ( id, item ) ---> {Wopi} Gets local per-thread persistent data. : id = Unique ID for persistent data., item = A data to be stored persistently.
Method compress ( buffer ) ---> {ZLib} Returns: A compressed buffer (in a byte-wide MemBuf). | Compress a buffer (classwide method). on compression error., an ZLibError is raised. : buffer = A string or a MemBuf to be compressed.
Method compressText ( text ) ---> {ZLib} Returns: A compressed buffer (in a byte-wide MemBuf). | Compress a text string (classwide method). on compression error., an ZLibError is raised. : text = A string containing a text be compressed.
Method uncompress ( buffer ) ---> {ZLib} Returns: A MemBuf containing the uncompressed data. | Uncompress a buffer (classwide method). on decompression error., an ZLibError is raised. : buffer = A string or MemBuf containing previusly compressed data.
Method uncompressText ( buffer ) ---> {ZLib} Returns: A uncompressed string. | Uncompress a buffer into a text (classwide method). on decompression error., an ZLibError is raised. : buffer = A MemBuf or string containing previusly compressed text data.


keyword args
keyword break
keyword case
keyword catch
keyword const
keyword continue
keyword directive
keyword dropping
keyword elif
keyword else
keyword enum
keyword forfirst
keyword forlast
keyword formiddle
keyword innerfunc
keyword launch
keyword macro
keyword notin
keyword object
keyword raise
keyword return
keyword scriptName
keyword scriptPath
keyword self
keyword static
keyword switch
keyword while
keyword and
keyword as
keyword class
keyword def
keyword default
keyword end
keyword export
keyword for
keyword from
keyword function
keyword global
keyword if
keyword import
keyword in
keyword init
keyword load
keyword loop
keyword not
keyword or
keyword Path
keyword select
keyword set
keyword to
keyword try
keyword URI

id false
id nil
id true

Preprocessor # | For UNIX shells, indicates to shell that it is the Falcon interpreter that is to run the script
