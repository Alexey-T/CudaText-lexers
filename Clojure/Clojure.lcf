object SyntAnal28: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Brackets'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clRed
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id standard'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = ':Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id complex'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = '.Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = #39'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Current block'
      Font.Charset = RUSSIAN_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 13369046
      FormatType = ftColor
      BorderTypeLeft = blSolid
      BorderColorLeft = clGray
      BorderTypeTop = blSolid
      BorderColorTop = clGray
      BorderTypeRight = blSolid
      BorderColorRight = clGray
      BorderTypeBottom = blSolid
      BorderColorBottom = clGray
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = ';.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol bracket'
      StyleName = 'Brackets'
      TokenType = 6
      Expression = '(\#_?)? [\(\)\[\]\{\}]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(?s)"(\\\\|\\"|.)*?("|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Number'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+\.\d+ |'#13#10'\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id complex'
      StyleName = 'Id complex'
      TokenType = 2
      Expression = '(?r)\w+\.[\w\.\-]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '(?r)\w[\w-\?\!]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = '.Id'
      StyleName = '.Id'
      TokenType = 2
      Expression = '(?r)\.\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = #39'Id'
      StyleName = #39'Id'
      TokenType = 2
      Expression = '(?r)'#39'[\w\-\.\?]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = ':Id'
      StyleName = ':Id'
      TokenType = 2
      Expression = '(?r)\:[\w\-]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\+\-\*=\.\'#39':\#\?@&`%\^<>/=\^\$~]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Char'
      StyleName = 'String'
      TokenType = 4
      Expression = '\\\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id standard'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'accessor'
            'aclone'
            'add-classpath'
            'add-watch'
            'agent'
            'agent-error'
            'agent-errors'
            'aget'
            'alength'
            'alias'
            'all-ns'
            'alter'
            'alter-meta!'
            'alter-var-root'
            'amap'
            'ancestors'
            'and'
            'apply'
            'areduce'
            'ArrayChunk'
            'array-map'
            'aset'
            'aset-boolean'
            'aset-byte'
            'aset-char'
            'aset-double'
            'aset-float'
            'aset-int'
            'aset-long'
            'aset-short'
            'assert'
            'assoc'
            'assoc!'
            'associative?'
            'assoc-in'
            'atom'
            'await'
            'await-for'
            'bases'
            'bean'
            'bigdec'
            'bigint'
            'biginteger'
            'binding'
            'bit-and'
            'bit-and-not'
            'bit-clear'
            'bit-flip'
            'bit-not'
            'bit-or'
            'bit-set'
            'bit-shift-left'
            'bit-shift-right'
            'bit-test'
            'bit-xor'
            'boolean'
            'boolean-array'
            'booleans'
            'bound?'
            'bound-fn'
            'butlast'
            'byte'
            'byte-array'
            'bytes'
            'case'
            'cast'
            'char'
            'char?'
            'char-array'
            'char-escape-string'
            'char-name-string'
            'chars'
            'class'
            'class?'
            'clear-agent-errors'
            'clojure-version'
            'coll?'
            'command-line-args'
            'comment'
            'commute'
            'comp'
            'comparator'
            'compare'
            'compare-and-set!'
            'compile'
            'compile-files'
            'compile-path'
            'compiler-options'
            'complement'
            'concat'
            'cond'
            'condp'
            'conj'
            'conj!'
            'cons'
            'constantly'
            'construct-proxy'
            'contains?'
            'count'
            'counted?'
            'create-ns'
            'create-struct'
            'cycle'
            'data-readers'
            'dec'
            'decimal?'
            'declare'
            'def'
            'default-data-readers'
            'definline'
            'defmacro'
            'defmethod'
            'defmulti'
            'defn'
            'defn-'
            'defonce'
            'defprotocol'
            'defrecord'
            'defstruct'
            'deftype'
            'delay'
            'delay?'
            'deliver'
            'denominator'
            'deref'
            'derive'
            'descendants'
            'disj'
            'disj!'
            'dissoc'
            'dissoc!'
            'distinct'
            'distinct?'
            'do'
            'doall'
            'dorun'
            'doseq'
            'dosync'
            'dotimes'
            'doto'
            'double'
            'double-array'
            'doubles'
            'drop'
            'drop-last'
            'drop-while'
            'e'
            'empty'
            'empty?'
            'ensure'
            'enumeration-seq'
            'err'
            'error-handler'
            'error-mode'
            'eval'
            'even?'
            'every?'
            'every-pred'
            'ex-data'
            'ex-info'
            'extend'
            'extenders'
            'extend-protocol'
            'extends?'
            'extend-type'
            'false'
            'false?'
            'ffirst'
            'file'
            'file-seq'
            'filter'
            'filterv'
            'find'
            'find-keyword'
            'find-ns'
            'find-var'
            'first'
            'flatten'
            'float'
            'float?'
            'float-array'
            'floats'
            'flush'
            'flush-on-newline'
            'fn'
            'fn?'
            'fnext'
            'fnil'
            'for'
            'force'
            'format'
            'frequencies'
            'future'
            'future?'
            'future-call'
            'future-cancel'
            'future-cancelled?'
            'future-done?'
            'gen-class'
            'gen-interface'
            'gensym'
            'get'
            'get-in'
            'get-method'
            'get-proxy-class'
            'get-thread-bindings'
            'get-validator'
            'group-by'
            'hash'
            'hash-map'
            'hash-set'
            'identical?'
            'identity'
            'if'
            'if-let'
            'ifn?'
            'if-not'
            'import'
            'in'
            'inc'
            'init-proxy'
            'in-ns'
            'instance?'
            'int'
            'int-array'
            'integer?'
            'interleave'
            'intern'
            'interpose'
            'into'
            'into-array'
            'ints'
            'io!'
            'isa?'
            'iterate'
            'iterator-seq'
            'juxt'
            'keep'
            'keep-indexed'
            'key'
            'keys'
            'keyword'
            'keyword?'
            'last'
            'lazy-cat'
            'lazy-seq'
            'let'
            'letfn'
            'line-seq'
            'list'
            'list?'
            'load'
            'loaded-libs'
            'load-file'
            'load-reader'
            'load-string'
            'locking'
            'long'
            'long-array'
            'longs'
            'loop'
            'macroexpand'
            'macroexpand-1'
            'make-array'
            'make-hierarchy'
            'map'
            'map?'
            'mapcat'
            'map-indexed'
            'mapv'
            'max'
            'max-key'
            'memfn'
            'memoize'
            'merge'
            'merge-with'
            'meta'
            'methods'
            'min'
            'min-key'
            'mod'
            'monitor-enter'
            'name'
            'namespace'
            'namespace-munge'
            'neg?'
            'newline'
            'next'
            'nfirst'
            'nil?'
            'nnext'
            'not'
            'not='
            'not-any?'
            'not-empty'
            'not-every?'
            'ns'
            'ns-aliases'
            'ns-imports'
            'ns-interns'
            'ns-map'
            'ns-name'
            'ns-publics'
            'ns-refers'
            'ns-resolve'
            'ns-unalias'
            'ns-unmap'
            'nth'
            'nthnext'
            'nthrest'
            'num'
            'number?'
            'numerator'
            'object-array'
            'odd?'
            'or'
            'out'
            'parents'
            'partial'
            'partition'
            'partition-all'
            'partition-by'
            'pcalls'
            'peek'
            'persistent!'
            'pmap'
            'pop'
            'pop!'
            'pop-thread-bindings'
            'pos?'
            'pr'
            'prefer-method'
            'prefers'
            'print'
            'print-dup'
            'printf'
            'print-length'
            'print-level'
            'println'
            'println-str'
            'print-meta'
            'print-readably'
            'print-str'
            'prn'
            'prn-str'
            'promise'
            'proxy'
            'proxy-mappings'
            'proxy-super'
            'pr-str'
            'push-thread-bindings'
            'pvalues'
            'quot'
            'quote'
            'rand'
            'rand-int'
            'rand-nth'
            'range'
            'ratio?'
            'rational?'
            'rationalize'
            'read'
            'read-eval'
            'read-line'
            'read-string'
            'realized?'
            'recur'
            'reduce'
            'reduce-kv'
            'reductions'
            'ref'
            'refer'
            'refer-clojure'
            'ref-history-count'
            're-find'
            'ref-max-history'
            'ref-min-history'
            'ref-set'
            're-groups'
            'reify'
            'release-pending-sends'
            'rem'
            're-matcher'
            're-matches'
            'remove'
            'remove-all-methods'
            'remove-method'
            'remove-ns'
            'remove-watch'
            're-pattern'
            'repeat'
            'repeatedly'
            'replace'
            'replicate'
            'require'
            're-seq'
            'reset!'
            'reset-meta!'
            'resolve'
            'rest'
            'restart-agent'
            'resultset-seq'
            'reverse'
            'reversible?'
            'rseq'
            'rsubseq'
            'satisfies?'
            'second'
            'select-keys'
            'send'
            'send-off'
            'seq'
            'seq?'
            'seque'
            'sequence'
            'sequential?'
            'set'
            'set?'
            'set-error-handler!'
            'set-error-mode!'
            'set-validator!'
            'short'
            'short-array'
            'shorts'
            'shuffle'
            'shutdown-agents'
            'slurp'
            'some'
            'some-fn'
            'sort'
            'sort-by'
            'sorted?'
            'sorted-map'
            'sorted-map-by'
            'sorted-set'
            'sorted-set-by'
            'special-symbol?'
            'spit'
            'split-at'
            'split-with'
            'str'
            'string?'
            'struct'
            'struct-map'
            'subs'
            'subseq'
            'subvec'
            'supers'
            'swap!'
            'symbol'
            'symbol?'
            'sync'
            'take'
            'take-last'
            'take-nth'
            'take-while'
            'test'
            'the-ns'
            'thread-bound?'
            'throw'
            'time'
            'to-array'
            'to-array-2d'
            'trampoline'
            'transient'
            'tree-seq'
            'true'
            'true?'
            'try'
            'type'
            'unchecked-add'
            'unchecked-add-int'
            'unchecked-byte'
            'unchecked-char'
            'unchecked-dec'
            'unchecked-dec-int'
            'unchecked-divide-int'
            'unchecked-double'
            'unchecked-float'
            'unchecked-inc'
            'unchecked-inc-int'
            'unchecked-int'
            'unchecked-long'
            'unchecked-math'
            'unchecked-multiply'
            'unchecked-multiply-int'
            'unchecked-negate'
            'unchecked-negate-int'
            'unchecked-remainder-int'
            'unchecked-short'
            'unchecked-subtract'
            'unchecked-subtract-int'
            'underive'
            'update-in'
            'update-proxy'
            'use'
            'val'
            'vals'
            'var'
            'var?'
            'var-get'
            'var-set'
            'vary-meta'
            'vec'
            'Vec'
            'VecNode'
            'VecSeq'
            'vector'
            'vector?'
            'vector-of'
            'warn-on-reflection'
            'when'
            'when-first'
            'when-let'
            'when-not'
            'while'
            'with-bindings'
            'with-in-str'
            'with-local-vars'
            'with-meta'
            'with-open'
            'with-out-str'
            'with-precision'
            'with-redefs'
            'with-redefs-fn'
            'xml-seq'
            'zero?'
            'zipmap')
          TokenTypes = 4
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = '('
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '(')
          TokenTypes = 64
        end>
      BlockEnd = ')'
      NameFmt = '%s-1'
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      CollapseFmt = '%s-1 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = ')'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            ')')
          TokenTypes = 64
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    ';Comment'
    '(ns clojure.test-helper'
    '  (:use clojure.test))'
    ''
    '(let [nl (System/getProperty "line.separator")] '
    '  (defn platform-newlines [s] (.replace s "\n" nl)))'
    ''
    '\char, :id, '#39'id, .id')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Number'
    'Brackets')
  Extentions = 'clj'
  LexerName = 'Clojure'
  Notes.Strings = (
    'Author: Alexey (SynWrite)'
    'Ref: www.clojure.org'
    '(must-see "test_clojure\predicates.clj")')
  LineComment = ';'
  AlwaysSyncBlockAnal = True
  Charset = DEFAULT_CHARSET
end
