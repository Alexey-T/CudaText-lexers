object SyntAnal13: TLibSyntAnalyzer
  Formats = <
     item
      DisplayName = 'Default'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
      VertAlignment = vaTop
      FormatType = ftCustomFont
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Reserved word'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 5263440
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 9830400
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Directive'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 13458524
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 11152074
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Current block'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 12517376
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
      BgColor = 16114144
      BorderColorLeft = clGray
      BorderColorTop = clGray
      BorderColorRight = clGray
      BorderColorBottom = clGray
    end>
  TokenRules = <
    item
      DisplayName = 'Comment 1'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment3'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '^\;.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 9
      Expression = '\#\s*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '"(\\"|\\\\|.)*?("|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol2'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;:]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[;:,%\(\)\[\]\\@=\*>\+!\.\^\$]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Ident'
      StyleName = 'Default'
      TokenType = 2
      Expression = '[a-z_%]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 7
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 6
      Expression = 
        '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
        'hout exp. dot is required'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Attributes'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abs'
            'at'
            'clear'
            'crom'
            'isrom'
            'load'
            'max_endaddress'
            'max_size'
            'min_endaddress'
            'min_size'
            'nochecksum'
            'noclear'
            'noload'
            'pad'
            'rom'
            'rom_copy'
            'rom_nocopy')
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Expressions'
      StyleName = 'Reserved word'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'absolute'
            'addr'
            'align'
            'endaddr'
            'error'
            'fill'
            'final'
            'isdefined'
            'length'
            'max'
            'memaddr'
            'memendaddr'
            'memsizeof'
            'min'
            'origin'
            'pack_or_align'
            'pad'
            'sizeof')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Options'
      StyleName = 'Preprocessor'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'constants'
            'defaults'
            'memory'
            'option'
            'sec'
            'sections')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Ghs const'
      StyleName = 'Directive'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '__ghs_after_romcopy'
            '__ghs_main'
            '__ghs_rambootcodeend'
            '__ghs_rambootcodestart'
            '__ghs_ramend'
            '__ghs_ramstart'
            '__ghs_rombootcodeend'
            '__ghs_rombootcodestart'
            '__ghs_romend'
            '__ghs_romstart'
            'alt_reset'
            'alt_vector'
            'dram_memory'
            'dram_reset'
            'dram_rsvd1'
            'dram_rsvd2'
            'dram_rsvd3'
            'dram_vector'
            'eventlog_reserve'
            'ext_rom'
            'ext_rom_rsvd1'
            'ext_rom_rsvd2'
            'ext_rom_rsvd3'
            'flash_memory'
            'flash_rsvd1'
            'flash_rsvd2'
            'flash_rsvd3'
            'free_mem_reserve'
            'heap_reserve'
            'istack_reserve'
            'nfspool_reserve'
            'sda_memory'
            'sram_memory'
            'sram_rsvd1'
            'sram_rsvd2'
            'sram_rsvd3'
            'stack_memory'
            'stack_reserve'
            'zda_memory'
            'zda_rsvd1'
            'zda_rsvd2'
            'zda_rsvd3'
            'zero_memory')
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Sections'
      StyleName = 'Preprocessor'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'boottext'
            'bss'
            'data'
            'data1'
            'data2'
            'eventlog'
            'fixaddr'
            'fixtype'
            'free_mem'
            'heap'
            'inmemtm'
            'intercall'
            'interfunc'
            'nfspool'
            'picbase'
            'pidbase'
            'PPC.EMB.sbss0'
            'PPC.EMB.sdata0'
            'profile'
            'reset'
            'robase'
            'rodata'
            'rodata1'
            'rosdata'
            'rozdata'
            'sbss'
            'sdabase'
            'sdata'
            'sdata2'
            'secinfo'
            'stack'
            'startup'
            'syscall'
            'tdata'
            'text'
            'vector'
            'vletext'
            'zbss'
            'zdata')
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Pack Sections'
      StyleName = 'Directive'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            '.CROM.data'
            '.CROM.PPC.EMB.sbss0'
            '.CROM.PPC.EMB.sdata0'
            '.CROM.profile'
            '.CROM.reset'
            '.CROM.rosdata'
            '.CROM.rozdata'
            '.CROM.sdata'
            '.CROM.syscall'
            '.CROM.tdata'
            '.CROM.text'
            '.CROM.vector'
            '.CROM.vletext'
            '.CROM.zdata'
            '.flashdevchipbase'
            '.flashdevend'
            '.flashdevstart'
            '.istack'
            '.ROM.boottext'
            '.ROM.data'
            '.ROM.PPC.EMB.sbss0'
            '.ROM.PPC.EMB.sdata0'
            '.ROM.profile'
            '.ROM.reset'
            '.ROM.rosdata'
            '.ROM.rozdata'
            '.ROM.sdata'
            '.ROM.syscall'
            '.ROM.tdata'
            '.ROM.text'
            '.ROM.vector'
            '.ROM.vletext'
            '.ROM.zdata')
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = '{'
      StyleName = 'Current block'
      ConditionList = <
        item
          TagList.Strings = (
            '{')
          TokenTypes = 8
        end>
      BlockEnd = '}'
      DisplayInTree = False
      DynHighlight = dhBound
      HighlightPos = cpRange
      DynSelectMin = True
      DrawStaple = True
      CollapseFmt = '{ ... }'
      Pen.Color = clSilver
      Pen.Style = psDot
      UseCustomPen = True
      IgnoreAsParent = False
      AutoCloseMode = acmCloseNearest
      AutoCloseText = '}'
    end
    item
      DisplayName = '}'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            '}')
          TokenTypes = 8
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment'
      BlockName = 'Block comment'
      NotParent = True
      AlwaysEnabled = True
      ConditionList = <
        item
          TokenTypes = 2
        end>
      DisplayInTree = False
      HighlightPos = cpBound
      CollapseFmt = '{ ... }'
      GrammaRuleName = 'comments'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Block comment end'
      BlockName = 'Block comment'
      BlockType = btRangeEnd
      ConditionList = <
        item
          CondType = tcNotEqual
          TokenTypes = 2
          IgnoreCase = True
        end>
      BlockOffset = 1
      HighlightPos = cpBound
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    'OPTION("-u __ghs_reset_handler")'
    'DEFAULTS {'
    ''
    '    heap_reserve = 1M'
    '    stack_reserve = 512K'
    ''
    '}'
    ''
    'SECTIONS'
    '{'
    
      '     //.reset                                         ABS : > dr' +
      'am_reset'#9
    ''
    '//'
    '// RAM SECTIONS'
    '//'
    '    .PPC.EMB.sdata0 '#9'        '#9'ABS : > dram_memory'
    '    .PPC.EMB.sbss0            CLEAR ABS : > .'
    '   '
    '    .sdabase '#9#9'       '#9#9'ALIGN(16): > dram_memory'#9
    '    .sdata '#9#9#9#9#9#9#9#9': > .'
    '    .sbss '#9#9#9#9#9#9#9#9': > .'
    '    .data '#9#9#9#9#9#9#9#9': > .'
    '    .bss '#9#9#9#9#9#9#9#9': > .'
    '    .ghcovfz '#9#9#9#9#9'  CLEAR : > .'
    '    .ghcovcz '#9#9#9#9#9'  CLEAR'#9': > .'
    '    .heap                  ALIGN(16) PAD(heap_reserve)  : > .   '
    '    .stack                 ALIGN(16) PAD(stack_reserve) : > .'
    ''
    '//'
    '// ROM SECTIONS'
    '//'
    ''
    '    .text'#9#9#9#9#9#9#9': > flash_memory'
    '    .vletext'#9#9#9#9#9#9': > .'
    '    .syscall'#9#9#9#9#9#9': > .'
    ''
    '    .rodata'#9#9' '#9#9#9#9#9': > .'
    '    .toc '#9#9#9#9'SHFLAGS(2)'#9': > .'
    '    .sdata2 '#9#9#9#9#9#9': > .'
    '    .opd '#9#9#9#9' SHFLAGS(2)'#9': > .'
    ''
    '    .secinfo '#9#9#9#9#9#9': > .'
    '    .fixaddr '#9#9#9#9#9#9': > .'
    '    .fixtype '#9#9#9#9#9#9': > .'
    ''
    '    .CROM.PPC.EMB.sdata0 '#9'  CROM(.PPC.EMB.sdata0) : > .'
    '    .CROM.sdata  '#9'            '#9'   CROM(.sdata) : > .'
    '    .CROM.data '#9'            '#9#9'    CROM(.data) : > .'
    ''
    '//'
    '// These special symbols mark the bounds of RAM and ROM memory.'
    '// They are used by the MULTI debugger.'
    '//'
    '    __ghs_ramstart  = MEMADDR(dram_rsvd1);'
    '    __ghs_ramend    = MEMENDADDR(dram_memory);'
    '    __ghs_romstart  = MEMADDR(flash_rsvd1);'
    '    __ghs_romend    = MEMENDADDR(flash_rsvd2);'
    ''
    '//'
    
      '// These special symbols mark the bounds of RAM and ROM images o' +
      'f boot code.'
    
      '// They are used by the GHS startup code (_start and __ghs_ind_c' +
      'rt0).'
    '//'
    '    __ghs_rambootcodestart  = 0;'
    '    __ghs_rambootcodeend    = 0;'
    '    __ghs_rombootcodestart  = ADDR(.text);'
    '    __ghs_rombootcodeend    = ENDADDR(.fixtype);'
    '}')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Identifier'
    'Symbol'
    'String'
    'Integer const'
    'Float const'
    'Hex const'
    'Char const'
    'Preprocessor')
  Extentions = 'ld'
  LexerName = 'GHS Linker'
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
