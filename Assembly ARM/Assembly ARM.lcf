object SyntAnal24: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Id command'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clPurple
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id register'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlue
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Label equal sign'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clOlive
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Directive'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = 215
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Preproc'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clFuchsia
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(@|;|//) .*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)/\*.*?(\*/|\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '-? (\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'-? \d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\#? \-? 0x[0-9a-f_]+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\#? \-? \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label'
      StyleName = 'Label'
      Expression = '\w[\w\\]+:      '
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Label='
      StyleName = 'Label equal sign'
      TokenType = 7
      Expression = '=\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id register'
      StyleName = 'Id register'
      TokenType = 2
      Expression = 
        '([xw][0-9]|[xw]1[0-9]||[xw]2[0-9]|[wx]30|wzr|xzr|wsp|fpsr|fpcr|[' +
        'rcp]1[0-5]|[rcp][0-9]|a[1-4]|v[1-8]|sl|sb|fp|ip|sp|lr|(c|s)psr(_' +
        'c)?|pc|[sd]3[0-1]|[sd][12][0-9]|[sd][0-9]|fpsid|fpscr|fpexc|q3[0' +
        '-1]|q2[0-9]|q1[0-9]|q[0-9]|APSR_nzcv|sy)\b'#13#10
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Directive'
      StyleName = 'Directive'
      TokenType = 6
      Expression = '\.\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '\# '#39'.*?('#39'|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String2'
      StyleName = 'String'
      TokenType = 4
      Expression = '(['#39'"]) .*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\.,:\-\+\*\\/%@<>\(\)\[\]\{\}\?=!]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preproc'
      StyleName = 'Preproc'
      TokenType = 8
      Expression = '^\s*\#\s*\w+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'Keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'align'
            'altmacro'
            'arch'
            'arm'
            'balign'
            'code'
            'else'
            'elseif'
            'endfunc'
            'endif'
            'endm'
            'endr'
            'error'
            'fpu'
            'func'
            'global'
            'globl'
            'hidden'
            'if'
            'import'
            'include'
            'int'
            'irp'
            'macro'
            'object_arch'
            'purgem'
            'rept'
            'req'
            'section'
            'short'
            'string'
            'text'
            'type'
            'unreq'
            'word')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Label'
      ConditionList = <
        item
          TokenTypes = 1
        end>
      HighlightPos = cpAny
      NoEndRule = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'Commands'
      StyleName = 'Id command'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'ABS'
            'ADC'
            'ADCS'
            'ADD'
            'ADDHN'
            'ADDHN2'
            'ADDP'
            'ADDS'
            'ADDV'
            'ADR'
            'ADRP'
            'AESD'
            'AESE'
            'AESIMC'
            'AESMC'
            'AND'
            'ANDS'
            'ASRV'
            'B'
            'BAD'
            'BFM'
            'BIC'
            'BICS'
            'BIF'
            'BIT'
            'BL'
            'BLR'
            'BR'
            'BRK'
            'BSL'
            'CBNZ'
            'CBZ'
            'CCMN'
            'CCMP'
            'CLREX'
            'CLS'
            'CLZ'
            'CMEQ'
            'CMGE'
            'CMGT'
            'CMHI'
            'CMHS'
            'CMLE'
            'CMLT'
            'CMTST'
            'CNT'
            'CRC32B'
            'CRC32CB'
            'CRC32CH'
            'CRC32CW'
            'CRC32CX'
            'CRC32H'
            'CRC32W'
            'CRC32X'
            'CSEL'
            'CSINC'
            'CSINV'
            'CSNEG'
            'DCPS1'
            'DCPS2'
            'DCPS3'
            'DMB'
            'DRPS'
            'DSB'
            'DUP'
            'EON'
            'EOR'
            'ERET'
            'EXT'
            'EXTR'
            'FABD'
            'FABS'
            'FACGE'
            'FACGT'
            'FADD'
            'FADDP'
            'FCCMP'
            'FCCMPE'
            'FCMEQ'
            'FCMGE'
            'FCMGT'
            'FCMLE'
            'FCMLT'
            'FCMP'
            'FCMPE'
            'FCSEL'
            'FCVT'
            'FCVTAS'
            'FCVTAU'
            'FCVTL'
            'FCVTL2'
            'FCVTMS'
            'FCVTMU'
            'FCVTN'
            'FCVTN2'
            'FCVTNS'
            'FCVTNU'
            'FCVTPS'
            'FCVTPU'
            'FCVTXN'
            'FCVTXN2'
            'FCVTZS'
            'FCVTZU'
            'FDIV'
            'FMADD'
            'FMAX'
            'FMAXNM'
            'FMAXNMP'
            'FMAXNMV'
            'FMAXP'
            'FMAXV'
            'FMIN'
            'FMINNM'
            'FMINNMP'
            'FMINNMV'
            'FMINP'
            'FMINV'
            'FMLA'
            'FMLS'
            'FMOV'
            'FMSUB'
            'FMUL'
            'FMULX'
            'FNEG'
            'FNMADD'
            'FNMSUB'
            'FNMUL'
            'FRECPE'
            'FRECPS'
            'FRECPX'
            'FRINTA'
            'FRINTI'
            'FRINTM'
            'FRINTN'
            'FRINTP'
            'FRINTX'
            'FRINTZ'
            'FRSQRTE'
            'FRSQRTS'
            'FSQRT'
            'FSUB'
            'HINT'
            'HLT'
            'HVC'
            'INS'
            'ISB'
            'LD1'
            'LD1R'
            'LD2'
            'LD2R'
            'LD3'
            'LD3R'
            'LD4'
            'LD4R'
            'LDAR'
            'LDARB'
            'LDARH'
            'LDAXP'
            'LDAXR'
            'LDAXRB'
            'LDAXRH'
            'LDNP'
            'LDP'
            'LDPSW'
            'LDR'
            'LDRB'
            'LDRH'
            'LDRSB'
            'LDRSH'
            'LDRSW'
            'LDTR'
            'LDTRB'
            'LDTRH'
            'LDTRSB'
            'LDTRSH'
            'LDTRSW'
            'LDUR'
            'LDURB'
            'LDURH'
            'LDURSB'
            'LDURSH'
            'LDURSW'
            'LDXP'
            'LDXR'
            'LDXRB'
            'LDXRH'
            'LSLV'
            'LSRV'
            'MADD'
            'MLA'
            'MLS'
            'MOVI'
            'MOVK'
            'MOVN'
            'MOVZ'
            'MRS'
            'MSR'
            'MSUB'
            'MUL'
            'MVNI'
            'NEG'
            'NOT'
            'ORN'
            'ORR'
            'PMUL'
            'PMULL'
            'PMULL2'
            'PRFM'
            'PRFUM'
            'RADDHN'
            'RADDHN2'
            'RBIT'
            'RET'
            'REV'
            'REV16'
            'REV32'
            'REV64'
            'RORV'
            'RSHRN'
            'RSHRN2'
            'RSUBHN'
            'RSUBHN2'
            'SABA'
            'SABAL'
            'SABAL2'
            'SABD'
            'SABDL'
            'SABDL2'
            'SADALP'
            'SADDL'
            'SADDL2'
            'SADDLP'
            'SADDLV'
            'SADDW'
            'SADDW2'
            'SBC'
            'SBCS'
            'SBFM'
            'SCVTF'
            'SDIV'
            'SHA1C'
            'SHA1H'
            'SHA1M'
            'SHA1P'
            'SHA1SU0'
            'SHA1SU1'
            'SHA256H'
            'SHA256H2'
            'SHA256SU0'
            'SHA256SU1'
            'SHADD'
            'SHL'
            'SHLL'
            'SHLL2'
            'SHRN'
            'SHRN2'
            'SHSUB'
            'SLI'
            'SMADDL'
            'SMAX'
            'SMAXP'
            'SMAXV'
            'SMC'
            'SMIN'
            'SMINP'
            'SMINV'
            'SMLAL'
            'SMLAL2'
            'SMLSL'
            'SMLSL2'
            'SMOV'
            'SMSUBL'
            'SMULH'
            'SMULL'
            'SMULL2'
            'SQABS'
            'SQADD'
            'SQDMLAL'
            'SQDMLAL2'
            'SQDMLSL'
            'SQDMLSL2'
            'SQDMULH'
            'SQDMULL'
            'SQDMULL2'
            'SQNEG'
            'SQRDMULH'
            'SQRSHL'
            'SQRSHRN'
            'SQRSHRN2'
            'SQRSHRUN'
            'SQRSHRUN2'
            'SQSHL'
            'SQSHLU'
            'SQSHRN'
            'SQSHRN2'
            'SQSHRUN'
            'SQSHRUN2'
            'SQSUB'
            'SQXTN'
            'SQXTN2'
            'SQXTUN'
            'SQXTUN2'
            'SRHADD'
            'SRI'
            'SRSHL'
            'SRSHR'
            'SRSRA'
            'SSHL'
            'SSHLL'
            'SSHLL2'
            'SSHR'
            'SSRA'
            'SSUBL'
            'SSUBL2'
            'SSUBW'
            'SSUBW2'
            'ST1'
            'ST2'
            'ST3'
            'ST4'
            'STLR'
            'STLRB'
            'STLRH'
            'STLXP'
            'STLXR'
            'STLXRB'
            'STLXRH'
            'STNP'
            'STP'
            'STR'
            'STRB'
            'STRH'
            'STTR'
            'STTRB'
            'STTRH'
            'STUR'
            'STURB'
            'STURH'
            'STXP'
            'STXR'
            'STXRB'
            'STXRH'
            'SUB'
            'SUBHN'
            'SUBHN2'
            'SUBS'
            'SUQADD'
            'SVC'
            'SYS'
            'SYSL'
            'TBL'
            'TBNZ'
            'TBX'
            'TBZ'
            'TRN1'
            'TRN2'
            'UABA'
            'UABAL'
            'UABAL2'
            'UABD'
            'UABDL'
            'UABDL2'
            'UADALP'
            'UADDL'
            'UADDL2'
            'UADDLP'
            'UADDLV'
            'UADDW'
            'UADDW2'
            'UBFM'
            'UCVTF'
            'UDIV'
            'UHADD'
            'UHSUB'
            'UMADDL'
            'UMAX'
            'UMAXP'
            'UMAXV'
            'UMIN'
            'UMINP'
            'UMINV'
            'UMLAL'
            'UMLAL2'
            'UMLSL'
            'UMLSL2'
            'UMOV'
            'UMSUBL'
            'UMULH'
            'UMULL'
            'UMULL2'
            'UQADD'
            'UQRSHL'
            'UQRSHRN'
            'UQRSHRN2'
            'UQSHL'
            'UQSHRN'
            'UQSUB'
            'UQXTN'
            'UQXTN2'
            'URECPE'
            'URHADD'
            'URSHL'
            'URSHR'
            'URSQRTE'
            'URSRA'
            'USHL'
            'USHLL'
            'USHLL2'
            'USHR'
            'USQADD'
            'USRA'
            'USUBL'
            'USUBL2'
            'USUBW'
            'USUBW2'
            'UZP1'
            'UZP2'
            'XTN'
            'XTN2'
            'ZIP1'
            'ZIP2')
          TokenTypes = 4
          IgnoreCase = True
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '  =label'
    '//Test'
    '  # endif name'
    '/* Test'
    'test */   0xA0b0 -0.1020 #'#39'test'#39
    #39'test'#39' + "test"'
    ''
    '.global connect'
    'connect:'
    '    mov     ip, sp'
    '    push    {fp, ip, lr}'
    '    sub     fp, ip, #4'
    '    mov     r0, #-2'
    '    mov     r1, #0xAB_FF  '
    ''
    '    @ sockfd is now in r0'
    '    push    {r0}        @ push sockfd'
    ''
    '.data'
    'socket_call:   .long 281'
    'connect_call:  .long 283'
    ''
    'server_port:            .hword 0x0b00'
    'msg_head:       .string "armbot: source"'
    '')
  TokenTypeNames.Strings = (
    'Label'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Directive'
    'Label='
    'Preproc')
  Extentions = 's S'
  LexerName = 'Assembly ARM'
  SkipSpaces = False
  Notes.Strings = (
    'Alexey (CudaText)'
    'Samples:'
    '  https://github.com/wyc/armbot'
    '  https://github.com/ICTeam28/PiFox'
    'Opcodes list: https://github.com/CAS-Atlantic/AArch64-Encoding')
  LineComment = '@'
  Charset = DEFAULT_CHARSET
end
