object SyntAnal23: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end
    item
      DisplayName = 'Preprocessor'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGreen
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '//.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s) \(\* .*? (\*\) |\Z)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '("|'#39').*?(\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id 1st'
      StyleName = 'Id'
      TokenType = 7
      Expression = '(?<=^[\x20\x09]*) \w+ !?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w* !?'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Hex'
      StyleName = 'Number'
      TokenType = 5
      Expression = '0x[\da-f]*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Preprocessor'
      StyleName = 'Preprocessor'
      TokenType = 6
      Expression = '\#\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.@]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^!~\?]+'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'and'
            'as'
            'asr'
            'assert'
            'atomic'
            'base'
            'begin'
            'break'
            'checked'
            'class'
            'component'
            'const'
            'constraint'
            'constructor'
            'continue'
            'default'
            'delegate'
            'do'
            'done'
            'downcast'
            'downto'
            'eager'
            'elif'
            'else'
            'end'
            'event'
            'exception'
            'extern'
            'external'
            'false'
            'finally'
            'fixed'
            'for'
            'fun'
            'function'
            'functor'
            'global'
            'if'
            'in'
            'include'
            'inherit'
            'inline'
            'interface'
            'internal'
            'land'
            'lazy'
            'let'
            'let!'
            'lor'
            'lsl'
            'lsr'
            'lxor'
            'match'
            'member'
            'method'
            'mixin'
            'mod'
            'module'
            'mutable'
            'namespace'
            'new'
            'not'
            'null'
            'object'
            'of'
            'open'
            'or'
            'override'
            'parallel'
            'private'
            'process'
            'protected'
            'public'
            'pure'
            'rec'
            'return'
            'return!'
            'sealed'
            'select'
            'sig'
            'static'
            'struct'
            'tailcall'
            'then'
            'to'
            'trait'
            'true'
            'try'
            'type'
            'upcast'
            'use'
            'use!'
            'val'
            'virtual'
            'void'
            'volatile'
            'when'
            'while'
            'with'
            'yield'
            'yield!')
          TokenTypes = 132
        end>
      HighlightPos = cpBound
      IgnoreAsParent = False
    end
    item
      DisplayName = 'treeitem'
      ConditionList = <
        item
          TagList.Strings = (
            'abstract'
            'assert'
            'atomic'
            'base'
            'begin'
            'break'
            'checked'
            'class'
            'component'
            'const'
            'constraint'
            'constructor'
            'continue'
            'default'
            'delegate'
            'do'
            'done'
            'downcast'
            'downto'
            'eager'
            'elif'
            'else'
            'end'
            'event'
            'exception'
            'extern'
            'external'
            'finally'
            'fixed'
            'for'
            'fun'
            'function'
            'functor'
            'global'
            'if'
            'in'
            'include'
            'inherit'
            'inline'
            'interface'
            'internal'
            'land'
            'lazy'
            'let'
            'let!'
            'lsl'
            'lsr'
            'match'
            'member'
            'method'
            'mixin'
            'module'
            'mutable'
            'new'
            'object'
            'override'
            'parallel'
            'private'
            'process'
            'protected'
            'public'
            'pure'
            'rec'
            'return'
            'return!'
            'sealed'
            'select'
            'sig'
            'static'
            'struct'
            'tailcall'
            'then'
            'trait'
            'try'
            'type'
            'upcast'
            'use'
            'use!'
            'val'
            'virtual'
            'void'
            'volatile'
            'when'
            'while'
            'with'
            'yield'
            'yield!')
          TokenTypes = 128
        end>
      EndOfTextClose = True
      NameFmt = '%sz0'
      RefToCondEnd = True
      HighlightPos = cpAny
      GroupIndex = 20
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '#light'
    '(* Comment'
    '*)'
    ''
    'let people = ["Granville"; "John"]'
    ''
    'let! printPeople p ='
    '    List.iter print_string p'
    ''
    'printPeople addAFewMore'
    ''
    'let numbers = [[1;2;3];[4;5;6]]'
    ''
    'let rec concat l = '
    '    match l with'
    '    | head::tail -> head @ (concat tail)'
    '    | [] -> []'
    '    '
    'let cross_tup ls1 ls2 =    '
    '  ls2 |> List.map ( fun el2 -> '
    '    ls1 |> List.map ( fun el1 -> (el1, el2) ) ) |> List.concat')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    'Preprocessor'
    '^Id')
  Extentions = 'fs'
  LexerName = 'F#'
  Notes.Strings = (
    'Alexey (CudaText)'
    'Test: http://fsharpsamples.codeplex.com/')
  LineComment = '//'
  Charset = DEFAULT_CHARSET
end
