object SyntAnal3: TLibSyntAnalyzer
  Formats = <
    item
      DisplayName = 'Id'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Id keyword'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clBlack
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'String'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clTeal
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = []
    end
    item
      DisplayName = 'Symbol'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clMaroon
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Number'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clNavy
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsBold]
    end
    item
      DisplayName = 'Comment'
      Font.Charset = DEFAULT_CHARSET
      Font.Color = clGray
      Font.Height = -13
      Font.Name = 'Courier New'
      Font.Style = [fsItalic]
    end>
  TokenRules = <
    item
      DisplayName = 'Comment'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '--.*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Comment 2'
      StyleName = 'Comment'
      TokenType = 1
      Expression = '(?s)\(\* .*? \*\)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'String'
      StyleName = 'String'
      TokenType = 4
      Expression = '(") (\\\\|\\\1|.)*? (\1|$)'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Id'
      StyleName = 'Id'
      TokenType = 2
      Expression = '[a-z_]\w*'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Float'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+ (\.\d+)? e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Integer'
      StyleName = 'Number'
      TokenType = 5
      Expression = '\d+'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Single symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[\{\}\(\)\[\],;\.\?]'
      ColumnFrom = 0
      ColumnTo = 0
    end
    item
      DisplayName = 'Symbol'
      StyleName = 'Symbol'
      TokenType = 3
      Expression = '[/\+\-\*:=<>&/\|\^~!%]'
      ColumnFrom = 0
      ColumnTo = 0
    end>
  BlockRules = <
    item
      DisplayName = 'keywords'
      StyleName = 'Id keyword'
      BlockType = btTagDetect
      ConditionList = <
        item
          TagList.Strings = (
            'about'
            'above'
            'after'
            'against'
            'and'
            'apart'
            'around'
            'as'
            'aside'
            'at'
            'back'
            'before'
            'beginning'
            'behind'
            'below'
            'beneath'
            'beside'
            'between'
            'but'
            'by'
            'considering'
            'contain'
            'contains'
            'continue'
            'copy'
            'div'
            'does'
            'eighth'
            'else'
            'end'
            'equal'
            'equals'
            'error'
            'every'
            'exit'
            'false'
            'fifth'
            'first'
            'for'
            'fourth'
            'from'
            'front'
            'get'
            'given'
            'global'
            'if'
            'ignoring'
            'in'
            'instead'
            'into'
            'is'
            'it'
            'its'
            'last'
            'local'
            'me'
            'middle'
            'mod'
            'my'
            'ninth'
            'not'
            'of'
            'on'
            'onto'
            'or'
            'out'
            'over'
            'prop'
            'property'
            'put'
            'ref'
            'reference'
            'repeat'
            'return'
            'returning'
            'script'
            'second'
            'set'
            'seventh'
            'since'
            'sixth'
            'some'
            'tell'
            'tenth'
            'that'
            'the'
            'then'
            'third'
            'through'
            'thru'
            'timeout'
            'times'
            'to'
            'transaction'
            'true'
            'try'
            'until'
            'use'
            'where'
            'while'
            'whose'
            'with'
            'without')
          TokenTypes = 4
        end>
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block if end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      SameIdent = True
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block all end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      SameIdent = True
      HighlightPos = cpAny
      CancelNextRules = True
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block if'
      ConditionList = <
        item
          TagList.Strings = (
            'if')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'else'
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
        end>
      BlockEnd = 'block if end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%s0 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'block all'
      ConditionList = <
        item
          TagList.Strings = (
            'repeat'
            'tell'
            'try')
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          CondType = tcNotEqual
          TokenTypes = 4
        end>
      BlockEnd = 'block all end'
      DisplayInTree = False
      HighlightPos = cpAny
      DrawStaple = True
      CollapseFmt = '%s0 ...'
      IgnoreAsParent = False
    end
    item
      DisplayName = 'on'
      ConditionList = <
        item
          TagList.Strings = (
            'error')
          CondType = tcNotEqual
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'on')
          TokenTypes = 4
        end>
      BlockEnd = 'on end'
      HighlightPos = cpAny
      IgnoreAsParent = False
    end
    item
      DisplayName = 'on end'
      BlockType = btRangeEnd
      ConditionList = <
        item
          TokenTypes = 4
        end
        item
          TagList.Strings = (
            'end')
          TokenTypes = 4
        end>
      SameIdent = True
      HighlightPos = cpAny
      IgnoreAsParent = False
    end>
  CodeTemplates = <>
  SubAnalyzers = <>
  SampleText.Strings = (
    '-- Comment'
    'property typeIDs_list : {10, 10.02} '
    'property post_alert : true'
    ''
    'on run'
    #9'repeat'
    #9#9'display dialog "My File Processing Droplet"'
    #9#9'if the button returned of the result is "Set Prefs" then'
    
      #9#9#9'display dialog "Should" & return & return & "Current Status: ' +
      '" & (post_alert as text) buttons {"Cancel", "False", "True"}'
    #9#9#9'if the button returned of the result is "False" then'
    #9#9#9#9'set post_alert to false'
    #9#9#9'else if false then'
    #9#9#9#9'set post_alert to true'
    #9#9#9'end if'
    #9#9'else'
    #9#9#9'return "done"'
    #9#9'end if'
    #9'end repeat'
    'end run')
  TokenTypeNames.Strings = (
    'Unknown'
    'Comment'
    'Id'
    'Symbol'
    'String'
    'Number'
    '')
  Extentions = 'applescript'
  LexerName = 'AppleScript'
  Notes.Strings = (
    'Author: Alexey (SynWrite)')
  LineComment = '--'
  Charset = DEFAULT_CHARSET
end
